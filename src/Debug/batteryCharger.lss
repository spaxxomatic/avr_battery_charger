
batteryCharger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000058e  00800100  0000379c  00003830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000379c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080068e  0080068e  00003dbe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003dbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00003e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044e2  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111f  00000000  00000000  0000852e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c6a  00000000  00000000  0000964d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  0000b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b98  00000000  00000000  0000ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036b8  00000000  00000000  0000c600  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__vector_11>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2240>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <_ZL7font5x7>:
     16a:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
     17a:	7f 14 7f 14 24 2a 7f 2a 12 32 34 08 16 26 36 49     ....$*.*.24..&6I
     18a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     19a:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     1aa:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     1ba:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     1ca:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     1da:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     1ea:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     1fa:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     20a:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
     21a:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     22a:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     23a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     24a:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     25a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     26a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     27a:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     28a:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     29a:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     2aa:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     2ba:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     2ca:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     2da:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     2ea:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     2fa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     30a:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     31a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     32a:	50 3c 44 64 54 4c 44 00 7f 3e 1c 08 08 1c 3e 7f     P<DdTLD..>....>.
     33a:	00 08 7c 7e 7c 08 10 3e 7e 3e 10 3e 3e 3e 3e 3e     ..|~|..>~>.>>>>>
     34a:	00 7f 3e 1c 08 00                                   ..>...

00000350 <__ctors_end>:
     350:	11 24       	eor	r1, r1
     352:	1f be       	out	0x3f, r1	; 63
     354:	cf ef       	ldi	r28, 0xFF	; 255
     356:	d8 e0       	ldi	r29, 0x08	; 8
     358:	de bf       	out	0x3e, r29	; 62
     35a:	cd bf       	out	0x3d, r28	; 61

0000035c <_Z8wdt_initv>:
	secondFlag = true;
}

void wdt_init(void)
{
	MCUSR = 0;
     35c:	14 be       	out	0x34, r1	; 52
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	a8 95       	wdr
     364:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     368:	88 61       	ori	r24, 0x18	; 24
     36a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     36e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     372:	0f be       	out	0x3f, r0	; 63

00000374 <__do_copy_data>:
     374:	16 e0       	ldi	r17, 0x06	; 6
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e9       	ldi	r30, 0x9C	; 156
     37c:	f7 e3       	ldi	r31, 0x37	; 55
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 38       	cpi	r26, 0x8E	; 142
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	26 e0       	ldi	r18, 0x06	; 6
     38c:	ae e8       	ldi	r26, 0x8E	; 142
     38e:	b6 e0       	ldi	r27, 0x06	; 6
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a0 3a       	cpi	r26, 0xA0	; 160
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 75 12 	call	0x24ea	; 0x24ea <main>
     39e:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <_Z9ADC_setupv>:
 #include "header.h"
 #include <util/delay.h>

 void ADC_setup(void)
 {
	 ADCSRA |= (1<<ADEN);	//enables ADC
     3a6:	ea e7       	ldi	r30, 0x7A	; 122
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	80 83       	st	Z, r24
	 ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);   //selects prescaler
     3b0:	80 81       	ld	r24, Z
     3b2:	87 60       	ori	r24, 0x07	; 7
     3b4:	80 83       	st	Z, r24
     3b6:	08 95       	ret

000003b8 <_Z21measureBatteryVoltagev>:
 }

 float measureBatteryVoltage(void)
 {
	 uint16_t samples = 0;
	 ADMUX = (1<<REFS0)|(1<<MUX0);
     3b8:	81 e4       	ldi	r24, 0x41	; 65
     3ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3be:	81 ee       	ldi	r24, 0xE1	; 225
     3c0:	94 e0       	ldi	r25, 0x04	; 4
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <_Z21measureBatteryVoltagev+0xa>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <_Z21measureBatteryVoltagev+0x10>
     3c8:	00 00       	nop
     3ca:	98 e0       	ldi	r25, 0x08	; 8
	 ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);   //selects prescaler
 }

 float measureBatteryVoltage(void)
 {
	 uint16_t samples = 0;
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
	 ADMUX = (1<<REFS0)|(1<<MUX0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
	 {
		 ADCSRA |= (1<<ADSC);
     3d0:	ea e7       	ldi	r30, 0x7A	; 122
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
		 while(ADCSRA & (1<<ADSC));
		 samples += ADC;
     3d4:	a8 e7       	ldi	r26, 0x78	; 120
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
	 ADMUX = (1<<REFS0)|(1<<MUX0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
	 {
		 ADCSRA |= (1<<ADSC);
     3d8:	80 81       	ld	r24, Z
     3da:	80 64       	ori	r24, 0x40	; 64
     3dc:	80 83       	st	Z, r24
		 while(ADCSRA & (1<<ADSC));
     3de:	80 81       	ld	r24, Z
     3e0:	86 fd       	sbrc	r24, 6
     3e2:	fd cf       	rjmp	.-6      	; 0x3de <_Z21measureBatteryVoltagev+0x26>
		 samples += ADC;
     3e4:	2d 91       	ld	r18, X+
     3e6:	3c 91       	ld	r19, X
     3e8:	11 97       	sbiw	r26, 0x01	; 1
     3ea:	62 0f       	add	r22, r18
     3ec:	73 1f       	adc	r23, r19
     3ee:	91 50       	subi	r25, 0x01	; 1
 {
	 uint16_t samples = 0;
	 ADMUX = (1<<REFS0)|(1<<MUX0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
     3f0:	99 f7       	brne	.-26     	; 0x3d8 <_Z21measureBatteryVoltagev+0x20>
		 ADCSRA |= (1<<ADSC);
		 while(ADCSRA & (1<<ADSC));
		 samples += ADC;
	 }

	 return((samples * VOLTAGE_GAIN * ADC_INPUT_VOLTAGE)/(8 * 1024));		//Vout = (samples * Vref * 3) / (4 * 1024)		Vref = 5V
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     3fa:	21 e7       	ldi	r18, 0x71	; 113
     3fc:	3d e3       	ldi	r19, 0x3D	; 61
     3fe:	42 e4       	ldi	r20, 0x42	; 66
     400:	50 e4       	ldi	r21, 0x40	; 64
     402:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 ea       	ldi	r20, 0xA0	; 160
     40c:	50 e4       	ldi	r21, 0x40	; 64
     40e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	59 e3       	ldi	r21, 0x39	; 57
     41a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>

 }
     41e:	08 95       	ret

00000420 <_Z22measureChargingCurrentv>:

 float measureChargingCurrent(void)
 {
	 uint16_t samples = 0;
	 ADMUX = (1<<REFS0);
     420:	80 e4       	ldi	r24, 0x40	; 64
     422:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     426:	81 ee       	ldi	r24, 0xE1	; 225
     428:	94 e0       	ldi	r25, 0x04	; 4
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	f1 f7       	brne	.-4      	; 0x42a <_Z22measureChargingCurrentv+0xa>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <_Z22measureChargingCurrentv+0x10>
     430:	00 00       	nop
     432:	98 e0       	ldi	r25, 0x08	; 8

 }

 float measureChargingCurrent(void)
 {
	 uint16_t samples = 0;
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	70 e0       	ldi	r23, 0x00	; 0
	 ADMUX = (1<<REFS0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
	 {
		 ADCSRA |= (1<<ADSC);
     438:	ea e7       	ldi	r30, 0x7A	; 122
     43a:	f0 e0       	ldi	r31, 0x00	; 0
		 while(ADCSRA & (1<<ADSC));
		 samples += ADC;
     43c:	a8 e7       	ldi	r26, 0x78	; 120
     43e:	b0 e0       	ldi	r27, 0x00	; 0
	 ADMUX = (1<<REFS0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
	 {
		 ADCSRA |= (1<<ADSC);
     440:	80 81       	ld	r24, Z
     442:	80 64       	ori	r24, 0x40	; 64
     444:	80 83       	st	Z, r24
		 while(ADCSRA & (1<<ADSC));
     446:	80 81       	ld	r24, Z
     448:	86 fd       	sbrc	r24, 6
     44a:	fd cf       	rjmp	.-6      	; 0x446 <_Z22measureChargingCurrentv+0x26>
		 samples += ADC;
     44c:	2d 91       	ld	r18, X+
     44e:	3c 91       	ld	r19, X
     450:	11 97       	sbiw	r26, 0x01	; 1
     452:	62 0f       	add	r22, r18
     454:	73 1f       	adc	r23, r19
     456:	91 50       	subi	r25, 0x01	; 1
 {
	 uint16_t samples = 0;
	 ADMUX = (1<<REFS0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
     458:	99 f7       	brne	.-26     	; 0x440 <_Z22measureChargingCurrentv+0x20>
		 ADCSRA |= (1<<ADSC);
		 while(ADCSRA & (1<<ADSC));
		 samples += ADC;
	 }

	 return((samples * CURRENT_GAIN * ADC_INPUT_VOLTAGE)/(8 * 1024 * SHUNT_RESISTOR_CHARGE));
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	40 e8       	ldi	r20, 0x80	; 128
     468:	5d e3       	ldi	r21, 0x3D	; 61
     46a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 ea       	ldi	r20, 0xA0	; 160
     474:	50 e4       	ldi	r21, 0x40	; 64
     476:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     47a:	2d ec       	ldi	r18, 0xCD	; 205
     47c:	3c ec       	ldi	r19, 0xCC	; 204
     47e:	4c e4       	ldi	r20, 0x4C	; 76
     480:	54 e4       	ldi	r21, 0x44	; 68
     482:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>

 }
     486:	08 95       	ret

00000488 <_Z25measureDischargingCurrentv>:

 float measureDischargingCurrent(void)
 {
	 uint16_t samples = 0;
	 ADMUX = (1<<REFS0)|(1<<MUX1);
     488:	82 e4       	ldi	r24, 0x42	; 66
     48a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     48e:	81 ee       	ldi	r24, 0xE1	; 225
     490:	94 e0       	ldi	r25, 0x04	; 4
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <_Z25measureDischargingCurrentv+0xa>
     496:	00 c0       	rjmp	.+0      	; 0x498 <_Z25measureDischargingCurrentv+0x10>
     498:	00 00       	nop
     49a:	98 e0       	ldi	r25, 0x08	; 8

 }

 float measureDischargingCurrent(void)
 {
	 uint16_t samples = 0;
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
	 ADMUX = (1<<REFS0)|(1<<MUX1);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
	 {
		 ADCSRA |= (1<<ADSC);
     4a0:	ea e7       	ldi	r30, 0x7A	; 122
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
		 while(ADCSRA & (1<<ADSC));
		 samples += ADC;
     4a4:	a8 e7       	ldi	r26, 0x78	; 120
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
	 ADMUX = (1<<REFS0)|(1<<MUX1);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
	 {
		 ADCSRA |= (1<<ADSC);
     4a8:	80 81       	ld	r24, Z
     4aa:	80 64       	ori	r24, 0x40	; 64
     4ac:	80 83       	st	Z, r24
		 while(ADCSRA & (1<<ADSC));
     4ae:	80 81       	ld	r24, Z
     4b0:	86 fd       	sbrc	r24, 6
     4b2:	fd cf       	rjmp	.-6      	; 0x4ae <_Z25measureDischargingCurrentv+0x26>
		 samples += ADC;
     4b4:	2d 91       	ld	r18, X+
     4b6:	3c 91       	ld	r19, X
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	62 0f       	add	r22, r18
     4bc:	73 1f       	adc	r23, r19
     4be:	91 50       	subi	r25, 0x01	; 1
 {
	 uint16_t samples = 0;
	 ADMUX = (1<<REFS0)|(1<<MUX1);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
     4c0:	99 f7       	brne	.-26     	; 0x4a8 <_Z25measureDischargingCurrentv+0x20>
		 ADCSRA |= (1<<ADSC);
		 while(ADCSRA & (1<<ADSC));
		 samples += ADC;
	 }

	 return((samples * CURRENT_GAIN * ADC_INPUT_VOLTAGE)/(8 * 1024 * SHUNT_RESISTOR_DISCHARGE));
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e8       	ldi	r20, 0x80	; 128
     4d0:	5d e3       	ldi	r21, 0x3D	; 61
     4d2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 ea       	ldi	r20, 0xA0	; 160
     4dc:	50 e4       	ldi	r21, 0x40	; 64
     4de:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     4e2:	2d ec       	ldi	r18, 0xCD	; 205
     4e4:	3c ec       	ldi	r19, 0xCC	; 204
     4e6:	4c e4       	ldi	r20, 0x4C	; 76
     4e8:	54 e4       	ldi	r21, 0x44	; 68
     4ea:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
 }
     4ee:	08 95       	ret

000004f0 <_Z25measureBatteryTemperaturev>:

 uint16_t measureBatteryTemperature(void)		//designed for LM35DZ temperature sensor
 {
	 uint16_t samples = 0;
	 ADMUX = (1<<REFS0)|(1<<MUX1)|(1<<MUX0);
     4f0:	83 e4       	ldi	r24, 0x43	; 67
     4f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     4f6:	81 ee       	ldi	r24, 0xE1	; 225
     4f8:	94 e0       	ldi	r25, 0x04	; 4
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <_Z25measureBatteryTemperaturev+0xa>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <_Z25measureBatteryTemperaturev+0x10>
     500:	00 00       	nop
     502:	98 e0       	ldi	r25, 0x08	; 8
	 return((samples * CURRENT_GAIN * ADC_INPUT_VOLTAGE)/(8 * 1024 * SHUNT_RESISTOR_DISCHARGE));
 }

 uint16_t measureBatteryTemperature(void)		//designed for LM35DZ temperature sensor
 {
	 uint16_t samples = 0;
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
	 ADMUX = (1<<REFS0)|(1<<MUX1)|(1<<MUX0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
	 {
		 ADCSRA |= (1<<ADSC);
     508:	ea e7       	ldi	r30, 0x7A	; 122
     50a:	f0 e0       	ldi	r31, 0x00	; 0
		 while(ADCSRA & (1<<ADSC));
		 samples += ADC;
     50c:	a8 e7       	ldi	r26, 0x78	; 120
     50e:	b0 e0       	ldi	r27, 0x00	; 0
	 ADMUX = (1<<REFS0)|(1<<MUX1)|(1<<MUX0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
	 {
		 ADCSRA |= (1<<ADSC);
     510:	80 81       	ld	r24, Z
     512:	80 64       	ori	r24, 0x40	; 64
     514:	80 83       	st	Z, r24
		 while(ADCSRA & (1<<ADSC));
     516:	80 81       	ld	r24, Z
     518:	86 fd       	sbrc	r24, 6
     51a:	fd cf       	rjmp	.-6      	; 0x516 <_Z25measureBatteryTemperaturev+0x26>
		 samples += ADC;
     51c:	2d 91       	ld	r18, X+
     51e:	3c 91       	ld	r19, X
     520:	11 97       	sbiw	r26, 0x01	; 1
     522:	62 0f       	add	r22, r18
     524:	73 1f       	adc	r23, r19
     526:	91 50       	subi	r25, 0x01	; 1
 {
	 uint16_t samples = 0;
	 ADMUX = (1<<REFS0)|(1<<MUX1)|(1<<MUX0);
	 _delay_us(250);

	 for (uint8_t i = 0; i < 8; i ++)
     528:	99 f7       	brne	.-26     	; 0x510 <_Z25measureBatteryTemperaturev+0x20>
		 ADCSRA |= (1<<ADSC);
		 while(ADCSRA & (1<<ADSC));
		 samples += ADC;
	 }

	 return(samples / (8 * LM35_ADC_PER_DEG));
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     532:	2e e6       	ldi	r18, 0x6E	; 110
     534:	32 e1       	ldi	r19, 0x12	; 18
     536:	43 e8       	ldi	r20, 0x83	; 131
     538:	51 e4       	ldi	r21, 0x41	; 65
     53a:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
     53e:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
 }
     542:	cb 01       	movw	r24, r22
     544:	08 95       	ret

00000546 <_Z16constantCVChargeff>:
#include <inttypes.h>
extern LCD_5110 lcd;
extern volatile bool secondFlag;

void constantCVCharge(float maxCurrent, float maxVoltage)
{
     546:	2f 92       	push	r2
     548:	3f 92       	push	r3
     54a:	4f 92       	push	r4
     54c:	5f 92       	push	r5
     54e:	6f 92       	push	r6
     550:	7f 92       	push	r7
     552:	8f 92       	push	r8
     554:	9f 92       	push	r9
     556:	af 92       	push	r10
     558:	bf 92       	push	r11
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	64 97       	sbiw	r28, 0x14	; 20
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	a6 2e       	mov	r10, r22
     57c:	97 2e       	mov	r9, r23
     57e:	88 2e       	mov	r8, r24
     580:	29 2e       	mov	r2, r25
     582:	72 2e       	mov	r7, r18
     584:	63 2e       	mov	r6, r19
     586:	54 2e       	mov	r5, r20
     588:	45 2e       	mov	r4, r21
	//review all info on the LCD
	lcd.lcd_clear();
     58a:	8e e8       	ldi	r24, 0x8E	; 142
     58c:	96 e0       	ldi	r25, 0x06	; 6
     58e:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
	lcd.lcd_goto_xy_exact(0, 0);
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	8e e8       	ldi	r24, 0x8E	; 142
     598:	96 e0       	ldi	r25, 0x06	; 6
     59a:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
	lcd.lcd_string_format("REVIEW:\nIchrg:  %4.2f AVmax:  %5.2f VPlugin batteryand press\nmiddle button", maxCurrent, maxVoltage);
     59e:	4f 92       	push	r4
     5a0:	5f 92       	push	r5
     5a2:	6f 92       	push	r6
     5a4:	7f 92       	push	r7
     5a6:	2f 92       	push	r2
     5a8:	8f 92       	push	r8
     5aa:	9f 92       	push	r9
     5ac:	af 92       	push	r10
     5ae:	88 e1       	ldi	r24, 0x18	; 24
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	8e e8       	ldi	r24, 0x8E	; 142
     5b8:	96 e0       	ldi	r25, 0x06	; 6
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>
	
	#ifdef UART
		uart_sendStr("STARTING CC-CV CHARGE\n");
     5c2:	83 e6       	ldi	r24, 0x63	; 99
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
		uart_sendStrFormatted("Vmax: %5.2f V, Imax: %4.2f V\n", maxVoltage, maxCurrent);
     5ca:	2f 92       	push	r2
     5cc:	8f 92       	push	r8
     5ce:	9f 92       	push	r9
     5d0:	af 92       	push	r10
     5d2:	4f 92       	push	r4
     5d4:	5f 92       	push	r5
     5d6:	6f 92       	push	r6
     5d8:	7f 92       	push	r7
     5da:	8a e7       	ldi	r24, 0x7A	; 122
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z21uart_sendStrFormattedPcz>
		uart_sendStr("V;I;tHrs:tMin:tSec;PWM;temp\n");
     5e6:	88 e9       	ldi	r24, 0x98	; 152
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
	#endif
	
	while (!BTN_MIDDLE_PRESSED);
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	4c 99       	sbic	0x09, 4	; 9
     5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <_Z16constantCVChargeff+0xb2>
	while (BTN_MIDDLE_PRESSED);
     5fc:	4c 9b       	sbis	0x09, 4	; 9
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <_Z16constantCVChargeff+0xb6>
	lcd.lcd_clear();
     600:	8e e8       	ldi	r24, 0x8E	; 142
     602:	96 e0       	ldi	r25, 0x06	; 6
     604:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
	bool constantCurrent, charging = true;
	uint32_t miliAmpSecs = 0, miliWattSecs = 0;
	uint8_t tHrs = 0, tMin = 0, tSec = 0;
	float batteryCurrent, batteryVoltage, batteryTemperature;
	uint8_t termination = RUNNING;
	if (maxCurrent == 0)		//if set current is 0, do not regulate current at all
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	a9 01       	movw	r20, r18
     60e:	6a 2d       	mov	r22, r10
     610:	79 2d       	mov	r23, r9
     612:	88 2d       	mov	r24, r8
     614:	92 2d       	mov	r25, r2
     616:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     61a:	88 23       	and	r24, r24
     61c:	19 f0       	breq	.+6      	; 0x624 <_Z16constantCVChargeff+0xde>
		constantCurrent = false;
		maxCurrent = 3.00;
	}
	else
	{
		constantCurrent = true;
     61e:	33 24       	eor	r3, r3
     620:	33 94       	inc	r3
     622:	09 c0       	rjmp	.+18     	; 0x636 <_Z16constantCVChargeff+0xf0>
	uint8_t tHrs = 0, tMin = 0, tSec = 0;
	float batteryCurrent, batteryVoltage, batteryTemperature;
	uint8_t termination = RUNNING;
	if (maxCurrent == 0)		//if set current is 0, do not regulate current at all
	{
		constantCurrent = false;
     624:	31 2c       	mov	r3, r1
		maxCurrent = 3.00;
     626:	a1 2c       	mov	r10, r1
     628:	91 2c       	mov	r9, r1
     62a:	68 94       	set
     62c:	88 24       	eor	r8, r8
     62e:	86 f8       	bld	r8, 6
     630:	68 94       	set
     632:	22 24       	eor	r2, r2
     634:	26 f8       	bld	r2, 6
	{
		constantCurrent = true;
	}

	//charging routine
	PWM_SUPPLY_MODE;
     636:	83 e2       	ldi	r24, 0x23	; 35
     638:	84 bd       	out	0x24, r24	; 36
	PWM_START;
     63a:	85 b5       	in	r24, 0x25	; 37
     63c:	81 60       	ori	r24, 0x01	; 1
     63e:	85 bd       	out	0x25, r24	; 37
	TIMER1_START;
     640:	8d e0       	ldi	r24, 0x0D	; 13
     642:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while (BTN_MIDDLE_PRESSED);
	lcd.lcd_clear();

	//variables
	bool constantCurrent, charging = true;
	uint32_t miliAmpSecs = 0, miliWattSecs = 0;
     646:	1b 82       	std	Y+3, r1	; 0x03
     648:	1c 82       	std	Y+4, r1	; 0x04
     64a:	1d 82       	std	Y+5, r1	; 0x05
     64c:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t tHrs = 0, tMin = 0, tSec = 0;
     64e:	b1 2c       	mov	r11, r1
	while (BTN_MIDDLE_PRESSED);
	lcd.lcd_clear();

	//variables
	bool constantCurrent, charging = true;
	uint32_t miliAmpSecs = 0, miliWattSecs = 0;
     650:	1f 82       	std	Y+7, r1	; 0x07
     652:	18 86       	std	Y+8, r1	; 0x08
     654:	19 86       	std	Y+9, r1	; 0x09
     656:	1a 86       	std	Y+10, r1	; 0x0a
	uint8_t tHrs = 0, tMin = 0, tSec = 0;
     658:	10 e0       	ldi	r17, 0x00	; 0
     65a:	f1 2c       	mov	r15, r1
	float batteryCurrent, batteryVoltage, batteryTemperature;
	uint8_t termination = RUNNING;
     65c:	18 8a       	std	Y+16, r1	; 0x10

		//do this every second
		if (secondFlag)
		{
			secondFlag = false;
			YEL_LED_TOGGLE;
     65e:	01 e0       	ldi	r16, 0x01	; 1
			}

			if (batteryTemperature > MAX_TEMPERATURE)
			{
				charging = false;
				termination = OVERTEMPERATURE;
     660:	bb 86       	std	Y+11, r11	; 0x0b
     662:	fa 82       	std	Y+2, r15	; 0x02
     664:	19 83       	std	Y+1, r17	; 0x01
     666:	b7 2c       	mov	r11, r7
     668:	16 2d       	mov	r17, r6
     66a:	5c 8a       	std	Y+20, r5	; 0x14
     66c:	4b 8a       	std	Y+19, r4	; 0x13
	TIMER1_START;

	while (charging)
	{
		//voltage/current regulation subroutine
		if (constantCurrent)	//if we are in the constant current mode
     66e:	33 20       	and	r3, r3
     670:	01 f1       	breq	.+64     	; 0x6b2 <_Z16constantCVChargeff+0x16c>
		{
			batteryCurrent = measureChargingCurrent();
     672:	0e 94 10 02 	call	0x420	; 0x420 <_Z22measureChargingCurrentv>
     676:	2b 01       	movw	r4, r22
     678:	3c 01       	movw	r6, r24
			if ((batteryCurrent < (maxCurrent * 0.95)) && (SUPPLY_PWM < 0xFF))
     67a:	23 e3       	ldi	r18, 0x33	; 51
     67c:	33 e3       	ldi	r19, 0x33	; 51
     67e:	43 e7       	ldi	r20, 0x73	; 115
     680:	5f e3       	ldi	r21, 0x3F	; 63
     682:	6a 2d       	mov	r22, r10
     684:	79 2d       	mov	r23, r9
     686:	88 2d       	mov	r24, r8
     688:	92 2d       	mov	r25, r2
     68a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	c3 01       	movw	r24, r6
     694:	b2 01       	movw	r22, r4
     696:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	0c f0       	brlt	.+2      	; 0x6a0 <_Z16constantCVChargeff+0x15a>
     69e:	02 c2       	rjmp	.+1028   	; 0xaa4 <__stack+0x1a5>
     6a0:	88 b5       	in	r24, 0x28	; 40
     6a2:	8f 3f       	cpi	r24, 0xFF	; 255
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <_Z16constantCVChargeff+0x162>
     6a6:	12 c2       	rjmp	.+1060   	; 0xacc <__stack+0x1cd>
     6a8:	fd c1       	rjmp	.+1018   	; 0xaa4 <__stack+0x1a5>
			{
				SUPPLY_PWM++;
			}
			else if ((batteryCurrent > (maxCurrent * 1.05) && (SUPPLY_PWM > 0x00)))
     6aa:	88 b5       	in	r24, 0x28	; 40
     6ac:	81 11       	cpse	r24, r1
     6ae:	12 c2       	rjmp	.+1060   	; 0xad4 <__stack+0x1d5>
     6b0:	21 c0       	rjmp	.+66     	; 0x6f4 <_Z16constantCVChargeff+0x1ae>
				SUPPLY_PWM--;
			}
		}
		else          //if we are in constant voltage mode
		{
			batteryVoltage = measureBatteryVoltage();
     6b2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
     6b6:	2b 01       	movw	r4, r22
     6b8:	3c 01       	movw	r6, r24
			if ((batteryVoltage < (maxVoltage - 0.05)) && (SUPPLY_PWM < 0xFF))
     6ba:	2d ec       	ldi	r18, 0xCD	; 205
     6bc:	3c ec       	ldi	r19, 0xCC	; 204
     6be:	4c e4       	ldi	r20, 0x4C	; 76
     6c0:	5d e3       	ldi	r21, 0x3D	; 61
     6c2:	fc 89       	ldd	r31, Y+20	; 0x14
     6c4:	eb 89       	ldd	r30, Y+19	; 0x13
     6c6:	6b 2d       	mov	r22, r11
     6c8:	71 2f       	mov	r23, r17
     6ca:	8f 2f       	mov	r24, r31
     6cc:	9e 2f       	mov	r25, r30
     6ce:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	c3 01       	movw	r24, r6
     6d8:	b2 01       	movw	r22, r4
     6da:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     6de:	88 23       	and	r24, r24
     6e0:	0c f0       	brlt	.+2      	; 0x6e4 <_Z16constantCVChargeff+0x19e>
     6e2:	00 c2       	rjmp	.+1024   	; 0xae4 <__stack+0x1e5>
     6e4:	88 b5       	in	r24, 0x28	; 40
     6e6:	8f 3f       	cpi	r24, 0xFF	; 255
     6e8:	09 f0       	breq	.+2      	; 0x6ec <_Z16constantCVChargeff+0x1a6>
     6ea:	f8 c1       	rjmp	.+1008   	; 0xadc <__stack+0x1dd>
     6ec:	fb c1       	rjmp	.+1014   	; 0xae4 <__stack+0x1e5>
			{
				SUPPLY_PWM++;
			}
			else if ((batteryVoltage > maxVoltage && (SUPPLY_PWM > 0x00)))
     6ee:	88 b5       	in	r24, 0x28	; 40
     6f0:	81 11       	cpse	r24, r1
     6f2:	06 c2       	rjmp	.+1036   	; 0xb00 <__stack+0x201>
				SUPPLY_PWM--;
			}
		}

		//do this every second
		if (secondFlag)
     6f4:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <secondFlag>
     6f8:	88 23       	and	r24, r24
     6fa:	09 f4       	brne	.+2      	; 0x6fe <_Z16constantCVChargeff+0x1b8>
     6fc:	b8 cf       	rjmp	.-144    	; 0x66e <_Z16constantCVChargeff+0x128>
		{
			secondFlag = false;
     6fe:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <secondFlag>
			YEL_LED_TOGGLE;
     702:	85 b1       	in	r24, 0x05	; 5
     704:	80 27       	eor	r24, r16
     706:	85 b9       	out	0x05, r24	; 5

			//calculating time
			tSec++;
     708:	39 81       	ldd	r19, Y+1	; 0x01
     70a:	3f 5f       	subi	r19, 0xFF	; 255
     70c:	39 83       	std	Y+1, r19	; 0x01
			if (tSec > 59)
     70e:	3c 33       	cpi	r19, 0x3C	; 60
     710:	20 f0       	brcs	.+8      	; 0x71a <_Z16constantCVChargeff+0x1d4>
			{
				tSec = 0;
				tMin++;
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	8a 83       	std	Y+2, r24	; 0x02

			//calculating time
			tSec++;
			if (tSec > 59)
			{
				tSec = 0;
     718:	19 82       	std	Y+1, r1	; 0x01
				tMin++;
			}
			if (tMin > 59)
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	9c 33       	cpi	r25, 0x3C	; 60
     71e:	20 f0       	brcs	.+8      	; 0x728 <_Z16constantCVChargeff+0x1e2>
			{
				tMin = 0;
				tHrs++;
     720:	ab 85       	ldd	r26, Y+11	; 0x0b
     722:	af 5f       	subi	r26, 0xFF	; 255
     724:	ab 87       	std	Y+11, r26	; 0x0b
				tSec = 0;
				tMin++;
			}
			if (tMin > 59)
			{
				tMin = 0;
     726:	1a 82       	std	Y+2, r1	; 0x02
				tHrs++;
			}

			//battery measurement routine
			batteryVoltage = measureBatteryVoltage();
     728:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
     72c:	6c 87       	std	Y+12, r22	; 0x0c
     72e:	7d 87       	std	Y+13, r23	; 0x0d
     730:	8e 87       	std	Y+14, r24	; 0x0e
     732:	9f 87       	std	Y+15, r25	; 0x0f
			batteryCurrent = measureChargingCurrent();
     734:	0e 94 10 02 	call	0x420	; 0x420 <_Z22measureChargingCurrentv>
     738:	76 2e       	mov	r7, r22
     73a:	67 2e       	mov	r6, r23
     73c:	58 2e       	mov	r5, r24
     73e:	49 2e       	mov	r4, r25
			batteryTemperature = measureBatteryTemperature();
     740:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_Z25measureBatteryTemperaturev>
     744:	bc 01       	movw	r22, r24
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     74e:	f6 2e       	mov	r15, r22
     750:	c7 2e       	mov	r12, r23
     752:	d8 2e       	mov	r13, r24
     754:	e9 2e       	mov	r14, r25
			miliAmpSecs += (batteryCurrent * 1000);
     756:	6b 81       	ldd	r22, Y+3	; 0x03
     758:	7c 81       	ldd	r23, Y+4	; 0x04
     75a:	8d 81       	ldd	r24, Y+5	; 0x05
     75c:	9e 81       	ldd	r25, Y+6	; 0x06
     75e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     762:	6b 83       	std	Y+3, r22	; 0x03
     764:	7c 83       	std	Y+4, r23	; 0x04
     766:	8d 83       	std	Y+5, r24	; 0x05
     768:	9e 83       	std	Y+6, r25	; 0x06
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	4a e7       	ldi	r20, 0x7A	; 122
     770:	54 e4       	ldi	r21, 0x44	; 68
     772:	67 2d       	mov	r22, r7
     774:	76 2d       	mov	r23, r6
     776:	85 2d       	mov	r24, r5
     778:	94 2d       	mov	r25, r4
     77a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	6b 81       	ldd	r22, Y+3	; 0x03
     784:	7c 81       	ldd	r23, Y+4	; 0x04
     786:	8d 81       	ldd	r24, Y+5	; 0x05
     788:	9e 81       	ldd	r25, Y+6	; 0x06
     78a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
     78e:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
     792:	6b 83       	std	Y+3, r22	; 0x03
     794:	7c 83       	std	Y+4, r23	; 0x04
     796:	8d 83       	std	Y+5, r24	; 0x05
     798:	9e 83       	std	Y+6, r25	; 0x06
			miliWattSecs += (batteryVoltage * batteryCurrent * 1000);
     79a:	6f 81       	ldd	r22, Y+7	; 0x07
     79c:	78 85       	ldd	r23, Y+8	; 0x08
     79e:	89 85       	ldd	r24, Y+9	; 0x09
     7a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     7a6:	6f 83       	std	Y+7, r22	; 0x07
     7a8:	78 87       	std	Y+8, r23	; 0x08
     7aa:	89 87       	std	Y+9, r24	; 0x09
     7ac:	9a 87       	std	Y+10, r25	; 0x0a
     7ae:	27 2d       	mov	r18, r7
     7b0:	36 2d       	mov	r19, r6
     7b2:	45 2d       	mov	r20, r5
     7b4:	54 2d       	mov	r21, r4
     7b6:	fc 85       	ldd	r31, Y+12	; 0x0c
     7b8:	ed 85       	ldd	r30, Y+13	; 0x0d
     7ba:	ae 85       	ldd	r26, Y+14	; 0x0e
     7bc:	bf 85       	ldd	r27, Y+15	; 0x0f
     7be:	6f 2f       	mov	r22, r31
     7c0:	7e 2f       	mov	r23, r30
     7c2:	8a 2f       	mov	r24, r26
     7c4:	9b 2f       	mov	r25, r27
     7c6:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	4a e7       	ldi	r20, 0x7A	; 122
     7d0:	54 e4       	ldi	r21, 0x44	; 68
     7d2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     7d6:	9b 01       	movw	r18, r22
     7d8:	ac 01       	movw	r20, r24
     7da:	6f 81       	ldd	r22, Y+7	; 0x07
     7dc:	78 85       	ldd	r23, Y+8	; 0x08
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e2:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
     7e6:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
     7ea:	6f 83       	std	Y+7, r22	; 0x07
     7ec:	78 87       	std	Y+8, r23	; 0x08
     7ee:	89 87       	std	Y+9, r24	; 0x09
     7f0:	9a 87       	std	Y+10, r25	; 0x0a

			lcd.lcd_clear();
     7f2:	8e e8       	ldi	r24, 0x8E	; 142
     7f4:	96 e0       	ldi	r25, 0x06	; 6
     7f6:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
			lcd.lcd_goto_xy_exact(0, 0);
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	8e e8       	ldi	r24, 0x8E	; 142
     800:	96 e0       	ldi	r25, 0x06	; 6
     802:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
			lcd.lcd_string_format("CHARGING:\nI: %4.2f/%4.2f AV:%5.2f/%5.2fVE: %5d mAh  %02d:%02d:%02d %3d C", batteryCurrent, maxCurrent, batteryVoltage, maxVoltage, (int)(miliAmpSecs / 3600), tHrs, tMin, tSec, batteryTemperature);
     806:	ef 92       	push	r14
     808:	df 92       	push	r13
     80a:	cf 92       	push	r12
     80c:	ff 92       	push	r15
     80e:	1f 92       	push	r1
     810:	b9 81       	ldd	r27, Y+1	; 0x01
     812:	bf 93       	push	r27
     814:	1f 92       	push	r1
     816:	ea 81       	ldd	r30, Y+2	; 0x02
     818:	ef 93       	push	r30
     81a:	1f 92       	push	r1
     81c:	fb 85       	ldd	r31, Y+11	; 0x0b
     81e:	ff 93       	push	r31
     820:	6b 81       	ldd	r22, Y+3	; 0x03
     822:	7c 81       	ldd	r23, Y+4	; 0x04
     824:	8d 81       	ldd	r24, Y+5	; 0x05
     826:	9e 81       	ldd	r25, Y+6	; 0x06
     828:	20 e1       	ldi	r18, 0x10	; 16
     82a:	3e e0       	ldi	r19, 0x0E	; 14
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
     834:	3f 93       	push	r19
     836:	2f 93       	push	r18
     838:	2b 89       	ldd	r18, Y+19	; 0x13
     83a:	2f 93       	push	r18
     83c:	3c 89       	ldd	r19, Y+20	; 0x14
     83e:	3f 93       	push	r19
     840:	1f 93       	push	r17
     842:	bf 92       	push	r11
     844:	8f 85       	ldd	r24, Y+15	; 0x0f
     846:	8f 93       	push	r24
     848:	9e 85       	ldd	r25, Y+14	; 0x0e
     84a:	9f 93       	push	r25
     84c:	ad 85       	ldd	r26, Y+13	; 0x0d
     84e:	af 93       	push	r26
     850:	bc 85       	ldd	r27, Y+12	; 0x0c
     852:	bf 93       	push	r27
     854:	2f 92       	push	r2
     856:	8f 92       	push	r8
     858:	9f 92       	push	r9
     85a:	af 92       	push	r10
     85c:	4f 92       	push	r4
     85e:	5f 92       	push	r5
     860:	6f 92       	push	r6
     862:	7f 92       	push	r7
     864:	a5 eb       	ldi	r26, 0xB5	; 181
     866:	b1 e0       	ldi	r27, 0x01	; 1
     868:	bf 93       	push	r27
     86a:	af 93       	push	r26
     86c:	8e e8       	ldi	r24, 0x8E	; 142
     86e:	96 e0       	ldi	r25, 0x06	; 6
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>

			#ifdef UART
				uart_sendStrFormatted("%5.2f;%4.2f;%02d:%02d:%02d;%03d;%3d;\n", batteryVoltage, batteryCurrent, tHrs, tMin, tSec, SUPPLY_PWM, batteryTemperature);
     878:	88 b5       	in	r24, 0x28	; 40
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	ef 92       	push	r14
     886:	df 92       	push	r13
     888:	cf 92       	push	r12
     88a:	ff 92       	push	r15
     88c:	1f 92       	push	r1
     88e:	8f 93       	push	r24
     890:	1f 92       	push	r1
     892:	39 81       	ldd	r19, Y+1	; 0x01
     894:	3f 93       	push	r19
     896:	1f 92       	push	r1
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	8f 93       	push	r24
     89c:	1f 92       	push	r1
     89e:	9b 85       	ldd	r25, Y+11	; 0x0b
     8a0:	9f 93       	push	r25
     8a2:	4f 92       	push	r4
     8a4:	5f 92       	push	r5
     8a6:	6f 92       	push	r6
     8a8:	7f 92       	push	r7
     8aa:	af 85       	ldd	r26, Y+15	; 0x0f
     8ac:	af 93       	push	r26
     8ae:	be 85       	ldd	r27, Y+14	; 0x0e
     8b0:	bf 93       	push	r27
     8b2:	ed 85       	ldd	r30, Y+13	; 0x0d
     8b4:	ef 93       	push	r30
     8b6:	fc 85       	ldd	r31, Y+12	; 0x0c
     8b8:	ff 93       	push	r31
     8ba:	ae ef       	ldi	r26, 0xFE	; 254
     8bc:	b1 e0       	ldi	r27, 0x01	; 1
     8be:	bf 93       	push	r27
     8c0:	af 93       	push	r26
     8c2:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z21uart_sendStrFormattedPcz>
			#endif 
			

			//Termination methods
			//********************************************
			if (constantCurrent)
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	33 20       	and	r3, r3
     8d2:	e9 f0       	breq	.+58     	; 0x90e <__stack+0xf>
			{
				lcd.lcd_str("CONST C");
     8d4:	64 e2       	ldi	r22, 0x24	; 36
     8d6:	72 e0       	ldi	r23, 0x02	; 2
     8d8:	8e e8       	ldi	r24, 0x8E	; 142
     8da:	96 e0       	ldi	r25, 0x06	; 6
     8dc:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
				if (batteryVoltage > maxVoltage)
     8e0:	7c 85       	ldd	r23, Y+12	; 0x0c
     8e2:	6d 85       	ldd	r22, Y+13	; 0x0d
     8e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e8:	27 2f       	mov	r18, r23
     8ea:	36 2f       	mov	r19, r22
     8ec:	49 2f       	mov	r20, r25
     8ee:	58 2f       	mov	r21, r24
     8f0:	fc 89       	ldd	r31, Y+20	; 0x14
     8f2:	eb 89       	ldd	r30, Y+19	; 0x13
     8f4:	6b 2d       	mov	r22, r11
     8f6:	71 2f       	mov	r23, r17
     8f8:	8f 2f       	mov	r24, r31
     8fa:	9e 2f       	mov	r25, r30
     8fc:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     900:	88 0f       	add	r24, r24
     902:	88 0b       	sbc	r24, r24
     904:	38 2e       	mov	r3, r24
     906:	30 22       	and	r3, r16
     908:	30 26       	eor	r3, r16
     90a:	70 2e       	mov	r7, r16
     90c:	2c c0       	rjmp	.+88     	; 0x966 <__stack+0x67>
					constantCurrent = false;
				}
			}
			else
			{
				lcd.lcd_str("CONST V");
     90e:	6c e2       	ldi	r22, 0x2C	; 44
     910:	72 e0       	ldi	r23, 0x02	; 2
     912:	8e e8       	ldi	r24, 0x8E	; 142
     914:	96 e0       	ldi	r25, 0x06	; 6
     916:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
				if (batteryCurrent < (maxCurrent * 0.1))
     91a:	2d ec       	ldi	r18, 0xCD	; 205
     91c:	3c ec       	ldi	r19, 0xCC	; 204
     91e:	4c ec       	ldi	r20, 0xCC	; 204
     920:	5d e3       	ldi	r21, 0x3D	; 61
     922:	6a 2d       	mov	r22, r10
     924:	79 2d       	mov	r23, r9
     926:	88 2d       	mov	r24, r8
     928:	92 2d       	mov	r25, r2
     92a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	67 2d       	mov	r22, r7
     934:	76 2d       	mov	r23, r6
     936:	85 2d       	mov	r24, r5
     938:	94 2d       	mov	r25, r4
     93a:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     93e:	88 23       	and	r24, r24
     940:	84 f0       	brlt	.+32     	; 0x962 <__stack+0x63>
				{
					charging = false;
					termination = REGULAR;
				}
				else if (batteryCurrent > maxCurrent)
     942:	27 2d       	mov	r18, r7
     944:	36 2d       	mov	r19, r6
     946:	45 2d       	mov	r20, r5
     948:	54 2d       	mov	r21, r4
     94a:	6a 2d       	mov	r22, r10
     94c:	79 2d       	mov	r23, r9
     94e:	88 2d       	mov	r24, r8
     950:	92 2d       	mov	r25, r2
     952:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     956:	88 0f       	add	r24, r24
     958:	88 0b       	sbc	r24, r24
     95a:	38 2e       	mov	r3, r24
     95c:	30 22       	and	r3, r16
     95e:	70 2e       	mov	r7, r16
     960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x67>
			{
				lcd.lcd_str("CONST V");
				if (batteryCurrent < (maxCurrent * 0.1))
				{
					charging = false;
					termination = REGULAR;
     962:	08 8b       	std	Y+16, r16	; 0x10
			else
			{
				lcd.lcd_str("CONST V");
				if (batteryCurrent < (maxCurrent * 0.1))
				{
					charging = false;
     964:	71 2c       	mov	r7, r1
				{
					constantCurrent = true;
				}
			}

			if (BTN_MIDDLE_PRESSED)
     966:	4c 9b       	sbis	0x09, 4	; 9
     968:	cf c0       	rjmp	.+414    	; 0xb08 <__stack+0x209>
			{
				charging = false;
				termination = USER;
			}

			if (batteryTemperature > MAX_TEMPERATURE)
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	44 e3       	ldi	r20, 0x34	; 52
     970:	52 e4       	ldi	r21, 0x42	; 66
     972:	6f 2d       	mov	r22, r15
     974:	7c 2d       	mov	r23, r12
     976:	8d 2d       	mov	r24, r13
     978:	9e 2d       	mov	r25, r14
     97a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	74 f0       	brlt	.+28     	; 0x99e <__stack+0x9f>
     982:	03 c0       	rjmp	.+6      	; 0x98a <__stack+0x8b>
			{
				charging = false;
				termination = OVERTEMPERATURE;
     984:	32 e0       	ldi	r19, 0x02	; 2
     986:	38 8b       	std	Y+16, r19	; 0x10
				termination = USER;
			}

			if (batteryTemperature > MAX_TEMPERATURE)
			{
				charging = false;
     988:	71 2c       	mov	r7, r1
	//charging routine
	PWM_SUPPLY_MODE;
	PWM_START;
	TIMER1_START;

	while (charging)
     98a:	71 10       	cpse	r7, r1
     98c:	70 ce       	rjmp	.-800    	; 0x66e <_Z16constantCVChargeff+0x128>
     98e:	7b 2c       	mov	r7, r11
     990:	bb 84       	ldd	r11, Y+11	; 0x0b
     992:	61 2e       	mov	r6, r17
     994:	19 81       	ldd	r17, Y+1	; 0x01
     996:	5c 88       	ldd	r5, Y+20	; 0x14
     998:	fa 80       	ldd	r15, Y+2	; 0x02
     99a:	4b 88       	ldd	r4, Y+19	; 0x13
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <__stack+0xb1>
     99e:	7b 2c       	mov	r7, r11
     9a0:	bb 84       	ldd	r11, Y+11	; 0x0b
     9a2:	61 2e       	mov	r6, r17
     9a4:	19 81       	ldd	r17, Y+1	; 0x01
     9a6:	5c 88       	ldd	r5, Y+20	; 0x14
     9a8:	fa 80       	ldd	r15, Y+2	; 0x02
     9aa:	4b 88       	ldd	r4, Y+19	; 0x13
			}

			if (batteryTemperature > MAX_TEMPERATURE)
			{
				charging = false;
				termination = OVERTEMPERATURE;
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	88 8b       	std	Y+16, r24	; 0x10
		}

	}

	//evaluate the charging proccess
	PWM_STOP;
     9b0:	85 b5       	in	r24, 0x25	; 37
     9b2:	85 bd       	out	0x25, r24	; 37
	PWM_RESET;
     9b4:	14 bc       	out	0x24, r1	; 36
	TIMER1_STOP;
     9b6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	YEL_LED_OFF;
     9ba:	28 98       	cbi	0x05, 0	; 5
	RED_LED_ON;
     9bc:	5f 9a       	sbi	0x0b, 7	; 11

	lcd.lcd_clear();
     9be:	8e e8       	ldi	r24, 0x8E	; 142
     9c0:	96 e0       	ldi	r25, 0x06	; 6
     9c2:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
	lcd.lcd_goto_xy_exact(0, 0);
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	8e e8       	ldi	r24, 0x8E	; 142
     9cc:	96 e0       	ldi	r25, 0x06	; 6
     9ce:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
	lcd.lcd_string_format("CHARGING\nFINISHED\nE: %5d mAh\nE: %5d mWh\nT: %02d:%02d:%02d   ", (int)(miliAmpSecs / 3600), (int)(miliWattSecs / 3600), tHrs, tMin, tSec);
     9d2:	1f 92       	push	r1
     9d4:	1f 93       	push	r17
     9d6:	1f 92       	push	r1
     9d8:	ff 92       	push	r15
     9da:	1f 92       	push	r1
     9dc:	bf 92       	push	r11
     9de:	0f 2e       	mov	r0, r31
     9e0:	f0 e1       	ldi	r31, 0x10	; 16
     9e2:	cf 2e       	mov	r12, r31
     9e4:	fe e0       	ldi	r31, 0x0E	; 14
     9e6:	df 2e       	mov	r13, r31
     9e8:	e1 2c       	mov	r14, r1
     9ea:	f1 2c       	mov	r15, r1
     9ec:	f0 2d       	mov	r31, r0
     9ee:	6f 81       	ldd	r22, Y+7	; 0x07
     9f0:	78 85       	ldd	r23, Y+8	; 0x08
     9f2:	89 85       	ldd	r24, Y+9	; 0x09
     9f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f6:	a7 01       	movw	r20, r14
     9f8:	96 01       	movw	r18, r12
     9fa:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
     9fe:	3f 93       	push	r19
     a00:	2f 93       	push	r18
     a02:	6b 81       	ldd	r22, Y+3	; 0x03
     a04:	7c 81       	ldd	r23, Y+4	; 0x04
     a06:	8d 81       	ldd	r24, Y+5	; 0x05
     a08:	9e 81       	ldd	r25, Y+6	; 0x06
     a0a:	a7 01       	movw	r20, r14
     a0c:	96 01       	movw	r18, r12
     a0e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
     a12:	3f 93       	push	r19
     a14:	2f 93       	push	r18
     a16:	84 e3       	ldi	r24, 0x34	; 52
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	8e e8       	ldi	r24, 0x8E	; 142
     a20:	96 e0       	ldi	r25, 0x06	; 6
     a22:	9f 93       	push	r25
     a24:	8f 93       	push	r24
     a26:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>
	switch (termination)
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	b8 89       	ldd	r27, Y+16	; 0x10
     a36:	b2 30       	cpi	r27, 0x02	; 2
     a38:	59 f0       	breq	.+22     	; 0xa50 <__stack+0x151>
     a3a:	b3 30       	cpi	r27, 0x03	; 3
     a3c:	81 f0       	breq	.+32     	; 0xa5e <__stack+0x15f>
     a3e:	b1 30       	cpi	r27, 0x01	; 1
     a40:	a1 f4       	brne	.+40     	; 0xa6a <__stack+0x16b>
	{
		case 1:
		lcd.lcd_str("CHRG SUCCESS");
     a42:	61 e7       	ldi	r22, 0x71	; 113
     a44:	72 e0       	ldi	r23, 0x02	; 2
     a46:	8e e8       	ldi	r24, 0x8E	; 142
     a48:	96 e0       	ldi	r25, 0x06	; 6
     a4a:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
		break;
     a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__stack+0x16b>
		case 2:
		lcd.lcd_str("BATT TOO WARM!");
     a50:	6e e7       	ldi	r22, 0x7E	; 126
     a52:	72 e0       	ldi	r23, 0x02	; 2
     a54:	8e e8       	ldi	r24, 0x8E	; 142
     a56:	96 e0       	ldi	r25, 0x06	; 6
     a58:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
		break;
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <__stack+0x16b>
		case 3:
		lcd.lcd_str("BTN PRESSED");
     a5e:	6d e8       	ldi	r22, 0x8D	; 141
     a60:	72 e0       	ldi	r23, 0x02	; 2
     a62:	8e e8       	ldi	r24, 0x8E	; 142
     a64:	96 e0       	ldi	r25, 0x06	; 6
     a66:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
		break;
	}

	while (BTN_MIDDLE_PRESSED);
     a6a:	4c 9b       	sbis	0x09, 4	; 9
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <__stack+0x16b>
	while (!BTN_MIDDLE_PRESSED);
     a6e:	4c 99       	sbic	0x09, 4	; 9
     a70:	fe cf       	rjmp	.-4      	; 0xa6e <__stack+0x16f>

	RED_LED_OFF;
     a72:	5f 98       	cbi	0x0b, 7	; 11
	

	#ifdef UART
		uart_sendStr("CHARGE ENDED\n");
     a74:	89 e9       	ldi	r24, 0x99	; 153
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
		uart_sendStrFormatted("Vmax: %5.2f V, Imax: %4.2f A\n", maxVoltage, maxCurrent);
     a7c:	2f 92       	push	r2
     a7e:	8f 92       	push	r8
     a80:	9f 92       	push	r9
     a82:	af 92       	push	r10
     a84:	4f 92       	push	r4
     a86:	5f 92       	push	r5
     a88:	6f 92       	push	r6
     a8a:	7f 92       	push	r7
     a8c:	87 ea       	ldi	r24, 0xA7	; 167
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z21uart_sendStrFormattedPcz>
	#endif

     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	49 c0       	rjmp	.+146    	; 0xb36 <__stack+0x237>
			batteryCurrent = measureChargingCurrent();
			if ((batteryCurrent < (maxCurrent * 0.95)) && (SUPPLY_PWM < 0xFF))
			{
				SUPPLY_PWM++;
			}
			else if ((batteryCurrent > (maxCurrent * 1.05) && (SUPPLY_PWM > 0x00)))
     aa4:	26 e6       	ldi	r18, 0x66	; 102
     aa6:	36 e6       	ldi	r19, 0x66	; 102
     aa8:	46 e8       	ldi	r20, 0x86	; 134
     aaa:	5f e3       	ldi	r21, 0x3F	; 63
     aac:	6a 2d       	mov	r22, r10
     aae:	79 2d       	mov	r23, r9
     ab0:	88 2d       	mov	r24, r8
     ab2:	92 2d       	mov	r25, r2
     ab4:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c3 01       	movw	r24, r6
     abe:	b2 01       	movw	r22, r4
     ac0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
     ac4:	18 16       	cp	r1, r24
     ac6:	0c f4       	brge	.+2      	; 0xaca <__stack+0x1cb>
     ac8:	f0 cd       	rjmp	.-1056   	; 0x6aa <_Z16constantCVChargeff+0x164>
     aca:	14 ce       	rjmp	.-984    	; 0x6f4 <_Z16constantCVChargeff+0x1ae>
		if (constantCurrent)	//if we are in the constant current mode
		{
			batteryCurrent = measureChargingCurrent();
			if ((batteryCurrent < (maxCurrent * 0.95)) && (SUPPLY_PWM < 0xFF))
			{
				SUPPLY_PWM++;
     acc:	88 b5       	in	r24, 0x28	; 40
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	88 bd       	out	0x28, r24	; 40
     ad2:	10 ce       	rjmp	.-992    	; 0x6f4 <_Z16constantCVChargeff+0x1ae>
			}
			else if ((batteryCurrent > (maxCurrent * 1.05) && (SUPPLY_PWM > 0x00)))
			{
				SUPPLY_PWM--;
     ad4:	88 b5       	in	r24, 0x28	; 40
     ad6:	81 50       	subi	r24, 0x01	; 1
     ad8:	88 bd       	out	0x28, r24	; 40
     ada:	0c ce       	rjmp	.-1000   	; 0x6f4 <_Z16constantCVChargeff+0x1ae>
		else          //if we are in constant voltage mode
		{
			batteryVoltage = measureBatteryVoltage();
			if ((batteryVoltage < (maxVoltage - 0.05)) && (SUPPLY_PWM < 0xFF))
			{
				SUPPLY_PWM++;
     adc:	88 b5       	in	r24, 0x28	; 40
     ade:	8f 5f       	subi	r24, 0xFF	; 255
     ae0:	88 bd       	out	0x28, r24	; 40
     ae2:	08 ce       	rjmp	.-1008   	; 0x6f4 <_Z16constantCVChargeff+0x1ae>
			}
			else if ((batteryVoltage > maxVoltage && (SUPPLY_PWM > 0x00)))
     ae4:	a3 01       	movw	r20, r6
     ae6:	92 01       	movw	r18, r4
     ae8:	fc 89       	ldd	r31, Y+20	; 0x14
     aea:	eb 89       	ldd	r30, Y+19	; 0x13
     aec:	6b 2d       	mov	r22, r11
     aee:	71 2f       	mov	r23, r17
     af0:	8f 2f       	mov	r24, r31
     af2:	9e 2f       	mov	r25, r30
     af4:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     af8:	88 23       	and	r24, r24
     afa:	0c f4       	brge	.+2      	; 0xafe <__stack+0x1ff>
     afc:	f8 cd       	rjmp	.-1040   	; 0x6ee <_Z16constantCVChargeff+0x1a8>
     afe:	fa cd       	rjmp	.-1036   	; 0x6f4 <_Z16constantCVChargeff+0x1ae>
			{
				SUPPLY_PWM--;
     b00:	88 b5       	in	r24, 0x28	; 40
     b02:	81 50       	subi	r24, 0x01	; 1
     b04:	88 bd       	out	0x28, r24	; 40
     b06:	f6 cd       	rjmp	.-1044   	; 0x6f4 <_Z16constantCVChargeff+0x1ae>
			{
				charging = false;
				termination = USER;
			}

			if (batteryTemperature > MAX_TEMPERATURE)
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	44 e3       	ldi	r20, 0x34	; 52
     b0e:	52 e4       	ldi	r21, 0x42	; 66
     b10:	6f 2d       	mov	r22, r15
     b12:	7c 2d       	mov	r23, r12
     b14:	8d 2d       	mov	r24, r13
     b16:	9e 2d       	mov	r25, r14
     b18:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
     b1c:	18 16       	cp	r1, r24
     b1e:	0c f4       	brge	.+2      	; 0xb22 <__stack+0x223>
     b20:	31 cf       	rjmp	.-414    	; 0x984 <__stack+0x85>
     b22:	7b 2c       	mov	r7, r11
     b24:	bb 84       	ldd	r11, Y+11	; 0x0b
     b26:	61 2e       	mov	r6, r17
     b28:	19 81       	ldd	r17, Y+1	; 0x01
     b2a:	5c 88       	ldd	r5, Y+20	; 0x14
     b2c:	fa 80       	ldd	r15, Y+2	; 0x02
     b2e:	4b 88       	ldd	r4, Y+19	; 0x13
			}

			if (BTN_MIDDLE_PRESSED)
			{
				charging = false;
				termination = USER;
     b30:	f3 e0       	ldi	r31, 0x03	; 3
     b32:	f8 8b       	std	Y+16, r31	; 0x10
     b34:	3d cf       	rjmp	.-390    	; 0x9b0 <__stack+0xb1>
	#ifdef UART
		uart_sendStr("CHARGE ENDED\n");
		uart_sendStrFormatted("Vmax: %5.2f V, Imax: %4.2f A\n", maxVoltage, maxCurrent);
	#endif

     b36:	64 96       	adiw	r28, 0x14	; 20
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	9f 90       	pop	r9
     b58:	8f 90       	pop	r8
     b5a:	7f 90       	pop	r7
     b5c:	6f 90       	pop	r6
     b5e:	5f 90       	pop	r5
     b60:	4f 90       	pop	r4
     b62:	3f 90       	pop	r3
     b64:	2f 90       	pop	r2
     b66:	08 95       	ret

00000b68 <_Z10chargeNiMHfhh>:
#include <inttypes.h>
extern LCD_5110 lcd;
extern volatile bool secondFlag;

void chargeNiMH(float maxCurrent, uint8_t numberOfCells, uint8_t maxHrs)
{
     b68:	2f 92       	push	r2
     b6a:	3f 92       	push	r3
     b6c:	4f 92       	push	r4
     b6e:	5f 92       	push	r5
     b70:	6f 92       	push	r6
     b72:	7f 92       	push	r7
     b74:	8f 92       	push	r8
     b76:	9f 92       	push	r9
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	a3 97       	sbiw	r28, 0x23	; 35
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	66 2e       	mov	r6, r22
     b9e:	57 2e       	mov	r5, r23
     ba0:	28 2e       	mov	r2, r24
     ba2:	39 2e       	mov	r3, r25
     ba4:	2b 8f       	std	Y+27, r18	; 0x1b
	float maxVoltage = numberOfCells * MAX_CELL_VOLTAGE;
     ba6:	64 2f       	mov	r22, r20
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__floatsisf>
     bb2:	6f 8b       	std	Y+23, r22	; 0x17
     bb4:	78 8f       	std	Y+24, r23	; 0x18
     bb6:	89 8f       	std	Y+25, r24	; 0x19
     bb8:	9a 8f       	std	Y+26, r25	; 0x1a
     bba:	2a e0       	ldi	r18, 0x0A	; 10
     bbc:	37 ed       	ldi	r19, 0xD7	; 215
     bbe:	43 ee       	ldi	r20, 0xE3	; 227
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     bc6:	46 2e       	mov	r4, r22
     bc8:	17 2f       	mov	r17, r23
     bca:	08 2f       	mov	r16, r24
     bcc:	b9 2e       	mov	r11, r25
     bce:	6b 8b       	std	Y+19, r22	; 0x13
     bd0:	7c 8b       	std	Y+20, r23	; 0x14
     bd2:	8d 8b       	std	Y+21, r24	; 0x15
     bd4:	9e 8b       	std	Y+22, r25	; 0x16

	//review all info on the LCD
	lcd.lcd_clear();
     bd6:	8e e8       	ldi	r24, 0x8E	; 142
     bd8:	96 e0       	ldi	r25, 0x06	; 6
     bda:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
	lcd.lcd_goto_xy_exact(0, 0);
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	8e e8       	ldi	r24, 0x8E	; 142
     be4:	96 e0       	ldi	r25, 0x06	; 6
     be6:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
	lcd.lcd_string_format("REVIEW:\nIchrg:  %4.2f AVmax:  %5.2f VPlugin batteryand press\nmiddle button", maxCurrent, maxVoltage);
     bea:	bf 92       	push	r11
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	4f 92       	push	r4
     bf2:	3f 92       	push	r3
     bf4:	2f 92       	push	r2
     bf6:	5f 92       	push	r5
     bf8:	6f 92       	push	r6
     bfa:	88 e1       	ldi	r24, 0x18	; 24
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	9f 93       	push	r25
     c00:	8f 93       	push	r24
     c02:	8e e8       	ldi	r24, 0x8E	; 142
     c04:	96 e0       	ldi	r25, 0x06	; 6
     c06:	9f 93       	push	r25
     c08:	8f 93       	push	r24
     c0a:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>
	
	#ifdef UART
		uart_sendStr("STARTING CC-CV CHARGE\n");
     c0e:	83 e6       	ldi	r24, 0x63	; 99
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
		uart_sendStrFormatted("Vmax: %5.2f V, Imax: %4.2f V\n", maxVoltage, maxCurrent);
     c16:	3f 92       	push	r3
     c18:	2f 92       	push	r2
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	bf 92       	push	r11
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	4f 92       	push	r4
     c26:	8a e7       	ldi	r24, 0x7A	; 122
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	9f 93       	push	r25
     c2c:	8f 93       	push	r24
     c2e:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z21uart_sendStrFormattedPcz>
		uart_sendStr("V;I;tHrs:tMin:tSec;PWM;temp\n");
     c32:	88 e9       	ldi	r24, 0x98	; 152
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
	#endif

	while (!BTN_MIDDLE_PRESSED);
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	4c 99       	sbic	0x09, 4	; 9
     c46:	fe cf       	rjmp	.-4      	; 0xc44 <_Z10chargeNiMHfhh+0xdc>
	while (BTN_MIDDLE_PRESSED);
     c48:	4c 9b       	sbis	0x09, 4	; 9
     c4a:	fe cf       	rjmp	.-4      	; 0xc48 <_Z10chargeNiMHfhh+0xe0>
	lcd.lcd_clear();
     c4c:	8e e8       	ldi	r24, 0x8E	; 142
     c4e:	96 e0       	ldi	r25, 0x06	; 6
     c50:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
	uint32_t miliAmpSecs = 0, miliWattSecs = 0;
	uint8_t tHrs = 0, tMin = 0, tSec = 0, minuteCounter = 0;
	float batteryCurrent, batteryVoltage, batteryTemperature, lastMinuteVoltage;
	uint8_t termination = RUNNING;

	lastMinuteVoltage = measureBatteryVoltage();
     c54:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
     c58:	6c 8f       	std	Y+28, r22	; 0x1c
     c5a:	7d 8f       	std	Y+29, r23	; 0x1d
     c5c:	8e 8f       	std	Y+30, r24	; 0x1e
     c5e:	9f 8f       	std	Y+31, r25	; 0x1f
	PWM_SUPPLY_MODE;
     c60:	83 e2       	ldi	r24, 0x23	; 35
     c62:	84 bd       	out	0x24, r24	; 36
	PWM_START;
     c64:	85 b5       	in	r24, 0x25	; 37
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	85 bd       	out	0x25, r24	; 37
	TIMER1_START;
     c6a:	8d e0       	ldi	r24, 0x0D	; 13
     c6c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while (BTN_MIDDLE_PRESSED);
	lcd.lcd_clear();

	//variables
	bool charging = true;
	uint32_t miliAmpSecs = 0, miliWattSecs = 0;
     c70:	1d 82       	std	Y+5, r1	; 0x05
     c72:	1e 82       	std	Y+6, r1	; 0x06
     c74:	1f 82       	std	Y+7, r1	; 0x07
     c76:	18 86       	std	Y+8, r1	; 0x08
     c78:	19 86       	std	Y+9, r1	; 0x09
     c7a:	1a 86       	std	Y+10, r1	; 0x0a
     c7c:	1b 86       	std	Y+11, r1	; 0x0b
     c7e:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t tHrs = 0, tMin = 0, tSec = 0, minuteCounter = 0;
     c80:	71 2c       	mov	r7, r1
     c82:	e1 2c       	mov	r14, r1
     c84:	f1 2c       	mov	r15, r1
     c86:	1d 86       	std	Y+13, r1	; 0x0d
	float batteryCurrent, batteryVoltage, batteryTemperature, lastMinuteVoltage;
	uint8_t termination = RUNNING;
     c88:	1a 8a       	std	Y+18, r1	; 0x12
			}
			
			if (batteryTemperature > MAX_TEMPERATURE)
			{
				charging = false;
				termination = OVERTEMPERATURE;
     c8a:	fa a2       	std	Y+34, r15	; 0x22
     c8c:	eb a2       	std	Y+35, r14	; 0x23
	TIMER1_START;

	while (charging)
	{
		//constant current regulation routine
		batteryCurrent = measureChargingCurrent();
     c8e:	0e 94 10 02 	call	0x420	; 0x420 <_Z22measureChargingCurrentv>
     c92:	6b 01       	movw	r12, r22
     c94:	7c 01       	movw	r14, r24
		if ((batteryCurrent < (maxCurrent * 0.95)) && (SUPPLY_PWM < 0xFF))
     c96:	23 e3       	ldi	r18, 0x33	; 51
     c98:	33 e3       	ldi	r19, 0x33	; 51
     c9a:	43 e7       	ldi	r20, 0x73	; 115
     c9c:	5f e3       	ldi	r21, 0x3F	; 63
     c9e:	66 2d       	mov	r22, r6
     ca0:	75 2d       	mov	r23, r5
     ca2:	82 2d       	mov	r24, r2
     ca4:	93 2d       	mov	r25, r3
     ca6:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     caa:	9b 01       	movw	r18, r22
     cac:	ac 01       	movw	r20, r24
     cae:	c7 01       	movw	r24, r14
     cb0:	b6 01       	movw	r22, r12
     cb2:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     cb6:	88 23       	and	r24, r24
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <_Z10chargeNiMHfhh+0x154>
     cba:	e9 c1       	rjmp	.+978    	; 0x108e <_Z10chargeNiMHfhh+0x526>
     cbc:	88 b5       	in	r24, 0x28	; 40
     cbe:	8f 3f       	cpi	r24, 0xFF	; 255
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <_Z10chargeNiMHfhh+0x15c>
     cc2:	e1 c1       	rjmp	.+962    	; 0x1086 <_Z10chargeNiMHfhh+0x51e>
     cc4:	e4 c1       	rjmp	.+968    	; 0x108e <_Z10chargeNiMHfhh+0x526>
		{
			SUPPLY_PWM++;
		}
		else if ((batteryCurrent > (maxCurrent * 1.05) && (SUPPLY_PWM > 0x00)))
     cc6:	88 b5       	in	r24, 0x28	; 40
     cc8:	81 11       	cpse	r24, r1
     cca:	f5 c1       	rjmp	.+1002   	; 0x10b6 <_Z10chargeNiMHfhh+0x54e>
		{
			SUPPLY_PWM--;
		}
		
		//do this every second
		if (secondFlag)
     ccc:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <secondFlag>
     cd0:	88 23       	and	r24, r24
     cd2:	e9 f2       	breq	.-70     	; 0xc8e <_Z10chargeNiMHfhh+0x126>
		{
			secondFlag = false;
     cd4:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <secondFlag>
			minuteCounter++;
     cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cda:	9f 5f       	subi	r25, 0xFF	; 255
     cdc:	9d 87       	std	Y+13, r25	; 0x0d
			YEL_LED_TOGGLE;
     cde:	85 b1       	in	r24, 0x05	; 5
     ce0:	a1 e0       	ldi	r26, 0x01	; 1
     ce2:	8a 27       	eor	r24, r26
     ce4:	85 b9       	out	0x05, r24	; 5

			//calculate time
			tSec++;
     ce6:	bb a1       	ldd	r27, Y+35	; 0x23
     ce8:	bf 5f       	subi	r27, 0xFF	; 255
     cea:	bb a3       	std	Y+35, r27	; 0x23
			if (tSec > 59)
     cec:	bc 33       	cpi	r27, 0x3C	; 60
     cee:	20 f0       	brcs	.+8      	; 0xcf8 <_Z10chargeNiMHfhh+0x190>
			{
				tSec = 0;
				tMin++;
     cf0:	ea a1       	ldd	r30, Y+34	; 0x22
     cf2:	ef 5f       	subi	r30, 0xFF	; 255
     cf4:	ea a3       	std	Y+34, r30	; 0x22

			//calculate time
			tSec++;
			if (tSec > 59)
			{
				tSec = 0;
     cf6:	1b a2       	std	Y+35, r1	; 0x23
				tMin++;
			}
			if (tMin > 59)
     cf8:	fa a1       	ldd	r31, Y+34	; 0x22
     cfa:	fc 33       	cpi	r31, 0x3C	; 60
     cfc:	10 f0       	brcs	.+4      	; 0xd02 <_Z10chargeNiMHfhh+0x19a>
			{
				tMin = 0;
				tHrs++;
     cfe:	73 94       	inc	r7
				tSec = 0;
				tMin++;
			}
			if (tMin > 59)
			{
				tMin = 0;
     d00:	1a a2       	std	Y+34, r1	; 0x22
				tHrs++;
			}

			//battery measurement routine
			batteryVoltage = measureBatteryVoltage();
     d02:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
     d06:	a6 2e       	mov	r10, r22
     d08:	97 2e       	mov	r9, r23
     d0a:	88 2e       	mov	r8, r24
     d0c:	f9 2e       	mov	r15, r25
			batteryCurrent = measureChargingCurrent();
     d0e:	0e 94 10 02 	call	0x420	; 0x420 <_Z22measureChargingCurrentv>
     d12:	e6 2e       	mov	r14, r22
     d14:	d7 2e       	mov	r13, r23
     d16:	c8 2e       	mov	r12, r24
     d18:	99 83       	std	Y+1, r25	; 0x01
			batteryTemperature = measureBatteryTemperature();
     d1a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_Z25measureBatteryTemperaturev>
     d1e:	bc 01       	movw	r22, r24
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     d28:	6e 87       	std	Y+14, r22	; 0x0e
     d2a:	7f 87       	std	Y+15, r23	; 0x0f
     d2c:	88 8b       	std	Y+16, r24	; 0x10
     d2e:	99 8b       	std	Y+17, r25	; 0x11
			miliAmpSecs += (batteryCurrent * 1000);
     d30:	6d 81       	ldd	r22, Y+5	; 0x05
     d32:	7e 81       	ldd	r23, Y+6	; 0x06
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	98 85       	ldd	r25, Y+8	; 0x08
     d38:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     d3c:	6d 83       	std	Y+5, r22	; 0x05
     d3e:	7e 83       	std	Y+6, r23	; 0x06
     d40:	8f 83       	std	Y+7, r24	; 0x07
     d42:	98 87       	std	Y+8, r25	; 0x08
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	4a e7       	ldi	r20, 0x7A	; 122
     d4a:	54 e4       	ldi	r21, 0x44	; 68
     d4c:	a9 81       	ldd	r26, Y+1	; 0x01
     d4e:	6e 2d       	mov	r22, r14
     d50:	7d 2d       	mov	r23, r13
     d52:	8c 2d       	mov	r24, r12
     d54:	9a 2f       	mov	r25, r26
     d56:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     d5a:	9b 01       	movw	r18, r22
     d5c:	ac 01       	movw	r20, r24
     d5e:	6d 81       	ldd	r22, Y+5	; 0x05
     d60:	7e 81       	ldd	r23, Y+6	; 0x06
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	98 85       	ldd	r25, Y+8	; 0x08
     d66:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
     d6a:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
     d6e:	6d 83       	std	Y+5, r22	; 0x05
     d70:	7e 83       	std	Y+6, r23	; 0x06
     d72:	8f 83       	std	Y+7, r24	; 0x07
     d74:	98 87       	std	Y+8, r25	; 0x08
			miliWattSecs += (batteryVoltage * batteryCurrent * 1000);
     d76:	69 85       	ldd	r22, Y+9	; 0x09
     d78:	7a 85       	ldd	r23, Y+10	; 0x0a
     d7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d7e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
     d82:	69 87       	std	Y+9, r22	; 0x09
     d84:	7a 87       	std	Y+10, r23	; 0x0a
     d86:	8b 87       	std	Y+11, r24	; 0x0b
     d88:	9c 87       	std	Y+12, r25	; 0x0c
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	2e 2d       	mov	r18, r14
     d8e:	3d 2d       	mov	r19, r13
     d90:	4c 2d       	mov	r20, r12
     d92:	58 2f       	mov	r21, r24
     d94:	6a 2d       	mov	r22, r10
     d96:	79 2d       	mov	r23, r9
     d98:	88 2d       	mov	r24, r8
     d9a:	9f 2d       	mov	r25, r15
     d9c:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	4a e7       	ldi	r20, 0x7A	; 122
     da6:	54 e4       	ldi	r21, 0x44	; 68
     da8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	69 85       	ldd	r22, Y+9	; 0x09
     db2:	7a 85       	ldd	r23, Y+10	; 0x0a
     db4:	8b 85       	ldd	r24, Y+11	; 0x0b
     db6:	9c 85       	ldd	r25, Y+12	; 0x0c
     db8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
     dbc:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
     dc0:	69 87       	std	Y+9, r22	; 0x09
     dc2:	7a 87       	std	Y+10, r23	; 0x0a
     dc4:	8b 87       	std	Y+11, r24	; 0x0b
     dc6:	9c 87       	std	Y+12, r25	; 0x0c

			lcd.lcd_goto_xy_exact(0, 0);
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	8e e8       	ldi	r24, 0x8E	; 142
     dce:	96 e0       	ldi	r25, 0x06	; 6
     dd0:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
			lcd.lcd_string_format("NiCd/NiMH CHRGI: %4.2f/%4.2f AV:%5.2f/%5.2fV%02d:%02d:%02d %3d C", batteryCurrent, maxCurrent, batteryVoltage, maxVoltage, tHrs, tMin, tSec, batteryTemperature);
     dd4:	89 89       	ldd	r24, Y+17	; 0x11
     dd6:	8f 93       	push	r24
     dd8:	98 89       	ldd	r25, Y+16	; 0x10
     dda:	9f 93       	push	r25
     ddc:	af 85       	ldd	r26, Y+15	; 0x0f
     dde:	af 93       	push	r26
     de0:	be 85       	ldd	r27, Y+14	; 0x0e
     de2:	bf 93       	push	r27
     de4:	1f 92       	push	r1
     de6:	eb a1       	ldd	r30, Y+35	; 0x23
     de8:	ef 93       	push	r30
     dea:	1f 92       	push	r1
     dec:	fa a1       	ldd	r31, Y+34	; 0x22
     dee:	ff 93       	push	r31
     df0:	1f 92       	push	r1
     df2:	7f 92       	push	r7
     df4:	8e 89       	ldd	r24, Y+22	; 0x16
     df6:	8f 93       	push	r24
     df8:	9d 89       	ldd	r25, Y+21	; 0x15
     dfa:	9f 93       	push	r25
     dfc:	ac 89       	ldd	r26, Y+20	; 0x14
     dfe:	af 93       	push	r26
     e00:	bb 89       	ldd	r27, Y+19	; 0x13
     e02:	bf 93       	push	r27
     e04:	ff 92       	push	r15
     e06:	8f 92       	push	r8
     e08:	9f 92       	push	r9
     e0a:	af 92       	push	r10
     e0c:	3f 92       	push	r3
     e0e:	2f 92       	push	r2
     e10:	5f 92       	push	r5
     e12:	6f 92       	push	r6
     e14:	e9 81       	ldd	r30, Y+1	; 0x01
     e16:	ef 93       	push	r30
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	a5 ec       	ldi	r26, 0xC5	; 197
     e20:	b2 e0       	ldi	r27, 0x02	; 2
     e22:	bf 93       	push	r27
     e24:	af 93       	push	r26
     e26:	8e e8       	ldi	r24, 0x8E	; 142
     e28:	96 e0       	ldi	r25, 0x06	; 6
     e2a:	9f 93       	push	r25
     e2c:	8f 93       	push	r24
     e2e:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>
			
			#ifdef UART
				uart_sendStrFormatted("%5.2f;%4.2f;%02d:%02d:%02d;%03d;%3d;\n", batteryVoltage, batteryCurrent, tHrs, tMin, tSec, SUPPLY_PWM, batteryTemperature);
     e32:	88 b5       	in	r24, 0x28	; 40
     e34:	f9 89       	ldd	r31, Y+17	; 0x11
     e36:	ff 93       	push	r31
     e38:	98 89       	ldd	r25, Y+16	; 0x10
     e3a:	9f 93       	push	r25
     e3c:	af 85       	ldd	r26, Y+15	; 0x0f
     e3e:	af 93       	push	r26
     e40:	be 85       	ldd	r27, Y+14	; 0x0e
     e42:	bf 93       	push	r27
     e44:	1f 92       	push	r1
     e46:	8f 93       	push	r24
     e48:	1f 92       	push	r1
     e4a:	eb a1       	ldd	r30, Y+35	; 0x23
     e4c:	ef 93       	push	r30
     e4e:	1f 92       	push	r1
     e50:	fa a1       	ldd	r31, Y+34	; 0x22
     e52:	ff 93       	push	r31
     e54:	1f 92       	push	r1
     e56:	7f 92       	push	r7
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	8f 93       	push	r24
     e5c:	cf 92       	push	r12
     e5e:	df 92       	push	r13
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	ae ef       	ldi	r26, 0xFE	; 254
     e6c:	b1 e0       	ldi	r27, 0x01	; 1
     e6e:	bf 93       	push	r27
     e70:	af 93       	push	r26
     e72:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z21uart_sendStrFormattedPcz>
			#endif

			//Termination methods (overvoltage, user aborting operation, -dV/dT method, time, overheating)
			//***********************************************
			if (batteryVoltage > maxVoltage)
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	2a 2d       	mov	r18, r10
     e82:	39 2d       	mov	r19, r9
     e84:	48 2d       	mov	r20, r8
     e86:	5f 2d       	mov	r21, r15
     e88:	bb 89       	ldd	r27, Y+19	; 0x13
     e8a:	ac 89       	ldd	r26, Y+20	; 0x14
     e8c:	ed 88       	ldd	r14, Y+21	; 0x15
     e8e:	de 88       	ldd	r13, Y+22	; 0x16
     e90:	6b 2f       	mov	r22, r27
     e92:	7a 2f       	mov	r23, r26
     e94:	8e 2d       	mov	r24, r14
     e96:	9d 2d       	mov	r25, r13
     e98:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
     e9c:	88 23       	and	r24, r24
     e9e:	24 f4       	brge	.+8      	; 0xea8 <_Z10chargeNiMHfhh+0x340>
			{
				charging = false;
				termination = OVERVOLTAGE;
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	9a 8b       	std	Y+18, r25	; 0x12

			//Termination methods (overvoltage, user aborting operation, -dV/dT method, time, overheating)
			//***********************************************
			if (batteryVoltage > maxVoltage)
			{
				charging = false;
     ea4:	e1 2c       	mov	r14, r1
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <_Z10chargeNiMHfhh+0x344>
     ea8:	ee 24       	eor	r14, r14
     eaa:	e3 94       	inc	r14
				termination = OVERVOLTAGE;
			}

			if (BTN_MIDDLE_PRESSED)
     eac:	4c 99       	sbic	0x09, 4	; 9
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <_Z10chargeNiMHfhh+0x34e>
			{
				charging = false;
				termination = USER;
     eb0:	a3 e0       	ldi	r26, 0x03	; 3
     eb2:	aa 8b       	std	Y+18, r26	; 0x12
				termination = OVERVOLTAGE;
			}

			if (BTN_MIDDLE_PRESSED)
			{
				charging = false;
     eb4:	e1 2c       	mov	r14, r1
				termination = USER;
			}

			if (minuteCounter > 59)
     eb6:	bd 85       	ldd	r27, Y+13	; 0x0d
     eb8:	bc 33       	cpi	r27, 0x3C	; 60
     eba:	a0 f1       	brcs	.+104    	; 0xf24 <_Z10chargeNiMHfhh+0x3bc>
			{
				minuteCounter = 0;
				if ((lastMinuteVoltage - batteryVoltage) > (NEG_dV * numberOfCells))
     ebc:	2a 2d       	mov	r18, r10
     ebe:	39 2d       	mov	r19, r9
     ec0:	48 2d       	mov	r20, r8
     ec2:	5f 2d       	mov	r21, r15
     ec4:	bc 8d       	ldd	r27, Y+28	; 0x1c
     ec6:	ad 8d       	ldd	r26, Y+29	; 0x1d
     ec8:	de 8c       	ldd	r13, Y+30	; 0x1e
     eca:	cf 8c       	ldd	r12, Y+31	; 0x1f
     ecc:	6b 2f       	mov	r22, r27
     ece:	7a 2f       	mov	r23, r26
     ed0:	8d 2d       	mov	r24, r13
     ed2:	9c 2d       	mov	r25, r12
     ed4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
     ed8:	69 83       	std	Y+1, r22	; 0x01
     eda:	7a 83       	std	Y+2, r23	; 0x02
     edc:	8b 83       	std	Y+3, r24	; 0x03
     ede:	9c 83       	std	Y+4, r25	; 0x04
     ee0:	2d ec       	ldi	r18, 0xCD	; 205
     ee2:	3c ec       	ldi	r19, 0xCC	; 204
     ee4:	4c e4       	ldi	r20, 0x4C	; 76
     ee6:	5e e3       	ldi	r21, 0x3E	; 62
     ee8:	6f 89       	ldd	r22, Y+23	; 0x17
     eea:	78 8d       	ldd	r23, Y+24	; 0x18
     eec:	89 8d       	ldd	r24, Y+25	; 0x19
     eee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ef0:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
     ef4:	9b 01       	movw	r18, r22
     ef6:	ac 01       	movw	r20, r24
     ef8:	69 81       	ldd	r22, Y+1	; 0x01
     efa:	7a 81       	ldd	r23, Y+2	; 0x02
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
     f04:	18 16       	cp	r1, r24
     f06:	4c f4       	brge	.+18     	; 0xf1a <_Z10chargeNiMHfhh+0x3b2>
				{
					charging = false;
					termination = deltaV;
				}
				lastMinuteVoltage = batteryVoltage;
     f08:	ac 8e       	std	Y+28, r10	; 0x1c
     f0a:	9d 8e       	std	Y+29, r9	; 0x1d
     f0c:	8e 8e       	std	Y+30, r8	; 0x1e
     f0e:	ff 8e       	std	Y+31, r15	; 0x1f
			{
				minuteCounter = 0;
				if ((lastMinuteVoltage - batteryVoltage) > (NEG_dV * numberOfCells))
				{
					charging = false;
					termination = deltaV;
     f10:	e4 e0       	ldi	r30, 0x04	; 4
     f12:	ea 8b       	std	Y+18, r30	; 0x12
				termination = USER;
			}

			if (minuteCounter > 59)
			{
				minuteCounter = 0;
     f14:	1d 86       	std	Y+13, r1	; 0x0d
				if ((lastMinuteVoltage - batteryVoltage) > (NEG_dV * numberOfCells))
				{
					charging = false;
     f16:	e1 2c       	mov	r14, r1
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <_Z10chargeNiMHfhh+0x3bc>
					termination = deltaV;
				}
				lastMinuteVoltage = batteryVoltage;
     f1a:	ac 8e       	std	Y+28, r10	; 0x1c
     f1c:	9d 8e       	std	Y+29, r9	; 0x1d
     f1e:	8e 8e       	std	Y+30, r8	; 0x1e
     f20:	ff 8e       	std	Y+31, r15	; 0x1f
				termination = USER;
			}

			if (minuteCounter > 59)
			{
				minuteCounter = 0;
     f22:	1d 86       	std	Y+13, r1	; 0x0d
					termination = deltaV;
				}
				lastMinuteVoltage = batteryVoltage;
			}

			if (tHrs >= maxHrs)
     f24:	fb 8d       	ldd	r31, Y+27	; 0x1b
     f26:	7f 16       	cp	r7, r31
     f28:	08 f0       	brcs	.+2      	; 0xf2c <_Z10chargeNiMHfhh+0x3c4>
     f2a:	c9 c0       	rjmp	.+402    	; 0x10be <_Z10chargeNiMHfhh+0x556>
			{
				charging = false;
				termination = TIME;
			}
			
			if (batteryTemperature > MAX_TEMPERATURE)
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	44 e3       	ldi	r20, 0x34	; 52
     f32:	52 e4       	ldi	r21, 0x42	; 66
     f34:	be 85       	ldd	r27, Y+14	; 0x0e
     f36:	af 85       	ldd	r26, Y+15	; 0x0f
     f38:	f8 88       	ldd	r15, Y+16	; 0x10
     f3a:	d9 88       	ldd	r13, Y+17	; 0x11
     f3c:	6b 2f       	mov	r22, r27
     f3e:	7a 2f       	mov	r23, r26
     f40:	8f 2d       	mov	r24, r15
     f42:	9d 2d       	mov	r25, r13
     f44:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
     f48:	18 16       	cp	r1, r24
     f4a:	4c f0       	brlt	.+18     	; 0xf5e <_Z10chargeNiMHfhh+0x3f6>
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <_Z10chargeNiMHfhh+0x3ec>
			{
				charging = false;
				termination = OVERTEMPERATURE;
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	8a 8b       	std	Y+18, r24	; 0x12
				termination = TIME;
			}
			
			if (batteryTemperature > MAX_TEMPERATURE)
			{
				charging = false;
     f52:	e1 2c       	mov	r14, r1
	lastMinuteVoltage = measureBatteryVoltage();
	PWM_SUPPLY_MODE;
	PWM_START;
	TIMER1_START;

	while (charging)
     f54:	e1 10       	cpse	r14, r1
     f56:	9b ce       	rjmp	.-714    	; 0xc8e <_Z10chargeNiMHfhh+0x126>
     f58:	fa a0       	ldd	r15, Y+34	; 0x22
     f5a:	eb a0       	ldd	r14, Y+35	; 0x23
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <_Z10chargeNiMHfhh+0x3fe>
     f5e:	fa a0       	ldd	r15, Y+34	; 0x22
     f60:	eb a0       	ldd	r14, Y+35	; 0x23
			}
			
			if (batteryTemperature > MAX_TEMPERATURE)
			{
				charging = false;
				termination = OVERTEMPERATURE;
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	9a 8b       	std	Y+18, r25	; 0x12
		}

	}

	//evaluate the charging process
	PWM_STOP;
     f66:	85 b5       	in	r24, 0x25	; 37
     f68:	85 bd       	out	0x25, r24	; 37
	PWM_RESET;
     f6a:	14 bc       	out	0x24, r1	; 36
	TIMER1_STOP;
     f6c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	YEL_LED_OFF;
     f70:	28 98       	cbi	0x05, 0	; 5
	RED_LED_ON;
     f72:	5f 9a       	sbi	0x0b, 7	; 11

	lcd.lcd_clear();
     f74:	8e e8       	ldi	r24, 0x8E	; 142
     f76:	96 e0       	ldi	r25, 0x06	; 6
     f78:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
	lcd.lcd_goto_xy_exact(0, 0);
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	8e e8       	ldi	r24, 0x8E	; 142
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
	lcd.lcd_string_format("CHARGING\nFINISHED\nE: %5d mAh\nE: %5d mWh\nT: %02d:%02d:%02d", (int)(miliAmpSecs / 3600), (int)(miliWattSecs / 3600), tHrs, tMin, tSec);
     f88:	1f 92       	push	r1
     f8a:	ef 92       	push	r14
     f8c:	1f 92       	push	r1
     f8e:	ff 92       	push	r15
     f90:	1f 92       	push	r1
     f92:	7f 92       	push	r7
     f94:	0f 2e       	mov	r0, r31
     f96:	f0 e1       	ldi	r31, 0x10	; 16
     f98:	cf 2e       	mov	r12, r31
     f9a:	fe e0       	ldi	r31, 0x0E	; 14
     f9c:	df 2e       	mov	r13, r31
     f9e:	e1 2c       	mov	r14, r1
     fa0:	f1 2c       	mov	r15, r1
     fa2:	f0 2d       	mov	r31, r0
     fa4:	69 85       	ldd	r22, Y+9	; 0x09
     fa6:	7a 85       	ldd	r23, Y+10	; 0x0a
     fa8:	8b 85       	ldd	r24, Y+11	; 0x0b
     faa:	9c 85       	ldd	r25, Y+12	; 0x0c
     fac:	a7 01       	movw	r20, r14
     fae:	96 01       	movw	r18, r12
     fb0:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
     fb4:	3f 93       	push	r19
     fb6:	2f 93       	push	r18
     fb8:	6d 81       	ldd	r22, Y+5	; 0x05
     fba:	7e 81       	ldd	r23, Y+6	; 0x06
     fbc:	8f 81       	ldd	r24, Y+7	; 0x07
     fbe:	98 85       	ldd	r25, Y+8	; 0x08
     fc0:	a7 01       	movw	r20, r14
     fc2:	96 01       	movw	r18, r12
     fc4:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
     fc8:	3f 93       	push	r19
     fca:	2f 93       	push	r18
     fcc:	86 e0       	ldi	r24, 0x06	; 6
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	9f 93       	push	r25
     fd2:	8f 93       	push	r24
     fd4:	8e e8       	ldi	r24, 0x8E	; 142
     fd6:	96 e0       	ldi	r25, 0x06	; 6
     fd8:	9f 93       	push	r25
     fda:	8f 93       	push	r24
     fdc:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>
		
	switch (termination)
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	ba 89       	ldd	r27, Y+18	; 0x12
     fec:	b3 30       	cpi	r27, 0x03	; 3
     fee:	d1 f0       	breq	.+52     	; 0x1024 <_Z10chargeNiMHfhh+0x4bc>
     ff0:	28 f4       	brcc	.+10     	; 0xffc <_Z10chargeNiMHfhh+0x494>
     ff2:	b1 30       	cpi	r27, 0x01	; 1
     ff4:	49 f0       	breq	.+18     	; 0x1008 <_Z10chargeNiMHfhh+0x4a0>
     ff6:	b2 30       	cpi	r27, 0x02	; 2
     ff8:	71 f0       	breq	.+28     	; 0x1016 <_Z10chargeNiMHfhh+0x4ae>
     ffa:	28 c0       	rjmp	.+80     	; 0x104c <_Z10chargeNiMHfhh+0x4e4>
     ffc:	ea 89       	ldd	r30, Y+18	; 0x12
     ffe:	e4 30       	cpi	r30, 0x04	; 4
    1000:	c1 f0       	breq	.+48     	; 0x1032 <_Z10chargeNiMHfhh+0x4ca>
    1002:	e5 30       	cpi	r30, 0x05	; 5
    1004:	e9 f0       	breq	.+58     	; 0x1040 <_Z10chargeNiMHfhh+0x4d8>
    1006:	22 c0       	rjmp	.+68     	; 0x104c <_Z10chargeNiMHfhh+0x4e4>
	{
		case 1:
			lcd.lcd_str("OVERVOLTAGE");
    1008:	60 e4       	ldi	r22, 0x40	; 64
    100a:	73 e0       	ldi	r23, 0x03	; 3
    100c:	8e e8       	ldi	r24, 0x8E	; 142
    100e:	96 e0       	ldi	r25, 0x06	; 6
    1010:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
			break;
    1014:	1b c0       	rjmp	.+54     	; 0x104c <_Z10chargeNiMHfhh+0x4e4>
		case 2:
			lcd.lcd_str("BATT TOO WARM!");
    1016:	6e e7       	ldi	r22, 0x7E	; 126
    1018:	72 e0       	ldi	r23, 0x02	; 2
    101a:	8e e8       	ldi	r24, 0x8E	; 142
    101c:	96 e0       	ldi	r25, 0x06	; 6
    101e:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
			break;
    1022:	14 c0       	rjmp	.+40     	; 0x104c <_Z10chargeNiMHfhh+0x4e4>
		case 3:
			lcd.lcd_str("BTN PRESSED");
    1024:	6d e8       	ldi	r22, 0x8D	; 141
    1026:	72 e0       	ldi	r23, 0x02	; 2
    1028:	8e e8       	ldi	r24, 0x8E	; 142
    102a:	96 e0       	ldi	r25, 0x06	; 6
    102c:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
			break;
    1030:	0d c0       	rjmp	.+26     	; 0x104c <_Z10chargeNiMHfhh+0x4e4>
		case 4:
			lcd.lcd_str("-DELTA V");
    1032:	6c e4       	ldi	r22, 0x4C	; 76
    1034:	73 e0       	ldi	r23, 0x03	; 3
    1036:	8e e8       	ldi	r24, 0x8E	; 142
    1038:	96 e0       	ldi	r25, 0x06	; 6
    103a:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
			break;
    103e:	06 c0       	rjmp	.+12     	; 0x104c <_Z10chargeNiMHfhh+0x4e4>
		case 5:
			lcd.lcd_str("TIME OUT");
    1040:	65 e5       	ldi	r22, 0x55	; 85
    1042:	73 e0       	ldi	r23, 0x03	; 3
    1044:	8e e8       	ldi	r24, 0x8E	; 142
    1046:	96 e0       	ldi	r25, 0x06	; 6
    1048:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
			break;
	}

	while (!BTN_MIDDLE_PRESSED);
    104c:	4c 99       	sbic	0x09, 4	; 9
    104e:	fe cf       	rjmp	.-4      	; 0x104c <_Z10chargeNiMHfhh+0x4e4>
	while (BTN_MIDDLE_PRESSED);
    1050:	4c 9b       	sbis	0x09, 4	; 9
    1052:	fe cf       	rjmp	.-4      	; 0x1050 <_Z10chargeNiMHfhh+0x4e8>

	RED_LED_OFF;
    1054:	5f 98       	cbi	0x0b, 7	; 11
	

	#ifdef UART
		uart_sendStr("CHARGE ENDED\n");
    1056:	89 e9       	ldi	r24, 0x99	; 153
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
		uart_sendStrFormatted("Vmax: %5.2f V, Imax: %4.2f V\n", maxVoltage, maxCurrent);
    105e:	3f 92       	push	r3
    1060:	2f 92       	push	r2
    1062:	5f 92       	push	r5
    1064:	6f 92       	push	r6
    1066:	bf 92       	push	r11
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	4f 92       	push	r4
    106e:	8a e7       	ldi	r24, 0x7A	; 122
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	9f 93       	push	r25
    1074:	8f 93       	push	r24
    1076:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z21uart_sendStrFormattedPcz>
	#endif


}
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	32 c0       	rjmp	.+100    	; 0x10ea <_Z10chargeNiMHfhh+0x582>
	{
		//constant current regulation routine
		batteryCurrent = measureChargingCurrent();
		if ((batteryCurrent < (maxCurrent * 0.95)) && (SUPPLY_PWM < 0xFF))
		{
			SUPPLY_PWM++;
    1086:	88 b5       	in	r24, 0x28	; 40
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	88 bd       	out	0x28, r24	; 40
    108c:	1f ce       	rjmp	.-962    	; 0xccc <_Z10chargeNiMHfhh+0x164>
		}
		else if ((batteryCurrent > (maxCurrent * 1.05) && (SUPPLY_PWM > 0x00)))
    108e:	26 e6       	ldi	r18, 0x66	; 102
    1090:	36 e6       	ldi	r19, 0x66	; 102
    1092:	46 e8       	ldi	r20, 0x86	; 134
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	66 2d       	mov	r22, r6
    1098:	75 2d       	mov	r23, r5
    109a:	82 2d       	mov	r24, r2
    109c:	93 2d       	mov	r25, r3
    109e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    10ae:	18 16       	cp	r1, r24
    10b0:	0c f4       	brge	.+2      	; 0x10b4 <_Z10chargeNiMHfhh+0x54c>
    10b2:	09 ce       	rjmp	.-1006   	; 0xcc6 <_Z10chargeNiMHfhh+0x15e>
    10b4:	0b ce       	rjmp	.-1002   	; 0xccc <_Z10chargeNiMHfhh+0x164>
		{
			SUPPLY_PWM--;
    10b6:	88 b5       	in	r24, 0x28	; 40
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	88 bd       	out	0x28, r24	; 40
    10bc:	07 ce       	rjmp	.-1010   	; 0xccc <_Z10chargeNiMHfhh+0x164>
			{
				charging = false;
				termination = TIME;
			}
			
			if (batteryTemperature > MAX_TEMPERATURE)
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	44 e3       	ldi	r20, 0x34	; 52
    10c4:	52 e4       	ldi	r21, 0x42	; 66
    10c6:	be 85       	ldd	r27, Y+14	; 0x0e
    10c8:	af 85       	ldd	r26, Y+15	; 0x0f
    10ca:	f8 88       	ldd	r15, Y+16	; 0x10
    10cc:	e9 88       	ldd	r14, Y+17	; 0x11
    10ce:	6b 2f       	mov	r22, r27
    10d0:	7a 2f       	mov	r23, r26
    10d2:	8f 2d       	mov	r24, r15
    10d4:	9e 2d       	mov	r25, r14
    10d6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    10da:	18 16       	cp	r1, r24
    10dc:	0c f4       	brge	.+2      	; 0x10e0 <_Z10chargeNiMHfhh+0x578>
    10de:	37 cf       	rjmp	.-402    	; 0xf4e <_Z10chargeNiMHfhh+0x3e6>
    10e0:	fa a0       	ldd	r15, Y+34	; 0x22
    10e2:	eb a0       	ldd	r14, Y+35	; 0x23
			}

			if (tHrs >= maxHrs)
			{
				charging = false;
				termination = TIME;
    10e4:	95 e0       	ldi	r25, 0x05	; 5
    10e6:	9a 8b       	std	Y+18, r25	; 0x12
    10e8:	3e cf       	rjmp	.-388    	; 0xf66 <_Z10chargeNiMHfhh+0x3fe>
		uart_sendStr("CHARGE ENDED\n");
		uart_sendStrFormatted("Vmax: %5.2f V, Imax: %4.2f V\n", maxVoltage, maxCurrent);
	#endif


}
    10ea:	a3 96       	adiw	r28, 0x23	; 35
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	7f 90       	pop	r7
    1110:	6f 90       	pop	r6
    1112:	5f 90       	pop	r5
    1114:	4f 90       	pop	r4
    1116:	3f 90       	pop	r3
    1118:	2f 90       	pop	r2
    111a:	08 95       	ret

0000111c <_ZN8LCD_511011lcd_goto_xyEhh>:
}

// Clears an entire text block. (rows of 8 pixels on the lcd) 
void LCD_5110::lcd_clear_line(unsigned char line)
{
    lcd_clear_area(line, 0, LCD_WIDTH);
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	9b 01       	movw	r18, r22
    1120:	22 0f       	add	r18, r18
    1122:	33 1f       	adc	r19, r19
    1124:	62 0f       	add	r22, r18
    1126:	73 1f       	adc	r23, r19
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	24 e5       	ldi	r18, 0x54	; 84
    112e:	42 9f       	mul	r20, r18
    1130:	60 0d       	add	r22, r0
    1132:	71 1d       	adc	r23, r1
    1134:	11 24       	eor	r1, r1
    1136:	fc 01       	movw	r30, r24
    1138:	70 8b       	std	Z+16, r23	; 0x10
    113a:	67 87       	std	Z+15, r22	; 0x0f
    113c:	08 95       	ret

0000113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>:
    113e:	24 e5       	ldi	r18, 0x54	; 84
    1140:	42 9f       	mul	r20, r18
    1142:	a0 01       	movw	r20, r0
    1144:	11 24       	eor	r1, r1
    1146:	46 0f       	add	r20, r22
    1148:	51 1d       	adc	r21, r1
    114a:	fc 01       	movw	r30, r24
    114c:	50 8b       	std	Z+16, r21	; 0x10
    114e:	47 87       	std	Z+15, r20	; 0x0f
    1150:	08 95       	ret

00001152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>:
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	fc 01       	movw	r30, r24
    115c:	a3 85       	ldd	r26, Z+11	; 0x0b
    115e:	b4 85       	ldd	r27, Z+12	; 0x0c
    1160:	5e 91       	ld	r21, -X
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 01       	movw	r18, r24
    1168:	03 80       	ldd	r0, Z+3	; 0x03
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x1e>
    116c:	22 0f       	add	r18, r18
    116e:	33 1f       	adc	r19, r19
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x1a>
    1174:	25 2b       	or	r18, r21
    1176:	2c 93       	st	X, r18
    1178:	a1 85       	ldd	r26, Z+9	; 0x09
    117a:	b2 85       	ldd	r27, Z+10	; 0x0a
    117c:	5e 91       	ld	r21, -X
    117e:	9c 01       	movw	r18, r24
    1180:	02 80       	ldd	r0, Z+2	; 0x02
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x36>
    1184:	22 0f       	add	r18, r18
    1186:	33 1f       	adc	r19, r19
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x32>
    118c:	25 2b       	or	r18, r21
    118e:	2c 93       	st	X, r18
    1190:	a5 81       	ldd	r26, Z+5	; 0x05
    1192:	b6 81       	ldd	r27, Z+6	; 0x06
    1194:	2c 91       	ld	r18, X
    1196:	00 80       	ld	r0, Z
    1198:	02 c0       	rjmp	.+4      	; 0x119e <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x4c>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x48>
    11a2:	80 95       	com	r24
    11a4:	82 23       	and	r24, r18
    11a6:	8c 93       	st	X, r24
    11a8:	32 81       	ldd	r19, Z+2	; 0x02
    11aa:	a1 85       	ldd	r26, Z+9	; 0x09
    11ac:	b2 85       	ldd	r27, Z+10	; 0x0a
    11ae:	41 30       	cpi	r20, 0x01	; 1
    11b0:	59 f4       	brne	.+22     	; 0x11c8 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x76>
    11b2:	2c 91       	ld	r18, X
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x6c>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	3a 95       	dec	r19
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x68>
    11c2:	82 2b       	or	r24, r18
    11c4:	8c 93       	st	X, r24
    11c6:	8c c0       	rjmp	.+280    	; 0x12e0 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x18e>
    11c8:	2c 91       	ld	r18, X
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x82>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	3a 95       	dec	r19
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x7e>
    11d8:	80 95       	com	r24
    11da:	82 23       	and	r24, r18
    11dc:	8c 93       	st	X, r24
    11de:	80 c0       	rjmp	.+256    	; 0x12e0 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x18e>
    11e0:	23 81       	ldd	r18, Z+3	; 0x03
    11e2:	c3 85       	ldd	r28, Z+11	; 0x0b
    11e4:	d4 85       	ldd	r29, Z+12	; 0x0c
    11e6:	ab 01       	movw	r20, r22
    11e8:	08 2e       	mov	r0, r24
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x9e>
    11ec:	55 95       	asr	r21
    11ee:	47 95       	ror	r20
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x9a>
    11f4:	40 ff       	sbrs	r20, 0
    11f6:	0b c0       	rjmp	.+22     	; 0x120e <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xbc>
    11f8:	48 81       	ld	r20, Y
    11fa:	8d 01       	movw	r16, r26
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xb0>
    11fe:	00 0f       	add	r16, r16
    1200:	11 1f       	adc	r17, r17
    1202:	2a 95       	dec	r18
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xac>
    1206:	98 01       	movw	r18, r16
    1208:	24 2b       	or	r18, r20
    120a:	28 83       	st	Y, r18
    120c:	0b c0       	rjmp	.+22     	; 0x1224 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xd2>
    120e:	38 81       	ld	r19, Y
    1210:	ad 01       	movw	r20, r26
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xc6>
    1214:	44 0f       	add	r20, r20
    1216:	55 1f       	adc	r21, r21
    1218:	2a 95       	dec	r18
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xc2>
    121c:	24 2f       	mov	r18, r20
    121e:	20 95       	com	r18
    1220:	23 23       	and	r18, r19
    1222:	28 83       	st	Y, r18
    1224:	c5 85       	ldd	r28, Z+13	; 0x0d
    1226:	d6 85       	ldd	r29, Z+14	; 0x0e
    1228:	48 81       	ld	r20, Y
    122a:	9d 01       	movw	r18, r26
    122c:	04 80       	ldd	r0, Z+4	; 0x04
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xe2>
    1230:	22 0f       	add	r18, r18
    1232:	33 1f       	adc	r19, r19
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xde>
    1238:	24 2b       	or	r18, r20
    123a:	28 83       	st	Y, r18
    123c:	c5 85       	ldd	r28, Z+13	; 0x0d
    123e:	d6 85       	ldd	r29, Z+14	; 0x0e
    1240:	38 81       	ld	r19, Y
    1242:	ad 01       	movw	r20, r26
    1244:	04 80       	ldd	r0, Z+4	; 0x04
    1246:	02 c0       	rjmp	.+4      	; 0x124c <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xfa>
    1248:	44 0f       	add	r20, r20
    124a:	55 1f       	adc	r21, r21
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0xf6>
    1250:	24 2f       	mov	r18, r20
    1252:	20 95       	com	r18
    1254:	23 23       	and	r18, r19
    1256:	28 83       	st	Y, r18
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	10 f6       	brcc	.-124    	; 0x11e0 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x8e>
    125c:	a5 81       	ldd	r26, Z+5	; 0x05
    125e:	b6 81       	ldd	r27, Z+6	; 0x06
    1260:	4c 91       	ld	r20, X
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9c 01       	movw	r18, r24
    1268:	00 80       	ld	r0, Z
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x11e>
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x11a>
    1274:	24 2b       	or	r18, r20
    1276:	2c 93       	st	X, r18
    1278:	a3 85       	ldd	r26, Z+11	; 0x0b
    127a:	b4 85       	ldd	r27, Z+12	; 0x0c
    127c:	3e 91       	ld	r19, -X
    127e:	ac 01       	movw	r20, r24
    1280:	03 80       	ldd	r0, Z+3	; 0x03
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x136>
    1284:	44 0f       	add	r20, r20
    1286:	55 1f       	adc	r21, r21
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x132>
    128c:	24 2f       	mov	r18, r20
    128e:	20 95       	com	r18
    1290:	23 23       	and	r18, r19
    1292:	2c 93       	st	X, r18
    1294:	a1 85       	ldd	r26, Z+9	; 0x09
    1296:	b2 85       	ldd	r27, Z+10	; 0x0a
    1298:	3e 91       	ld	r19, -X
    129a:	ac 01       	movw	r20, r24
    129c:	02 80       	ldd	r0, Z+2	; 0x02
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x152>
    12a0:	44 0f       	add	r20, r20
    12a2:	55 1f       	adc	r21, r21
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x14e>
    12a8:	24 2f       	mov	r18, r20
    12aa:	20 95       	com	r18
    12ac:	23 23       	and	r18, r19
    12ae:	2c 93       	st	X, r18
    12b0:	a3 85       	ldd	r26, Z+11	; 0x0b
    12b2:	b4 85       	ldd	r27, Z+12	; 0x0c
    12b4:	4c 91       	ld	r20, X
    12b6:	9c 01       	movw	r18, r24
    12b8:	03 80       	ldd	r0, Z+3	; 0x03
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x16e>
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x16a>
    12c4:	24 2b       	or	r18, r20
    12c6:	2c 93       	st	X, r18
    12c8:	a1 85       	ldd	r26, Z+9	; 0x09
    12ca:	b2 85       	ldd	r27, Z+10	; 0x0a
    12cc:	2c 91       	ld	r18, X
    12ce:	02 80       	ldd	r0, Z+2	; 0x02
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x184>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x180>
    12da:	82 2b       	or	r24, r18
    12dc:	8c 93       	st	X, r24
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x19a>
    12e0:	87 e0       	ldi	r24, 0x07	; 7
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	a1 e0       	ldi	r26, 0x01	; 1
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	7a cf       	rjmp	.-268    	; 0x11e0 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE+0x8e>
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <_ZN8LCD_511013lcd_base_addrEj>:
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	ec 01       	movw	r28, r24
    1300:	ab 01       	movw	r20, r22
    1302:	8b 01       	movw	r16, r22
    1304:	16 95       	lsr	r17
    1306:	07 95       	ror	r16
    1308:	16 95       	lsr	r17
    130a:	07 95       	ror	r16
    130c:	98 01       	movw	r18, r16
    130e:	a7 e8       	ldi	r26, 0x87	; 135
    1310:	b1 e6       	ldi	r27, 0x61	; 97
    1312:	0e 94 c2 19 	call	0x3384	; 0x3384 <__umulhisi3>
    1316:	96 95       	lsr	r25
    1318:	87 95       	ror	r24
    131a:	96 95       	lsr	r25
    131c:	87 95       	ror	r24
    131e:	96 95       	lsr	r25
    1320:	87 95       	ror	r24
    1322:	64 e5       	ldi	r22, 0x54	; 84
    1324:	68 9f       	mul	r22, r24
    1326:	90 01       	movw	r18, r0
    1328:	69 9f       	mul	r22, r25
    132a:	30 0d       	add	r19, r0
    132c:	11 24       	eor	r1, r1
    132e:	42 1b       	sub	r20, r18
    1330:	53 0b       	sbc	r21, r19
    1332:	64 2f       	mov	r22, r20
    1334:	60 68       	ori	r22, 0x80	; 128
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	ce 01       	movw	r24, r28
    133a:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    133e:	98 01       	movw	r18, r16
    1340:	a7 e8       	ldi	r26, 0x87	; 135
    1342:	b1 e6       	ldi	r27, 0x61	; 97
    1344:	0e 94 c2 19 	call	0x3384	; 0x3384 <__umulhisi3>
    1348:	96 95       	lsr	r25
    134a:	87 95       	ror	r24
    134c:	96 95       	lsr	r25
    134e:	87 95       	ror	r24
    1350:	96 95       	lsr	r25
    1352:	87 95       	ror	r24
    1354:	68 2f       	mov	r22, r24
    1356:	60 64       	ori	r22, 0x40	; 64
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	ce 01       	movw	r24, r28
    135c:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	08 95       	ret

0000136a <_ZN8LCD_51109lcd_clearEv>:
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	8c 01       	movw	r16, r24
    1374:	fc 01       	movw	r30, r24
    1376:	10 8a       	std	Z+16, r1	; 0x10
    1378:	17 86       	std	Z+15, r1	; 0x0f
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <_ZN8LCD_511013lcd_base_addrEj>
    1382:	c8 ef       	ldi	r28, 0xF8	; 248
    1384:	d1 e0       	ldi	r29, 0x01	; 1
    1386:	41 e0       	ldi	r20, 0x01	; 1
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	c8 01       	movw	r24, r16
    138c:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    1390:	21 97       	sbiw	r28, 0x01	; 1
    1392:	c9 f7       	brne	.-14     	; 0x1386 <_ZN8LCD_51109lcd_clearEv+0x1c>
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

0000139e <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h>:
    139e:	6f 92       	push	r6
    13a0:	7f 92       	push	r7
    13a2:	8f 92       	push	r8
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	3c 01       	movw	r6, r24
    13ba:	dc 01       	movw	r26, r24
    13bc:	16 96       	adiw	r26, 0x06	; 6
    13be:	7c 93       	st	X, r23
    13c0:	6e 93       	st	-X, r22
    13c2:	15 97       	sbiw	r26, 0x05	; 5
    13c4:	4c 93       	st	X, r20
    13c6:	18 96       	adiw	r26, 0x08	; 8
    13c8:	3c 93       	st	X, r19
    13ca:	2e 93       	st	-X, r18
    13cc:	17 97       	sbiw	r26, 0x07	; 7
    13ce:	11 96       	adiw	r26, 0x01	; 1
    13d0:	0c 93       	st	X, r16
    13d2:	11 97       	sbiw	r26, 0x01	; 1
    13d4:	1a 96       	adiw	r26, 0x0a	; 10
    13d6:	fc 92       	st	X, r15
    13d8:	ee 92       	st	-X, r14
    13da:	19 97       	sbiw	r26, 0x09	; 9
    13dc:	12 96       	adiw	r26, 0x02	; 2
    13de:	cc 92       	st	X, r12
    13e0:	12 97       	sbiw	r26, 0x02	; 2
    13e2:	1c 96       	adiw	r26, 0x0c	; 12
    13e4:	bc 92       	st	X, r11
    13e6:	ae 92       	st	-X, r10
    13e8:	1b 97       	sbiw	r26, 0x0b	; 11
    13ea:	13 96       	adiw	r26, 0x03	; 3
    13ec:	8c 92       	st	X, r8
    13ee:	13 97       	sbiw	r26, 0x03	; 3
    13f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    13f4:	1e 96       	adiw	r26, 0x0e	; 14
    13f6:	9c 93       	st	X, r25
    13f8:	8e 93       	st	-X, r24
    13fa:	1d 97       	sbiw	r26, 0x0d	; 13
    13fc:	88 89       	ldd	r24, Y+16	; 0x10
    13fe:	14 96       	adiw	r26, 0x04	; 4
    1400:	8c 93       	st	X, r24
    1402:	14 97       	sbiw	r26, 0x04	; 4
    1404:	f9 01       	movw	r30, r18
    1406:	60 81       	ld	r22, Z
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	ac 01       	movw	r20, r24
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x76>
    1410:	44 0f       	add	r20, r20
    1412:	55 1f       	adc	r21, r21
    1414:	0a 95       	dec	r16
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x72>
    1418:	46 2b       	or	r20, r22
    141a:	40 83       	st	Z, r20
    141c:	17 96       	adiw	r26, 0x07	; 7
    141e:	ed 91       	ld	r30, X+
    1420:	fc 91       	ld	r31, X
    1422:	18 97       	sbiw	r26, 0x08	; 8
    1424:	42 91       	ld	r20, -Z
    1426:	9c 01       	movw	r18, r24
    1428:	11 96       	adiw	r26, 0x01	; 1
    142a:	0c 90       	ld	r0, X
    142c:	11 97       	sbiw	r26, 0x01	; 1
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x96>
    1430:	22 0f       	add	r18, r18
    1432:	33 1f       	adc	r19, r19
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x92>
    1438:	24 2b       	or	r18, r20
    143a:	20 83       	st	Z, r18
    143c:	15 96       	adiw	r26, 0x05	; 5
    143e:	ed 91       	ld	r30, X+
    1440:	fc 91       	ld	r31, X
    1442:	16 97       	sbiw	r26, 0x06	; 6
    1444:	42 91       	ld	r20, -Z
    1446:	9c 01       	movw	r18, r24
    1448:	0c 90       	ld	r0, X
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0xb2>
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0xae>
    1454:	24 2b       	or	r18, r20
    1456:	20 83       	st	Z, r18
    1458:	19 96       	adiw	r26, 0x09	; 9
    145a:	ed 91       	ld	r30, X+
    145c:	fc 91       	ld	r31, X
    145e:	1a 97       	sbiw	r26, 0x0a	; 10
    1460:	42 91       	ld	r20, -Z
    1462:	9c 01       	movw	r18, r24
    1464:	12 96       	adiw	r26, 0x02	; 2
    1466:	0c 90       	ld	r0, X
    1468:	12 97       	sbiw	r26, 0x02	; 2
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0xd2>
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0xce>
    1474:	24 2b       	or	r18, r20
    1476:	20 83       	st	Z, r18
    1478:	1b 96       	adiw	r26, 0x0b	; 11
    147a:	ed 91       	ld	r30, X+
    147c:	fc 91       	ld	r31, X
    147e:	1c 97       	sbiw	r26, 0x0c	; 12
    1480:	42 91       	ld	r20, -Z
    1482:	9c 01       	movw	r18, r24
    1484:	13 96       	adiw	r26, 0x03	; 3
    1486:	0c 90       	ld	r0, X
    1488:	13 97       	sbiw	r26, 0x03	; 3
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0xf2>
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0xee>
    1494:	24 2b       	or	r18, r20
    1496:	20 83       	st	Z, r18
    1498:	1d 96       	adiw	r26, 0x0d	; 13
    149a:	ed 91       	ld	r30, X+
    149c:	fc 91       	ld	r31, X
    149e:	1e 97       	sbiw	r26, 0x0e	; 14
    14a0:	42 91       	ld	r20, -Z
    14a2:	9c 01       	movw	r18, r24
    14a4:	14 96       	adiw	r26, 0x04	; 4
    14a6:	0c 90       	ld	r0, X
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x110>
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x10c>
    14b2:	24 2b       	or	r18, r20
    14b4:	20 83       	st	Z, r18
    14b6:	a5 ea       	ldi	r26, 0xA5	; 165
    14b8:	be e0       	ldi	r27, 0x0E	; 14
    14ba:	11 97       	sbiw	r26, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x11c>
    14be:	00 c0       	rjmp	.+0      	; 0x14c0 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x122>
    14c0:	00 00       	nop
    14c2:	d3 01       	movw	r26, r6
    14c4:	17 96       	adiw	r26, 0x07	; 7
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	18 97       	sbiw	r26, 0x08	; 8
    14cc:	30 81       	ld	r19, Z
    14ce:	ac 01       	movw	r20, r24
    14d0:	11 96       	adiw	r26, 0x01	; 1
    14d2:	0c 90       	ld	r0, X
    14d4:	11 97       	sbiw	r26, 0x01	; 1
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x13e>
    14d8:	44 0f       	add	r20, r20
    14da:	55 1f       	adc	r21, r21
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x13a>
    14e0:	24 2f       	mov	r18, r20
    14e2:	20 95       	com	r18
    14e4:	23 23       	and	r18, r19
    14e6:	20 83       	st	Z, r18
    14e8:	ef e7       	ldi	r30, 0x7F	; 127
    14ea:	fe e3       	ldi	r31, 0x3E	; 62
    14ec:	31 97       	sbiw	r30, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x14e>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x154>
    14f2:	00 00       	nop
    14f4:	17 96       	adiw	r26, 0x07	; 7
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	18 97       	sbiw	r26, 0x08	; 8
    14fc:	40 81       	ld	r20, Z
    14fe:	9c 01       	movw	r18, r24
    1500:	11 96       	adiw	r26, 0x01	; 1
    1502:	0c 90       	ld	r0, X
    1504:	11 97       	sbiw	r26, 0x01	; 1
    1506:	02 c0       	rjmp	.+4      	; 0x150c <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x16e>
    1508:	22 0f       	add	r18, r18
    150a:	33 1f       	adc	r19, r19
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x16a>
    1510:	24 2b       	or	r18, r20
    1512:	20 83       	st	Z, r18
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	ed 91       	ld	r30, X+
    1518:	fc 91       	ld	r31, X
    151a:	16 97       	sbiw	r26, 0x06	; 6
    151c:	20 81       	ld	r18, Z
    151e:	0c 90       	ld	r0, X
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x188>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h+0x184>
    152a:	80 95       	com	r24
    152c:	82 23       	and	r24, r18
    152e:	80 83       	st	Z, r24
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	61 e2       	ldi	r22, 0x21	; 33
    1534:	c3 01       	movw	r24, r6
    1536:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	68 ec       	ldi	r22, 0xC8	; 200
    153e:	c3 01       	movw	r24, r6
    1540:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	66 e0       	ldi	r22, 0x06	; 6
    1548:	c3 01       	movw	r24, r6
    154a:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	63 e1       	ldi	r22, 0x13	; 19
    1552:	c3 01       	movw	r24, r6
    1554:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	60 e2       	ldi	r22, 0x20	; 32
    155c:	c3 01       	movw	r24, r6
    155e:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	6c e0       	ldi	r22, 0x0C	; 12
    1566:	c3 01       	movw	r24, r6
    1568:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    156c:	c3 01       	movw	r24, r6
    156e:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	61 e2       	ldi	r22, 0x21	; 33
    1576:	c3 01       	movw	r24, r6
    1578:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	60 ec       	ldi	r22, 0xC0	; 192
    1580:	c3 01       	movw	r24, r6
    1582:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	60 e2       	ldi	r22, 0x20	; 32
    158a:	c3 01       	movw	r24, r6
    158c:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	cf 90       	pop	r12
    159c:	bf 90       	pop	r11
    159e:	af 90       	pop	r10
    15a0:	8f 90       	pop	r8
    15a2:	7f 90       	pop	r7
    15a4:	6f 90       	pop	r6
    15a6:	08 95       	ret

000015a8 <_ZN8LCD_51107lcd_chrEc>:
    lcdCacheIdx = x + y * LCD_WIDTH;
}

// Displays a character at current cursor location or moves to new line if enter char is given
void LCD_5110::lcd_chr(char chr)
{
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	fc 01       	movw	r30, r24
	if (chr == '\n') {
    15b6:	6a 30       	cpi	r22, 0x0A	; 10
    15b8:	71 f4       	brne	.+28     	; 0x15d6 <_ZN8LCD_51107lcd_chrEc+0x2e>
		// move to next line and first column
		lcdCacheIdx = lcdCacheIdx + LCD_WIDTH - lcdCacheIdx % LCD_WIDTH; //next line and x=0
    15ba:	87 85       	ldd	r24, Z+15	; 0x0f
    15bc:	90 89       	ldd	r25, Z+16	; 0x10
    15be:	9c 01       	movw	r18, r24
    15c0:	2c 5a       	subi	r18, 0xAC	; 172
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	64 e5       	ldi	r22, 0x54	; 84
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divmodhi4>
    15cc:	28 1b       	sub	r18, r24
    15ce:	39 0b       	sbc	r19, r25
    15d0:	30 8b       	std	Z+16, r19	; 0x10
    15d2:	27 87       	std	Z+15, r18	; 0x0f
    15d4:	31 c0       	rjmp	.+98     	; 0x1638 <_ZN8LCD_51107lcd_chrEc+0x90>
    15d6:	c6 2f       	mov	r28, r22
    15d8:	8c 01       	movw	r16, r24
	} else {
		lcd_base_addr(lcdCacheIdx);
    15da:	67 85       	ldd	r22, Z+15	; 0x0f
    15dc:	70 89       	ldd	r23, Z+16	; 0x10
    15de:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <_ZN8LCD_511013lcd_base_addrEj>
    15e2:	6c 2f       	mov	r22, r28
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	eb 01       	movw	r28, r22
    15e8:	cc 0f       	add	r28, r28
    15ea:	dd 1f       	adc	r29, r29
    15ec:	cc 0f       	add	r28, r28
    15ee:	dd 1f       	adc	r29, r29
    15f0:	6c 0f       	add	r22, r28
    15f2:	7d 1f       	adc	r23, r29
    15f4:	e1 2c       	mov	r14, r1
    15f6:	f1 2c       	mov	r15, r1
    15f8:	eb 01       	movw	r28, r22
    15fa:	c0 5a       	subi	r28, 0xA0	; 160
    15fc:	d1 09       	sbc	r29, r1
    15fe:	fe 01       	movw	r30, r28
    1600:	ee 0d       	add	r30, r14
    1602:	ff 1d       	adc	r31, r15
    1604:	e6 59       	subi	r30, 0x96	; 150
    1606:	fe 4f       	sbci	r31, 0xFE	; 254
	
		// 5 pixel wide characters and add space
		for(unsigned char i=0; i < CHAR_WIDTH - 1; i++) 
			lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
    1608:	64 91       	lpm	r22, Z
    160a:	66 0f       	add	r22, r22
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	c8 01       	movw	r24, r16
    1610:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	e8 1a       	sub	r14, r24
    1618:	f8 0a       	sbc	r15, r24
		lcdCacheIdx = lcdCacheIdx + LCD_WIDTH - lcdCacheIdx % LCD_WIDTH; //next line and x=0
	} else {
		lcd_base_addr(lcdCacheIdx);
	
		// 5 pixel wide characters and add space
		for(unsigned char i=0; i < CHAR_WIDTH - 1; i++) 
    161a:	e5 e0       	ldi	r30, 0x05	; 5
    161c:	ee 16       	cp	r14, r30
    161e:	f1 04       	cpc	r15, r1
    1620:	71 f7       	brne	.-36     	; 0x15fe <_ZN8LCD_51107lcd_chrEc+0x56>
			lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
		
		lcd_send(0, LCD_DATA); // right empty separator line of 8 vertical pixels
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	c8 01       	movw	r24, r16
    1628:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN8LCD_51108lcd_sendEhNS_10LcdCmdDataE>
	
		lcdCacheIdx += CHAR_WIDTH;
    162c:	f8 01       	movw	r30, r16
    162e:	87 85       	ldd	r24, Z+15	; 0x0f
    1630:	90 89       	ldd	r25, Z+16	; 0x10
    1632:	06 96       	adiw	r24, 0x06	; 6
    1634:	90 8b       	std	Z+16, r25	; 0x10
    1636:	87 87       	std	Z+15, r24	; 0x0f
	}		
}
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	08 95       	ret

00001646 <_ZN8LCD_51107lcd_strEPc>:

// Displays null terminated string at current cursor location and increment cursor location 
void LCD_5110::lcd_str(char *str)
{
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	eb 01       	movw	r28, r22
    while(*str)  lcd_chr(*str++);
    1650:	68 81       	ld	r22, Y
    1652:	66 23       	and	r22, r22
    1654:	41 f0       	breq	.+16     	; 0x1666 <_ZN8LCD_51107lcd_strEPc+0x20>
    1656:	8c 01       	movw	r16, r24
    1658:	21 96       	adiw	r28, 0x01	; 1
    165a:	c8 01       	movw	r24, r16
    165c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN8LCD_51107lcd_chrEc>
    1660:	69 91       	ld	r22, Y+
    1662:	61 11       	cpse	r22, r1
    1664:	fa cf       	rjmp	.-12     	; 0x165a <_ZN8LCD_51107lcd_strEPc+0x14>
}
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <_ZN8LCD_511017lcd_string_formatEPcz>:

// displays a formated string, similar to printf
void LCD_5110::lcd_string_format(char *szFormat, ...)
{
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	c0 56       	subi	r28, 0x60	; 96
    167a:	d1 09       	sbc	r29, r1
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
	char szBuffer[96]; //in this buffer we form the message
	int NUMCHARS = sizeof(szBuffer) / sizeof(szBuffer[0]);
	va_list pArgs;
	va_start(pArgs, szFormat);
	vsnprintf(szBuffer, NUMCHARS - 1, szFormat, pArgs);
    1686:	9e 01       	movw	r18, r28
    1688:	27 59       	subi	r18, 0x97	; 151
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	a9 96       	adiw	r28, 0x29	; 41
    168e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1690:	5f ad       	ldd	r21, Y+63	; 0x3f
    1692:	a9 97       	sbiw	r28, 0x29	; 41
    1694:	6f e5       	ldi	r22, 0x5F	; 95
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	ce 01       	movw	r24, r28
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	0e 94 42 1b 	call	0x3684	; 0x3684 <vsnprintf>
	va_end(pArgs);
	
	lcd_str(szBuffer);
    16a0:	be 01       	movw	r22, r28
    16a2:	6f 5f       	subi	r22, 0xFF	; 255
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	a7 96       	adiw	r28, 0x27	; 39
    16a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ac:	a7 97       	sbiw	r28, 0x27	; 39
    16ae:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
}
    16b2:	c0 5a       	subi	r28, 0xA0	; 160
    16b4:	df 4f       	sbci	r29, 0xFF	; 255
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <_Z7lcdInitv>:
LCD_5110 lcd;
#include "menu.h"


 void lcdInit(void)
 {
    16c6:	8f 92       	push	r8
    16c8:	af 92       	push	r10
    16ca:	bf 92       	push	r11
    16cc:	cf 92       	push	r12
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
	 lcd.lcd_init(&PORTD, PD0, &PORTD, PD1, &PORTB, PB3, &PORTB, PB4, &PORTB, PB5);
    16d4:	85 e0       	ldi	r24, 0x05	; 5
    16d6:	8f 93       	push	r24
    16d8:	1f 92       	push	r1
    16da:	85 e2       	ldi	r24, 0x25	; 37
    16dc:	8f 93       	push	r24
    16de:	68 94       	set
    16e0:	88 24       	eor	r8, r8
    16e2:	82 f8       	bld	r8, 2
    16e4:	0f 2e       	mov	r0, r31
    16e6:	f5 e2       	ldi	r31, 0x25	; 37
    16e8:	af 2e       	mov	r10, r31
    16ea:	b1 2c       	mov	r11, r1
    16ec:	f0 2d       	mov	r31, r0
    16ee:	0f 2e       	mov	r0, r31
    16f0:	f3 e0       	ldi	r31, 0x03	; 3
    16f2:	cf 2e       	mov	r12, r31
    16f4:	f0 2d       	mov	r31, r0
    16f6:	0f 2e       	mov	r0, r31
    16f8:	f5 e2       	ldi	r31, 0x25	; 37
    16fa:	ef 2e       	mov	r14, r31
    16fc:	f1 2c       	mov	r15, r1
    16fe:	f0 2d       	mov	r31, r0
    1700:	01 e0       	ldi	r16, 0x01	; 1
    1702:	2b e2       	ldi	r18, 0x2B	; 43
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	6b e2       	ldi	r22, 0x2B	; 43
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	8e e8       	ldi	r24, 0x8E	; 142
    170e:	96 e0       	ldi	r25, 0x06	; 6
    1710:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN8LCD_51108lcd_initEPVhhS1_hS1_hS1_hS1_h>
	 
	 lcd.lcd_goto_xy_exact(0, 0);
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	8e e8       	ldi	r24, 0x8E	; 142
    171a:	96 e0       	ldi	r25, 0x06	; 6
    171c:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
	 lcd.lcd_string_format(" AVR Charger   by M. Danek  V1.10  (c)2016   madanek\n   post.cz");
    1720:	8e e5       	ldi	r24, 0x5E	; 94
    1722:	93 e0       	ldi	r25, 0x03	; 3
    1724:	9f 93       	push	r25
    1726:	8f 93       	push	r24
    1728:	8e e8       	ldi	r24, 0x8E	; 142
    172a:	96 e0       	ldi	r25, 0x06	; 6
    172c:	9f 93       	push	r25
    172e:	8f 93       	push	r24
    1730:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1734:	2f ef       	ldi	r18, 0xFF	; 255
    1736:	8a e1       	ldi	r24, 0x1A	; 26
    1738:	97 eb       	ldi	r25, 0xB7	; 183
    173a:	21 50       	subi	r18, 0x01	; 1
    173c:	80 40       	sbci	r24, 0x00	; 0
    173e:	90 40       	sbci	r25, 0x00	; 0
    1740:	e1 f7       	brne	.-8      	; 0x173a <_Z7lcdInitv+0x74>
    1742:	00 c0       	rjmp	.+0      	; 0x1744 <_Z7lcdInitv+0x7e>
    1744:	00 00       	nop
    1746:	8d b7       	in	r24, 0x3d	; 61
    1748:	9e b7       	in	r25, 0x3e	; 62
    174a:	07 96       	adiw	r24, 0x07	; 7
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	9e bf       	out	0x3e, r25	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	8d bf       	out	0x3d, r24	; 61
	 _delay_ms(3000);
 }
    1756:	0f 91       	pop	r16
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	cf 90       	pop	r12
    175e:	bf 90       	pop	r11
    1760:	af 90       	pop	r10
    1762:	8f 90       	pop	r8
    1764:	08 95       	ret

00001766 <_Z19updateSelectionMenuhPcPS_>:

 void updateSelectionMenu(uint8_t pos, char* name, char* items[5])
 {
    1766:	ff 92       	push	r15
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	d8 2f       	mov	r29, r24
    1772:	8b 01       	movw	r16, r22
    1774:	f4 2e       	mov	r15, r20
    1776:	c5 2f       	mov	r28, r21
	 lcd.lcd_clear();
    1778:	8e e8       	ldi	r24, 0x8E	; 142
    177a:	96 e0       	ldi	r25, 0x06	; 6
    177c:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>

	 lcd.lcd_goto_xy(0, 0);
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	8e e8       	ldi	r24, 0x8E	; 142
    1786:	96 e0       	ldi	r25, 0x06	; 6
    1788:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
	 lcd.lcd_str(name);
    178c:	b8 01       	movw	r22, r16
    178e:	8e e8       	ldi	r24, 0x8E	; 142
    1790:	96 e0       	ldi	r25, 0x06	; 6
    1792:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
    1796:	0f 2d       	mov	r16, r15
    1798:	1c 2f       	mov	r17, r28

	 for (uint8_t i = 0; i < 5; i ++)
    179a:	c0 e0       	ldi	r28, 0x00	; 0
	 {
		lcd.lcd_goto_xy(1, (i + 1));
    179c:	cf 5f       	subi	r28, 0xFF	; 255
    179e:	4c 2f       	mov	r20, r28
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	8e e8       	ldi	r24, 0x8E	; 142
    17a4:	96 e0       	ldi	r25, 0x06	; 6
    17a6:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
		lcd.lcd_str(items[i]);
    17aa:	f8 01       	movw	r30, r16
    17ac:	61 91       	ld	r22, Z+
    17ae:	71 91       	ld	r23, Z+
    17b0:	8f 01       	movw	r16, r30
    17b2:	8e e8       	ldi	r24, 0x8E	; 142
    17b4:	96 e0       	ldi	r25, 0x06	; 6
    17b6:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
	 lcd.lcd_clear();

	 lcd.lcd_goto_xy(0, 0);
	 lcd.lcd_str(name);

	 for (uint8_t i = 0; i < 5; i ++)
    17ba:	c5 30       	cpi	r28, 0x05	; 5
    17bc:	79 f7       	brne	.-34     	; 0x179c <_Z19updateSelectionMenuhPcPS_+0x36>
		lcd.lcd_goto_xy(1, (i + 1));
		lcd.lcd_str(items[i]);
	 }


	 lcd.lcd_goto_xy(0, pos + 1);
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	4d 0f       	add	r20, r29
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	8e e8       	ldi	r24, 0x8E	; 142
    17c6:	96 e0       	ldi	r25, 0x06	; 6
    17c8:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
	 lcd.lcd_str(">");
    17cc:	6e e9       	ldi	r22, 0x9E	; 158
    17ce:	73 e0       	ldi	r23, 0x03	; 3
    17d0:	8e e8       	ldi	r24, 0x8E	; 142
    17d2:	96 e0       	ldi	r25, 0x06	; 6
    17d4:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>

 }
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	08 95       	ret

000017e4 <_Z17drawSelectionMenuPcPS_>:
 uint8_t drawSelectionMenu(char* name, char* items[5])
 {
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	8c 01       	movw	r16, r24
    17f0:	7b 01       	movw	r14, r22
	 uint8_t menuPos = 0;
	 
	 updateSelectionMenu(menuPos, name, items);
    17f2:	ab 01       	movw	r20, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_Z19updateSelectionMenuhPcPS_>

	 while (!BTN_MIDDLE_PRESSED)
    17fc:	4c 9b       	sbis	0x09, 4	; 9
    17fe:	25 c0       	rjmp	.+74     	; 0x184a <_Z17drawSelectionMenuPcPS_+0x66>
    1800:	c0 e0       	ldi	r28, 0x00	; 0
	 {
		 if (BTN_DOWN_PRESSED && (menuPos < 4))
    1802:	4b 99       	sbic	0x09, 3	; 9
    1804:	0a c0       	rjmp	.+20     	; 0x181a <_Z17drawSelectionMenuPcPS_+0x36>
    1806:	c4 30       	cpi	r28, 0x04	; 4
    1808:	20 f1       	brcs	.+72     	; 0x1852 <_Z17drawSelectionMenuPcPS_+0x6e>
    180a:	07 c0       	rjmp	.+14     	; 0x181a <_Z17drawSelectionMenuPcPS_+0x36>
		 {
			 menuPos++;
			 while (BTN_DOWN_PRESSED);
    180c:	4b 9b       	sbis	0x09, 3	; 9
    180e:	fe cf       	rjmp	.-4      	; 0x180c <_Z17drawSelectionMenuPcPS_+0x28>
			 updateSelectionMenu(menuPos, name, items);
    1810:	a7 01       	movw	r20, r14
    1812:	b8 01       	movw	r22, r16
    1814:	8c 2f       	mov	r24, r28
    1816:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_Z19updateSelectionMenuhPcPS_>
		 }

		 if (BTN_UP_PRESSED && (menuPos > 0))
    181a:	4a 99       	sbic	0x09, 2	; 9
    181c:	0a c0       	rjmp	.+20     	; 0x1832 <_Z17drawSelectionMenuPcPS_+0x4e>
    181e:	c1 11       	cpse	r28, r1
    1820:	1a c0       	rjmp	.+52     	; 0x1856 <_Z17drawSelectionMenuPcPS_+0x72>
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <_Z17drawSelectionMenuPcPS_+0x4e>
		 {
			 menuPos--;
			 while (BTN_UP_PRESSED);
    1824:	4a 9b       	sbis	0x09, 2	; 9
    1826:	fe cf       	rjmp	.-4      	; 0x1824 <_Z17drawSelectionMenuPcPS_+0x40>
			 updateSelectionMenu(menuPos, name, items);
    1828:	a7 01       	movw	r20, r14
    182a:	b8 01       	movw	r22, r16
    182c:	8c 2f       	mov	r24, r28
    182e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_Z19updateSelectionMenuhPcPS_>
    1832:	2f e7       	ldi	r18, 0x7F	; 127
    1834:	8a e1       	ldi	r24, 0x1A	; 26
    1836:	96 e0       	ldi	r25, 0x06	; 6
    1838:	21 50       	subi	r18, 0x01	; 1
    183a:	80 40       	sbci	r24, 0x00	; 0
    183c:	90 40       	sbci	r25, 0x00	; 0
    183e:	e1 f7       	brne	.-8      	; 0x1838 <_Z17drawSelectionMenuPcPS_+0x54>
    1840:	00 c0       	rjmp	.+0      	; 0x1842 <_Z17drawSelectionMenuPcPS_+0x5e>
    1842:	00 00       	nop
 {
	 uint8_t menuPos = 0;
	 
	 updateSelectionMenu(menuPos, name, items);

	 while (!BTN_MIDDLE_PRESSED)
    1844:	4c 99       	sbic	0x09, 4	; 9
    1846:	dd cf       	rjmp	.-70     	; 0x1802 <_Z17drawSelectionMenuPcPS_+0x1e>
    1848:	01 c0       	rjmp	.+2      	; 0x184c <_Z17drawSelectionMenuPcPS_+0x68>
	 lcd.lcd_str(">");

 }
 uint8_t drawSelectionMenu(char* name, char* items[5])
 {
	 uint8_t menuPos = 0;
    184a:	c0 e0       	ldi	r28, 0x00	; 0
			 updateSelectionMenu(menuPos, name, items);
		 }

		 _delay_ms(100);
	 }
	 while (BTN_MIDDLE_PRESSED);
    184c:	4c 9b       	sbis	0x09, 4	; 9
    184e:	fe cf       	rjmp	.-4      	; 0x184c <_Z17drawSelectionMenuPcPS_+0x68>
    1850:	04 c0       	rjmp	.+8      	; 0x185a <_Z17drawSelectionMenuPcPS_+0x76>

	 while (!BTN_MIDDLE_PRESSED)
	 {
		 if (BTN_DOWN_PRESSED && (menuPos < 4))
		 {
			 menuPos++;
    1852:	cf 5f       	subi	r28, 0xFF	; 255
			 while (BTN_DOWN_PRESSED);
    1854:	db cf       	rjmp	.-74     	; 0x180c <_Z17drawSelectionMenuPcPS_+0x28>
			 updateSelectionMenu(menuPos, name, items);
		 }

		 if (BTN_UP_PRESSED && (menuPos > 0))
		 {
			 menuPos--;
    1856:	c1 50       	subi	r28, 0x01	; 1
			 while (BTN_UP_PRESSED);
    1858:	e5 cf       	rjmp	.-54     	; 0x1824 <_Z17drawSelectionMenuPcPS_+0x40>
		 _delay_ms(100);
	 }
	 while (BTN_MIDDLE_PRESSED);

	 return menuPos;
 }
    185a:	8c 2f       	mov	r24, r28
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	08 95       	ret

00001868 <_Z19updateNumericalMenuPcfh>:

 void updateNumericalMenu(char* menuName, float value, uint8_t cursorPos)
 {
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	6c 01       	movw	r12, r24
    1878:	d4 2f       	mov	r29, r20
    187a:	15 2f       	mov	r17, r21
    187c:	06 2f       	mov	r16, r22
    187e:	f7 2e       	mov	r15, r23
    1880:	c2 2f       	mov	r28, r18
	 lcd.lcd_clear();
    1882:	8e e8       	ldi	r24, 0x8E	; 142
    1884:	96 e0       	ldi	r25, 0x06	; 6
    1886:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>

	 lcd.lcd_goto_xy(0, 0);
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	8e e8       	ldi	r24, 0x8E	; 142
    1890:	96 e0       	ldi	r25, 0x06	; 6
    1892:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
	 lcd.lcd_str(menuName);
    1896:	b6 01       	movw	r22, r12
    1898:	8e e8       	ldi	r24, 0x8E	; 142
    189a:	96 e0       	ldi	r25, 0x06	; 6
    189c:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
	 
	 lcd.lcd_goto_xy(0, 2);
    18a0:	42 e0       	ldi	r20, 0x02	; 2
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	8e e8       	ldi	r24, 0x8E	; 142
    18a6:	96 e0       	ldi	r25, 0x06	; 6
    18a8:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
	 lcd.lcd_string_format("%05.2f", value);
    18ac:	ff 92       	push	r15
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	df 93       	push	r29
    18b4:	80 ea       	ldi	r24, 0xA0	; 160
    18b6:	93 e0       	ldi	r25, 0x03	; 3
    18b8:	9f 93       	push	r25
    18ba:	8f 93       	push	r24
    18bc:	8e e8       	ldi	r24, 0x8E	; 142
    18be:	96 e0       	ldi	r25, 0x06	; 6
    18c0:	9f 93       	push	r25
    18c2:	8f 93       	push	r24
    18c4:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>

	 lcd.lcd_goto_xy(cursorPos, 3);
    18c8:	43 e0       	ldi	r20, 0x03	; 3
    18ca:	6c 2f       	mov	r22, r28
    18cc:	8e e8       	ldi	r24, 0x8E	; 142
    18ce:	96 e0       	ldi	r25, 0x06	; 6
    18d0:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
	 lcd.lcd_str("^");
    18d4:	67 ea       	ldi	r22, 0xA7	; 167
    18d6:	73 e0       	ldi	r23, 0x03	; 3
    18d8:	8e e8       	ldi	r24, 0x8E	; 142
    18da:	96 e0       	ldi	r25, 0x06	; 6
    18dc:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
    18e0:	8d b7       	in	r24, 0x3d	; 61
    18e2:	9e b7       	in	r25, 0x3e	; 62
    18e4:	08 96       	adiw	r24, 0x08	; 8
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	9e bf       	out	0x3e, r25	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	8d bf       	out	0x3d, r24	; 61
 }
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	08 95       	ret

00001900 <_Z17drawNumericalMenuPcf>:

 float drawNumericalMenu(char* menuName, float defaultValue)
 {
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	8c 01       	movw	r16, r24
    1910:	6a 01       	movw	r12, r20
    1912:	7b 01       	movw	r14, r22
	 float value = defaultValue;
	 uint8_t menuPos = 0;

	 updateNumericalMenu(menuName, value, menuPos);
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	0e 94 34 0c 	call	0x1868	; 0x1868 <_Z19updateNumericalMenuPcfh>

	 while (!BTN_MIDDLE_PRESSED)
    191a:	4c 9b       	sbis	0x09, 4	; 9
    191c:	a1 c0       	rjmp	.+322    	; 0x1a60 <_Z17drawNumericalMenuPcf+0x160>
    191e:	c0 e0       	ldi	r28, 0x00	; 0
	 {
		 if (BTN_RIGHT_PRESSED && (menuPos < 4))
    1920:	19 99       	sbic	0x03, 1	; 3
    1922:	0c c0       	rjmp	.+24     	; 0x193c <_Z17drawNumericalMenuPcf+0x3c>
    1924:	c4 30       	cpi	r28, 0x04	; 4
    1926:	08 f4       	brcc	.+2      	; 0x192a <_Z17drawNumericalMenuPcf+0x2a>
    1928:	9e c0       	rjmp	.+316    	; 0x1a66 <_Z17drawNumericalMenuPcf+0x166>
    192a:	08 c0       	rjmp	.+16     	; 0x193c <_Z17drawNumericalMenuPcf+0x3c>
		 {
			 menuPos++;
			 while (BTN_RIGHT_PRESSED);
    192c:	19 9b       	sbis	0x03, 1	; 3
    192e:	fe cf       	rjmp	.-4      	; 0x192c <_Z17drawNumericalMenuPcf+0x2c>
			 updateNumericalMenu(menuName, value, menuPos);
    1930:	2c 2f       	mov	r18, r28
    1932:	b7 01       	movw	r22, r14
    1934:	a6 01       	movw	r20, r12
    1936:	c8 01       	movw	r24, r16
    1938:	0e 94 34 0c 	call	0x1868	; 0x1868 <_Z19updateNumericalMenuPcfh>
		 }

		 if (BTN_LEFT_PRESSED && (menuPos > 0))
    193c:	1a 99       	sbic	0x03, 2	; 3
    193e:	0b c0       	rjmp	.+22     	; 0x1956 <_Z17drawNumericalMenuPcf+0x56>
    1940:	c1 11       	cpse	r28, r1
    1942:	93 c0       	rjmp	.+294    	; 0x1a6a <_Z17drawNumericalMenuPcf+0x16a>
    1944:	94 c0       	rjmp	.+296    	; 0x1a6e <_Z17drawNumericalMenuPcf+0x16e>
		 {
			 menuPos--;
			 while (BTN_LEFT_PRESSED);
    1946:	1a 9b       	sbis	0x03, 2	; 3
    1948:	fe cf       	rjmp	.-4      	; 0x1946 <_Z17drawNumericalMenuPcf+0x46>
			 updateNumericalMenu(menuName, value, menuPos);
    194a:	2c 2f       	mov	r18, r28
    194c:	b7 01       	movw	r22, r14
    194e:	a6 01       	movw	r20, r12
    1950:	c8 01       	movw	r24, r16
    1952:	0e 94 34 0c 	call	0x1868	; 0x1868 <_Z19updateNumericalMenuPcfh>
		 }

		 if (BTN_UP_PRESSED)
    1956:	4a 99       	sbic	0x09, 2	; 9
    1958:	3b c0       	rjmp	.+118    	; 0x19d0 <_Z17drawNumericalMenuPcf+0xd0>
		 {
			 switch (menuPos)
    195a:	c1 30       	cpi	r28, 0x01	; 1
    195c:	89 f0       	breq	.+34     	; 0x1980 <_Z17drawNumericalMenuPcf+0x80>
    195e:	28 f0       	brcs	.+10     	; 0x196a <_Z17drawNumericalMenuPcf+0x6a>
    1960:	c3 30       	cpi	r28, 0x03	; 3
    1962:	c9 f0       	breq	.+50     	; 0x1996 <_Z17drawNumericalMenuPcf+0x96>
    1964:	c4 30       	cpi	r28, 0x04	; 4
    1966:	11 f1       	breq	.+68     	; 0x19ac <_Z17drawNumericalMenuPcf+0xac>
    1968:	2b c0       	rjmp	.+86     	; 0x19c0 <_Z17drawNumericalMenuPcf+0xc0>
			 {
				 case 0:
				 value += 10.0;
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	c7 01       	movw	r24, r14
    1974:	b6 01       	movw	r22, r12
    1976:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    197a:	6b 01       	movw	r12, r22
    197c:	7c 01       	movw	r14, r24
				 break;
    197e:	20 c0       	rjmp	.+64     	; 0x19c0 <_Z17drawNumericalMenuPcf+0xc0>
				 case 1:
				 value += 1.0;
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e8       	ldi	r20, 0x80	; 128
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	c7 01       	movw	r24, r14
    198a:	b6 01       	movw	r22, r12
    198c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    1990:	6b 01       	movw	r12, r22
    1992:	7c 01       	movw	r14, r24
				 break;
    1994:	15 c0       	rjmp	.+42     	; 0x19c0 <_Z17drawNumericalMenuPcf+0xc0>
				 case 2:
				 break;
				 case 3:
				 value += 0.1;
    1996:	2d ec       	ldi	r18, 0xCD	; 205
    1998:	3c ec       	ldi	r19, 0xCC	; 204
    199a:	4c ec       	ldi	r20, 0xCC	; 204
    199c:	5d e3       	ldi	r21, 0x3D	; 61
    199e:	c7 01       	movw	r24, r14
    19a0:	b6 01       	movw	r22, r12
    19a2:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    19a6:	6b 01       	movw	r12, r22
    19a8:	7c 01       	movw	r14, r24
				 break;
    19aa:	0a c0       	rjmp	.+20     	; 0x19c0 <_Z17drawNumericalMenuPcf+0xc0>
				 case 4:
				 value += 0.01;
    19ac:	2a e0       	ldi	r18, 0x0A	; 10
    19ae:	37 ed       	ldi	r19, 0xD7	; 215
    19b0:	43 e2       	ldi	r20, 0x23	; 35
    19b2:	5c e3       	ldi	r21, 0x3C	; 60
    19b4:	c7 01       	movw	r24, r14
    19b6:	b6 01       	movw	r22, r12
    19b8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    19bc:	6b 01       	movw	r12, r22
    19be:	7c 01       	movw	r14, r24
				 break;
			 }
			 while (BTN_UP_PRESSED);
    19c0:	4a 9b       	sbis	0x09, 2	; 9
    19c2:	fe cf       	rjmp	.-4      	; 0x19c0 <_Z17drawNumericalMenuPcf+0xc0>
			 updateNumericalMenu(menuName, value, menuPos);
    19c4:	2c 2f       	mov	r18, r28
    19c6:	b7 01       	movw	r22, r14
    19c8:	a6 01       	movw	r20, r12
    19ca:	c8 01       	movw	r24, r16
    19cc:	0e 94 34 0c 	call	0x1868	; 0x1868 <_Z19updateNumericalMenuPcfh>
		 }

		 if (BTN_DOWN_PRESSED)
    19d0:	4b 99       	sbic	0x09, 3	; 9
    19d2:	3b c0       	rjmp	.+118    	; 0x1a4a <_Z17drawNumericalMenuPcf+0x14a>
		 {
			 switch (menuPos)
    19d4:	c1 30       	cpi	r28, 0x01	; 1
    19d6:	89 f0       	breq	.+34     	; 0x19fa <_Z17drawNumericalMenuPcf+0xfa>
    19d8:	28 f0       	brcs	.+10     	; 0x19e4 <_Z17drawNumericalMenuPcf+0xe4>
    19da:	c3 30       	cpi	r28, 0x03	; 3
    19dc:	c9 f0       	breq	.+50     	; 0x1a10 <_Z17drawNumericalMenuPcf+0x110>
    19de:	c4 30       	cpi	r28, 0x04	; 4
    19e0:	11 f1       	breq	.+68     	; 0x1a26 <_Z17drawNumericalMenuPcf+0x126>
    19e2:	2b c0       	rjmp	.+86     	; 0x1a3a <_Z17drawNumericalMenuPcf+0x13a>
			 {
				 case 0:
				 value -= 10.0;
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e2       	ldi	r20, 0x20	; 32
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	c7 01       	movw	r24, r14
    19ee:	b6 01       	movw	r22, r12
    19f0:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
    19f4:	6b 01       	movw	r12, r22
    19f6:	7c 01       	movw	r14, r24
				 break;
    19f8:	20 c0       	rjmp	.+64     	; 0x1a3a <_Z17drawNumericalMenuPcf+0x13a>
				 case 1:
				 value -= 1.0;
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	c7 01       	movw	r24, r14
    1a04:	b6 01       	movw	r22, r12
    1a06:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
    1a0a:	6b 01       	movw	r12, r22
    1a0c:	7c 01       	movw	r14, r24
				 break;
    1a0e:	15 c0       	rjmp	.+42     	; 0x1a3a <_Z17drawNumericalMenuPcf+0x13a>
				 case 2:
				 break;
				 case 3:
				 value -= 0.1;
    1a10:	2d ec       	ldi	r18, 0xCD	; 205
    1a12:	3c ec       	ldi	r19, 0xCC	; 204
    1a14:	4c ec       	ldi	r20, 0xCC	; 204
    1a16:	5d e3       	ldi	r21, 0x3D	; 61
    1a18:	c7 01       	movw	r24, r14
    1a1a:	b6 01       	movw	r22, r12
    1a1c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
    1a20:	6b 01       	movw	r12, r22
    1a22:	7c 01       	movw	r14, r24
				 break;
    1a24:	0a c0       	rjmp	.+20     	; 0x1a3a <_Z17drawNumericalMenuPcf+0x13a>
				 case 4:
				 value -= 0.01;
    1a26:	2a e0       	ldi	r18, 0x0A	; 10
    1a28:	37 ed       	ldi	r19, 0xD7	; 215
    1a2a:	43 e2       	ldi	r20, 0x23	; 35
    1a2c:	5c e3       	ldi	r21, 0x3C	; 60
    1a2e:	c7 01       	movw	r24, r14
    1a30:	b6 01       	movw	r22, r12
    1a32:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
    1a36:	6b 01       	movw	r12, r22
    1a38:	7c 01       	movw	r14, r24
				 break;
			 }
			 while (BTN_DOWN_PRESSED);
    1a3a:	4b 9b       	sbis	0x09, 3	; 9
    1a3c:	fe cf       	rjmp	.-4      	; 0x1a3a <_Z17drawNumericalMenuPcf+0x13a>
			 updateNumericalMenu(menuName, value, menuPos);
    1a3e:	2c 2f       	mov	r18, r28
    1a40:	b7 01       	movw	r22, r14
    1a42:	a6 01       	movw	r20, r12
    1a44:	c8 01       	movw	r24, r16
    1a46:	0e 94 34 0c 	call	0x1868	; 0x1868 <_Z19updateNumericalMenuPcfh>
    1a4a:	2f e7       	ldi	r18, 0x7F	; 127
    1a4c:	8a e1       	ldi	r24, 0x1A	; 26
    1a4e:	96 e0       	ldi	r25, 0x06	; 6
    1a50:	21 50       	subi	r18, 0x01	; 1
    1a52:	80 40       	sbci	r24, 0x00	; 0
    1a54:	90 40       	sbci	r25, 0x00	; 0
    1a56:	e1 f7       	brne	.-8      	; 0x1a50 <_Z17drawNumericalMenuPcf+0x150>
    1a58:	00 c0       	rjmp	.+0      	; 0x1a5a <_Z17drawNumericalMenuPcf+0x15a>
    1a5a:	00 00       	nop
	 float value = defaultValue;
	 uint8_t menuPos = 0;

	 updateNumericalMenu(menuName, value, menuPos);

	 while (!BTN_MIDDLE_PRESSED)
    1a5c:	4c 99       	sbic	0x09, 4	; 9
    1a5e:	60 cf       	rjmp	.-320    	; 0x1920 <_Z17drawNumericalMenuPcf+0x20>
			 updateNumericalMenu(menuName, value, menuPos);
		 }
		 
		 _delay_ms(100);
	 }
	 while (BTN_MIDDLE_PRESSED);
    1a60:	4c 9b       	sbis	0x09, 4	; 9
    1a62:	fe cf       	rjmp	.-4      	; 0x1a60 <_Z17drawNumericalMenuPcf+0x160>
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <_Z17drawNumericalMenuPcf+0x174>

	 while (!BTN_MIDDLE_PRESSED)
	 {
		 if (BTN_RIGHT_PRESSED && (menuPos < 4))
		 {
			 menuPos++;
    1a66:	cf 5f       	subi	r28, 0xFF	; 255
			 while (BTN_RIGHT_PRESSED);
    1a68:	61 cf       	rjmp	.-318    	; 0x192c <_Z17drawNumericalMenuPcf+0x2c>
			 updateNumericalMenu(menuName, value, menuPos);
		 }

		 if (BTN_LEFT_PRESSED && (menuPos > 0))
		 {
			 menuPos--;
    1a6a:	c1 50       	subi	r28, 0x01	; 1
			 while (BTN_LEFT_PRESSED);
    1a6c:	6c cf       	rjmp	.-296    	; 0x1946 <_Z17drawNumericalMenuPcf+0x46>
			 updateNumericalMenu(menuName, value, menuPos);
		 }

		 if (BTN_UP_PRESSED)
    1a6e:	4a 9b       	sbis	0x09, 2	; 9
    1a70:	7c cf       	rjmp	.-264    	; 0x196a <_Z17drawNumericalMenuPcf+0x6a>
    1a72:	ae cf       	rjmp	.-164    	; 0x19d0 <_Z17drawNumericalMenuPcf+0xd0>
		 _delay_ms(100);
	 }
	 while (BTN_MIDDLE_PRESSED);

	 return value;
    1a74:	c7 01       	movw	r24, r14
    1a76:	b6 01       	movw	r22, r12
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	08 95       	ret

00001a88 <_Z9dischargeff>:
extern LCD_5110 lcd;
extern volatile bool secondFlag;


 void discharge(float maxCurrent, float minVoltage)
 {
    1a88:	2f 92       	push	r2
    1a8a:	3f 92       	push	r3
    1a8c:	4f 92       	push	r4
    1a8e:	5f 92       	push	r5
    1a90:	6f 92       	push	r6
    1a92:	7f 92       	push	r7
    1a94:	8f 92       	push	r8
    1a96:	9f 92       	push	r9
    1a98:	af 92       	push	r10
    1a9a:	bf 92       	push	r11
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	64 97       	sbiw	r28, 0x14	; 20
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	46 2e       	mov	r4, r22
    1abe:	57 2e       	mov	r5, r23
    1ac0:	68 2e       	mov	r6, r24
    1ac2:	79 2e       	mov	r7, r25
    1ac4:	32 2e       	mov	r3, r18
    1ac6:	b3 2e       	mov	r11, r19
    1ac8:	a4 2e       	mov	r10, r20
    1aca:	25 2e       	mov	r2, r21
	 //review all info on the LCD
	 lcd.lcd_clear();
    1acc:	8e e8       	ldi	r24, 0x8E	; 142
    1ace:	96 e0       	ldi	r25, 0x06	; 6
    1ad0:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
	 lcd.lcd_goto_xy_exact(0, 0);
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	8e e8       	ldi	r24, 0x8E	; 142
    1ada:	96 e0       	ldi	r25, 0x06	; 6
    1adc:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
	 lcd.lcd_string_format("REVIEW:\nIdis:   %4.2f AVmin:  %5.2f VPlugin batteryand press\nmiddle button", maxCurrent, minVoltage);
    1ae0:	2f 92       	push	r2
    1ae2:	af 92       	push	r10
    1ae4:	bf 92       	push	r11
    1ae6:	3f 92       	push	r3
    1ae8:	7f 92       	push	r7
    1aea:	6f 92       	push	r6
    1aec:	5f 92       	push	r5
    1aee:	4f 92       	push	r4
    1af0:	89 ea       	ldi	r24, 0xA9	; 169
    1af2:	93 e0       	ldi	r25, 0x03	; 3
    1af4:	9f 93       	push	r25
    1af6:	8f 93       	push	r24
    1af8:	8e e8       	ldi	r24, 0x8E	; 142
    1afa:	96 e0       	ldi	r25, 0x06	; 6
    1afc:	9f 93       	push	r25
    1afe:	8f 93       	push	r24
    1b00:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>
	 
	 #ifdef UART
		 uart_sendStr("STARTING DISCHARGE\n");
    1b04:	84 ef       	ldi	r24, 0xF4	; 244
    1b06:	93 e0       	ldi	r25, 0x03	; 3
    1b08:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
		 uart_sendStrFormatted("Vmin: %5.2f V, Idis: %4.2f V\n", minVoltage, maxCurrent);
    1b0c:	7f 92       	push	r7
    1b0e:	6f 92       	push	r6
    1b10:	5f 92       	push	r5
    1b12:	4f 92       	push	r4
    1b14:	2f 92       	push	r2
    1b16:	af 92       	push	r10
    1b18:	bf 92       	push	r11
    1b1a:	3f 92       	push	r3
    1b1c:	88 e0       	ldi	r24, 0x08	; 8
    1b1e:	94 e0       	ldi	r25, 0x04	; 4
    1b20:	9f 93       	push	r25
    1b22:	8f 93       	push	r24
    1b24:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z21uart_sendStrFormattedPcz>
		 uart_sendStr("V,I,mAh,mWh,tHrs,tMin,tSec,PWM\n");
    1b28:	86 e2       	ldi	r24, 0x26	; 38
    1b2a:	94 e0       	ldi	r25, 0x04	; 4
    1b2c:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
	#endif

	while (!BTN_MIDDLE_PRESSED);
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	4c 99       	sbic	0x09, 4	; 9
    1b3c:	fe cf       	rjmp	.-4      	; 0x1b3a <_Z9dischargeff+0xb2>
	while (BTN_MIDDLE_PRESSED);
    1b3e:	4c 9b       	sbis	0x09, 4	; 9
    1b40:	fe cf       	rjmp	.-4      	; 0x1b3e <_Z9dischargeff+0xb6>
	 uint8_t tHrs = 0, tMin = 0, tSec = 0;
	 float batteryCurrent, batteryVoltage, startingVoltage;
	 bool cycle = true;
	 
	
	 startingVoltage = measureBatteryVoltage();
    1b42:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
    1b46:	6e 87       	std	Y+14, r22	; 0x0e
    1b48:	7f 87       	std	Y+15, r23	; 0x0f
    1b4a:	88 8b       	std	Y+16, r24	; 0x10
    1b4c:	99 8b       	std	Y+17, r25	; 0x11

	 if ((startingVoltage * maxCurrent) > 2)
    1b4e:	24 2d       	mov	r18, r4
    1b50:	35 2d       	mov	r19, r5
    1b52:	46 2d       	mov	r20, r6
    1b54:	57 2d       	mov	r21, r7
    1b56:	be 85       	ldd	r27, Y+14	; 0x0e
    1b58:	af 85       	ldd	r26, Y+15	; 0x0f
    1b5a:	e8 89       	ldd	r30, Y+16	; 0x10
    1b5c:	19 89       	ldd	r17, Y+17	; 0x11
    1b5e:	6b 2f       	mov	r22, r27
    1b60:	7a 2f       	mov	r23, r26
    1b62:	8e 2f       	mov	r24, r30
    1b64:	91 2f       	mov	r25, r17
    1b66:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	50 e4       	ldi	r21, 0x40	; 64
    1b72:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	0c f4       	brge	.+2      	; 0x1b7c <_Z9dischargeff+0xf4>
	 {
		FAN_ON;
    1b7a:	45 9a       	sbi	0x08, 5	; 8
	 }

	 PWM_LOAD_MODE;
    1b7c:	83 e8       	ldi	r24, 0x83	; 131
    1b7e:	84 bd       	out	0x24, r24	; 36
	 PWM_START;
    1b80:	85 b5       	in	r24, 0x25	; 37
    1b82:	81 60       	ori	r24, 0x01	; 1
    1b84:	85 bd       	out	0x25, r24	; 37
    1b86:	1f ef       	ldi	r17, 0xFF	; 255

	 for (uint8_t i = 0; i < 255; i++)
	 {
		 batteryCurrent = measureDischargingCurrent();
    1b88:	0e 94 44 02 	call	0x488	; 0x488 <_Z25measureDischargingCurrentv>
    1b8c:	6b 01       	movw	r12, r22
    1b8e:	7c 01       	movw	r14, r24
		 if ((batteryCurrent < maxCurrent) && (LOAD_PWM < 0xFF))
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	64 2d       	mov	r22, r4
    1b96:	75 2d       	mov	r23, r5
    1b98:	86 2d       	mov	r24, r6
    1b9a:	97 2d       	mov	r25, r7
    1b9c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	0c f0       	brlt	.+2      	; 0x1ba6 <_Z9dischargeff+0x11e>
    1ba4:	9a c1       	rjmp	.+820    	; 0x1eda <_Z9dischargeff+0x452>
    1ba6:	87 b5       	in	r24, 0x27	; 39
    1ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    1baa:	09 f0       	breq	.+2      	; 0x1bae <_Z9dischargeff+0x126>
    1bac:	92 c1       	rjmp	.+804    	; 0x1ed2 <_Z9dischargeff+0x44a>
    1bae:	95 c1       	rjmp	.+810    	; 0x1eda <_Z9dischargeff+0x452>
		 {
			 LOAD_PWM++;
		 }
		 else if ((batteryCurrent > maxCurrent) && (LOAD_PWM > 0x00))
    1bb0:	87 b5       	in	r24, 0x27	; 39
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	9e c1       	rjmp	.+828    	; 0x1ef2 <_Z9dischargeff+0x46a>
    1bb6:	11 50       	subi	r17, 0x01	; 1
	 }

	 PWM_LOAD_MODE;
	 PWM_START;

	 for (uint8_t i = 0; i < 255; i++)
    1bb8:	39 f7       	brne	.-50     	; 0x1b88 <_Z9dischargeff+0x100>
		 else if ((batteryCurrent > maxCurrent) && (LOAD_PWM > 0x00))
		 {
			 LOAD_PWM--;
		 }
	 }
	 TIMER1_START;
    1bba:	8d e0       	ldi	r24, 0x0D	; 13
    1bbc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	#endif

	while (!BTN_MIDDLE_PRESSED);
	while (BTN_MIDDLE_PRESSED);
	
	 uint32_t miliAmpSecs = 0, miliWattSecs = 0;
    1bc0:	19 82       	std	Y+1, r1	; 0x01
    1bc2:	1a 82       	std	Y+2, r1	; 0x02
    1bc4:	1b 82       	std	Y+3, r1	; 0x03
    1bc6:	1c 82       	std	Y+4, r1	; 0x04
    1bc8:	1d 82       	std	Y+5, r1	; 0x05
    1bca:	1e 82       	std	Y+6, r1	; 0x06
    1bcc:	1f 82       	std	Y+7, r1	; 0x07
    1bce:	18 86       	std	Y+8, r1	; 0x08
	 uint8_t tHrs = 0, tMin = 0, tSec = 0;
    1bd0:	19 86       	std	Y+9, r1	; 0x09
    1bd2:	00 e0       	ldi	r16, 0x00	; 0
    1bd4:	1b 8b       	std	Y+19, r17	; 0x13
    1bd6:	0c 8b       	std	Y+20, r16	; 0x14
    1bd8:	3a 86       	std	Y+10, r3	; 0x0a
    1bda:	35 2c       	mov	r3, r5
    1bdc:	57 2c       	mov	r5, r7
    1bde:	bb 86       	std	Y+11, r11	; 0x0b
    1be0:	ac 86       	std	Y+12, r10	; 0x0c
    1be2:	2d 86       	std	Y+13, r2	; 0x0d
    1be4:	24 2c       	mov	r2, r4
    1be6:	46 2c       	mov	r4, r6
    1be8:	0a c1       	rjmp	.+532    	; 0x1dfe <_Z9dischargeff+0x376>
    1bea:	9b 89       	ldd	r25, Y+19	; 0x13
    1bec:	2c 89       	ldd	r18, Y+20	; 0x14
	 TIMER1_START;

	 while (cycle)
	 {
		 //do this every seconds (we are using a timer for better accuracy
		 if (secondFlag)
    1bee:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <secondFlag>
    1bf2:	88 23       	and	r24, r24
    1bf4:	e1 f3       	breq	.-8      	; 0x1bee <_Z9dischargeff+0x166>
    1bf6:	9b 8b       	std	Y+19, r25	; 0x13
    1bf8:	2c 8b       	std	Y+20, r18	; 0x14
		 {
			 secondFlag = false;
    1bfa:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <secondFlag>
			 YEL_LED_TOGGLE;
    1bfe:	85 b1       	in	r24, 0x05	; 5
    1c00:	31 e0       	ldi	r19, 0x01	; 1
    1c02:	83 27       	eor	r24, r19
    1c04:	85 b9       	out	0x05, r24	; 5
			 
			 //time calculation routine
			 tSec++;
    1c06:	8c 89       	ldd	r24, Y+20	; 0x14
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	8c 8b       	std	Y+20, r24	; 0x14
			 if (tSec > 59)
    1c0c:	8c 33       	cpi	r24, 0x3C	; 60
    1c0e:	20 f0       	brcs	.+8      	; 0x1c18 <_Z9dischargeff+0x190>
			 {
				 tSec = 0;
				 tMin++;
    1c10:	9b 89       	ldd	r25, Y+19	; 0x13
    1c12:	9f 5f       	subi	r25, 0xFF	; 255
    1c14:	9b 8b       	std	Y+19, r25	; 0x13
			 
			 //time calculation routine
			 tSec++;
			 if (tSec > 59)
			 {
				 tSec = 0;
    1c16:	1c 8a       	std	Y+20, r1	; 0x14
				 tMin++;
			 }
			 if (tMin > 59)
    1c18:	ab 89       	ldd	r26, Y+19	; 0x13
    1c1a:	ac 33       	cpi	r26, 0x3C	; 60
    1c1c:	20 f0       	brcs	.+8      	; 0x1c26 <_Z9dischargeff+0x19e>
			 {
				 tMin = 0;
				 tHrs++;
    1c1e:	b9 85       	ldd	r27, Y+9	; 0x09
    1c20:	bf 5f       	subi	r27, 0xFF	; 255
    1c22:	b9 87       	std	Y+9, r27	; 0x09
				 tSec = 0;
				 tMin++;
			 }
			 if (tMin > 59)
			 {
				 tMin = 0;
    1c24:	1b 8a       	std	Y+19, r1	; 0x13
				 tHrs++;
			 }

			 batteryCurrent = measureDischargingCurrent();
    1c26:	0e 94 44 02 	call	0x488	; 0x488 <_Z25measureDischargingCurrentv>
    1c2a:	a6 2e       	mov	r10, r22
    1c2c:	b7 2e       	mov	r11, r23
    1c2e:	08 2f       	mov	r16, r24
    1c30:	19 2f       	mov	r17, r25
			 //load adjusting routine
			 if ((batteryCurrent < maxCurrent) && (LOAD_PWM < 0xFF))
    1c32:	76 2f       	mov	r23, r22
    1c34:	27 2f       	mov	r18, r23
    1c36:	3b 2d       	mov	r19, r11
    1c38:	40 2f       	mov	r20, r16
    1c3a:	51 2f       	mov	r21, r17
    1c3c:	62 2d       	mov	r22, r2
    1c3e:	73 2d       	mov	r23, r3
    1c40:	84 2d       	mov	r24, r4
    1c42:	95 2d       	mov	r25, r5
    1c44:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <_Z9dischargeff+0x1c6>
    1c4c:	5a c1       	rjmp	.+692    	; 0x1f02 <_Z9dischargeff+0x47a>
    1c4e:	87 b5       	in	r24, 0x27	; 39
    1c50:	8f 3f       	cpi	r24, 0xFF	; 255
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <_Z9dischargeff+0x1ce>
    1c54:	52 c1       	rjmp	.+676    	; 0x1efa <_Z9dischargeff+0x472>
    1c56:	55 c1       	rjmp	.+682    	; 0x1f02 <_Z9dischargeff+0x47a>
			 {
				 LOAD_PWM++;
			 }
			 else if ((batteryCurrent > maxCurrent) && (LOAD_PWM > 0x00))
    1c58:	87 b5       	in	r24, 0x27	; 39
    1c5a:	81 11       	cpse	r24, r1
    1c5c:	60 c1       	rjmp	.+704    	; 0x1f1e <_Z9dischargeff+0x496>
			 {
				 LOAD_PWM--;
			 }

			 //battery measurement routine
			 batteryVoltage = measureBatteryVoltage();
    1c5e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
    1c62:	96 2e       	mov	r9, r22
    1c64:	87 2e       	mov	r8, r23
    1c66:	78 2e       	mov	r7, r24
    1c68:	69 2e       	mov	r6, r25
			 miliAmpSecs += (batteryCurrent * 1000);
    1c6a:	69 81       	ldd	r22, Y+1	; 0x01
    1c6c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
    1c76:	6b 01       	movw	r12, r22
    1c78:	7c 01       	movw	r14, r24
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	4a e7       	ldi	r20, 0x7A	; 122
    1c80:	54 e4       	ldi	r21, 0x44	; 68
    1c82:	6a 2d       	mov	r22, r10
    1c84:	7b 2d       	mov	r23, r11
    1c86:	80 2f       	mov	r24, r16
    1c88:	91 2f       	mov	r25, r17
    1c8a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
    1c8e:	9b 01       	movw	r18, r22
    1c90:	ac 01       	movw	r20, r24
    1c92:	c7 01       	movw	r24, r14
    1c94:	b6 01       	movw	r22, r12
    1c96:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    1c9a:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
    1c9e:	69 83       	std	Y+1, r22	; 0x01
    1ca0:	7a 83       	std	Y+2, r23	; 0x02
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
    1ca4:	9c 83       	std	Y+4, r25	; 0x04
			 miliWattSecs += (batteryVoltage * batteryCurrent * 1000);
    1ca6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ca8:	7e 81       	ldd	r23, Y+6	; 0x06
    1caa:	8f 81       	ldd	r24, Y+7	; 0x07
    1cac:	98 85       	ldd	r25, Y+8	; 0x08
    1cae:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__floatunsisf>
    1cb2:	6b 01       	movw	r12, r22
    1cb4:	7c 01       	movw	r14, r24
    1cb6:	2a 2d       	mov	r18, r10
    1cb8:	3b 2d       	mov	r19, r11
    1cba:	40 2f       	mov	r20, r16
    1cbc:	51 2f       	mov	r21, r17
    1cbe:	69 2d       	mov	r22, r9
    1cc0:	78 2d       	mov	r23, r8
    1cc2:	87 2d       	mov	r24, r7
    1cc4:	96 2d       	mov	r25, r6
    1cc6:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	4a e7       	ldi	r20, 0x7A	; 122
    1cd0:	54 e4       	ldi	r21, 0x44	; 68
    1cd2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	c7 01       	movw	r24, r14
    1cdc:	b6 01       	movw	r22, r12
    1cde:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    1ce2:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
    1ce6:	6d 83       	std	Y+5, r22	; 0x05
    1ce8:	7e 83       	std	Y+6, r23	; 0x06
    1cea:	8f 83       	std	Y+7, r24	; 0x07
    1cec:	98 87       	std	Y+8, r25	; 0x08

			 //lcd output routine
			 //lcd.lcd_clear();
			 lcd.lcd_goto_xy_exact(0, 0);
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	8e e8       	ldi	r24, 0x8E	; 142
    1cf4:	96 e0       	ldi	r25, 0x06	; 6
    1cf6:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
			 lcd.lcd_string_format("DISCHARGE:\nV: %5.2f/%5.2fI: %5.3f/%5.3fE:   %5d mAhE:   %5d mWh%02d:%02d:%02d   %03d", batteryVoltage, minVoltage, batteryCurrent, maxCurrent, (int)(miliAmpSecs / 3600), (int)(miliWattSecs / 3600), tHrs, tMin, tSec, LOAD_PWM);
    1cfa:	e7 b5       	in	r30, 0x27	; 39
    1cfc:	ea 8b       	std	Y+18, r30	; 0x12
    1cfe:	6d 81       	ldd	r22, Y+5	; 0x05
    1d00:	7e 81       	ldd	r23, Y+6	; 0x06
    1d02:	8f 81       	ldd	r24, Y+7	; 0x07
    1d04:	98 85       	ldd	r25, Y+8	; 0x08
    1d06:	20 e1       	ldi	r18, 0x10	; 16
    1d08:	3e e0       	ldi	r19, 0x0E	; 14
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
    1d12:	d2 2e       	mov	r13, r18
    1d14:	e3 2e       	mov	r14, r19
    1d16:	69 81       	ldd	r22, Y+1	; 0x01
    1d18:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	20 e1       	ldi	r18, 0x10	; 16
    1d20:	3e e0       	ldi	r19, 0x0E	; 14
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
    1d2a:	f2 2e       	mov	r15, r18
    1d2c:	c3 2e       	mov	r12, r19
    1d2e:	1f 92       	push	r1
    1d30:	fa 89       	ldd	r31, Y+18	; 0x12
    1d32:	ff 93       	push	r31
    1d34:	1f 92       	push	r1
    1d36:	2c 89       	ldd	r18, Y+20	; 0x14
    1d38:	2f 93       	push	r18
    1d3a:	1f 92       	push	r1
    1d3c:	3b 89       	ldd	r19, Y+19	; 0x13
    1d3e:	3f 93       	push	r19
    1d40:	1f 92       	push	r1
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	8f 93       	push	r24
    1d46:	ef 92       	push	r14
    1d48:	df 92       	push	r13
    1d4a:	cf 92       	push	r12
    1d4c:	ff 92       	push	r15
    1d4e:	5f 92       	push	r5
    1d50:	4f 92       	push	r4
    1d52:	3f 92       	push	r3
    1d54:	2f 92       	push	r2
    1d56:	1f 93       	push	r17
    1d58:	0f 93       	push	r16
    1d5a:	bf 92       	push	r11
    1d5c:	af 92       	push	r10
    1d5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d60:	9f 93       	push	r25
    1d62:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d64:	af 93       	push	r26
    1d66:	bb 85       	ldd	r27, Y+11	; 0x0b
    1d68:	bf 93       	push	r27
    1d6a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d6c:	ef 93       	push	r30
    1d6e:	6f 92       	push	r6
    1d70:	7f 92       	push	r7
    1d72:	8f 92       	push	r8
    1d74:	9f 92       	push	r9
    1d76:	a6 e4       	ldi	r26, 0x46	; 70
    1d78:	b4 e0       	ldi	r27, 0x04	; 4
    1d7a:	bf 93       	push	r27
    1d7c:	af 93       	push	r26
    1d7e:	8e e8       	ldi	r24, 0x8E	; 142
    1d80:	96 e0       	ldi	r25, 0x06	; 6
    1d82:	9f 93       	push	r25
    1d84:	8f 93       	push	r24
    1d86:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>

			 uart_sendStrFormatted("%5.2f;%4.2f;%5d;%5d;%02d:%02d:%02d;%03d\n", batteryVoltage, batteryCurrent, (int)(miliAmpSecs / 3600), (int)(miliWattSecs / 3600), tHrs, tMin, tSec, LOAD_PWM);
    1d8a:	87 b5       	in	r24, 0x27	; 39
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	1f 92       	push	r1
    1d98:	8f 93       	push	r24
    1d9a:	1f 92       	push	r1
    1d9c:	3c 89       	ldd	r19, Y+20	; 0x14
    1d9e:	3f 93       	push	r19
    1da0:	1f 92       	push	r1
    1da2:	8b 89       	ldd	r24, Y+19	; 0x13
    1da4:	8f 93       	push	r24
    1da6:	1f 92       	push	r1
    1da8:	99 85       	ldd	r25, Y+9	; 0x09
    1daa:	9f 93       	push	r25
    1dac:	ef 92       	push	r14
    1dae:	df 92       	push	r13
    1db0:	cf 92       	push	r12
    1db2:	ff 92       	push	r15
    1db4:	1f 93       	push	r17
    1db6:	0f 93       	push	r16
    1db8:	bf 92       	push	r11
    1dba:	af 92       	push	r10
    1dbc:	6f 92       	push	r6
    1dbe:	7f 92       	push	r7
    1dc0:	8f 92       	push	r8
    1dc2:	9f 92       	push	r9
    1dc4:	ab e9       	ldi	r26, 0x9B	; 155
    1dc6:	b4 e0       	ldi	r27, 0x04	; 4
    1dc8:	bf 93       	push	r27
    1dca:	af 93       	push	r26
    1dcc:	0e 94 b3 13 	call	0x2766	; 0x2766 <_Z21uart_sendStrFormattedPcz>

			 //termination - battery undervoltage or user pressing the middle button
			 if ((batteryVoltage < minVoltage) || BTN_MIDDLE_PRESSED)
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	29 2d       	mov	r18, r9
    1ddc:	38 2d       	mov	r19, r8
    1dde:	47 2d       	mov	r20, r7
    1de0:	56 2d       	mov	r21, r6
    1de2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1de4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1de6:	1c 85       	ldd	r17, Y+12	; 0x0c
    1de8:	0d 85       	ldd	r16, Y+13	; 0x0d
    1dea:	6b 2f       	mov	r22, r27
    1dec:	7a 2f       	mov	r23, r26
    1dee:	81 2f       	mov	r24, r17
    1df0:	90 2f       	mov	r25, r16
    1df2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	44 f0       	brlt	.+16     	; 0x1e0a <_Z9dischargeff+0x382>
			 LOAD_PWM--;
		 }
	 }
	 TIMER1_START;

	 while (cycle)
    1dfa:	4c 9b       	sbis	0x09, 4	; 9
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <_Z9dischargeff+0x382>
	 {
		 //do this every seconds (we are using a timer for better accuracy
		 if (secondFlag)
    1dfe:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <secondFlag>
    1e02:	88 23       	and	r24, r24
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <_Z9dischargeff+0x380>
    1e06:	f1 ce       	rjmp	.-542    	; 0x1bea <_Z9dischargeff+0x162>
    1e08:	f8 ce       	rjmp	.-528    	; 0x1bfa <_Z9dischargeff+0x172>
    1e0a:	1b 89       	ldd	r17, Y+19	; 0x13
    1e0c:	0c 89       	ldd	r16, Y+20	; 0x14
    1e0e:	64 2c       	mov	r6, r4
    1e10:	42 2c       	mov	r4, r2
    1e12:	75 2c       	mov	r7, r5
    1e14:	53 2c       	mov	r5, r3
    1e16:	3a 84       	ldd	r3, Y+10	; 0x0a
    1e18:	bb 84       	ldd	r11, Y+11	; 0x0b
    1e1a:	ac 84       	ldd	r10, Y+12	; 0x0c
    1e1c:	2d 84       	ldd	r2, Y+13	; 0x0d
		 }


	 }

	TIMER1_STOP;
    1e1e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	PWM_STOP;
    1e22:	85 b5       	in	r24, 0x25	; 37
    1e24:	85 bd       	out	0x25, r24	; 37
	PWM_RESET;
    1e26:	14 bc       	out	0x24, r1	; 36
	FAN_OFF;
    1e28:	45 98       	cbi	0x08, 5	; 8

	YEL_LED_OFF;
    1e2a:	28 98       	cbi	0x05, 0	; 5
	RED_LED_ON;
    1e2c:	5f 9a       	sbi	0x0b, 7	; 11

	lcd.lcd_clear();
    1e2e:	8e e8       	ldi	r24, 0x8E	; 142
    1e30:	96 e0       	ldi	r25, 0x06	; 6
    1e32:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
	lcd.lcd_goto_xy_exact(0, 0);
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	8e e8       	ldi	r24, 0x8E	; 142
    1e3c:	96 e0       	ldi	r25, 0x06	; 6
    1e3e:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
	lcd.lcd_string_format("RESULTS:\nV: %5.2f-%5.2fI:      %4.2f AE:   %5d mAhE:   %5d mWht:    %02d:%02d:%02d", startingVoltage, minVoltage, maxCurrent, (int)(miliAmpSecs / 3600), (int)(miliWattSecs / 3600), tHrs, tMin, tSec);
    1e42:	1f 92       	push	r1
    1e44:	0f 93       	push	r16
    1e46:	1f 92       	push	r1
    1e48:	1f 93       	push	r17
    1e4a:	1f 92       	push	r1
    1e4c:	39 85       	ldd	r19, Y+9	; 0x09
    1e4e:	3f 93       	push	r19
    1e50:	0f 2e       	mov	r0, r31
    1e52:	f0 e1       	ldi	r31, 0x10	; 16
    1e54:	cf 2e       	mov	r12, r31
    1e56:	fe e0       	ldi	r31, 0x0E	; 14
    1e58:	df 2e       	mov	r13, r31
    1e5a:	e1 2c       	mov	r14, r1
    1e5c:	f1 2c       	mov	r15, r1
    1e5e:	f0 2d       	mov	r31, r0
    1e60:	6d 81       	ldd	r22, Y+5	; 0x05
    1e62:	7e 81       	ldd	r23, Y+6	; 0x06
    1e64:	8f 81       	ldd	r24, Y+7	; 0x07
    1e66:	98 85       	ldd	r25, Y+8	; 0x08
    1e68:	a7 01       	movw	r20, r14
    1e6a:	96 01       	movw	r18, r12
    1e6c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
    1e70:	3f 93       	push	r19
    1e72:	2f 93       	push	r18
    1e74:	69 81       	ldd	r22, Y+1	; 0x01
    1e76:	7a 81       	ldd	r23, Y+2	; 0x02
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	a7 01       	movw	r20, r14
    1e7e:	96 01       	movw	r18, r12
    1e80:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
    1e84:	3f 93       	push	r19
    1e86:	2f 93       	push	r18
    1e88:	7f 92       	push	r7
    1e8a:	6f 92       	push	r6
    1e8c:	5f 92       	push	r5
    1e8e:	4f 92       	push	r4
    1e90:	2f 92       	push	r2
    1e92:	af 92       	push	r10
    1e94:	bf 92       	push	r11
    1e96:	3f 92       	push	r3
    1e98:	89 89       	ldd	r24, Y+17	; 0x11
    1e9a:	8f 93       	push	r24
    1e9c:	98 89       	ldd	r25, Y+16	; 0x10
    1e9e:	9f 93       	push	r25
    1ea0:	af 85       	ldd	r26, Y+15	; 0x0f
    1ea2:	af 93       	push	r26
    1ea4:	be 85       	ldd	r27, Y+14	; 0x0e
    1ea6:	bf 93       	push	r27
    1ea8:	84 ec       	ldi	r24, 0xC4	; 196
    1eaa:	94 e0       	ldi	r25, 0x04	; 4
    1eac:	9f 93       	push	r25
    1eae:	8f 93       	push	r24
    1eb0:	8e e8       	ldi	r24, 0x8E	; 142
    1eb2:	96 e0       	ldi	r25, 0x06	; 6
    1eb4:	9f 93       	push	r25
    1eb6:	8f 93       	push	r24
    1eb8:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>

	while (BTN_MIDDLE_PRESSED);
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	4c 9b       	sbis	0x09, 4	; 9
    1ec8:	fe cf       	rjmp	.-4      	; 0x1ec6 <_Z9dischargeff+0x43e>
	while (!BTN_MIDDLE_PRESSED);		//Debouncing
    1eca:	4c 99       	sbic	0x09, 4	; 9
    1ecc:	fe cf       	rjmp	.-4      	; 0x1eca <_Z9dischargeff+0x442>
	RED_LED_OFF;
    1ece:	5f 98       	cbi	0x0b, 7	; 11
    1ed0:	2a c0       	rjmp	.+84     	; 0x1f26 <_Z9dischargeff+0x49e>
	 for (uint8_t i = 0; i < 255; i++)
	 {
		 batteryCurrent = measureDischargingCurrent();
		 if ((batteryCurrent < maxCurrent) && (LOAD_PWM < 0xFF))
		 {
			 LOAD_PWM++;
    1ed2:	87 b5       	in	r24, 0x27	; 39
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	87 bd       	out	0x27, r24	; 39
    1ed8:	6e ce       	rjmp	.-804    	; 0x1bb6 <_Z9dischargeff+0x12e>
		 }
		 else if ((batteryCurrent > maxCurrent) && (LOAD_PWM > 0x00))
    1eda:	a7 01       	movw	r20, r14
    1edc:	96 01       	movw	r18, r12
    1ede:	64 2d       	mov	r22, r4
    1ee0:	75 2d       	mov	r23, r5
    1ee2:	86 2d       	mov	r24, r6
    1ee4:	97 2d       	mov	r25, r7
    1ee6:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	0c f4       	brge	.+2      	; 0x1ef0 <_Z9dischargeff+0x468>
    1eee:	60 ce       	rjmp	.-832    	; 0x1bb0 <_Z9dischargeff+0x128>
    1ef0:	62 ce       	rjmp	.-828    	; 0x1bb6 <_Z9dischargeff+0x12e>
		 {
			 LOAD_PWM--;
    1ef2:	87 b5       	in	r24, 0x27	; 39
    1ef4:	81 50       	subi	r24, 0x01	; 1
    1ef6:	87 bd       	out	0x27, r24	; 39
    1ef8:	5e ce       	rjmp	.-836    	; 0x1bb6 <_Z9dischargeff+0x12e>

			 batteryCurrent = measureDischargingCurrent();
			 //load adjusting routine
			 if ((batteryCurrent < maxCurrent) && (LOAD_PWM < 0xFF))
			 {
				 LOAD_PWM++;
    1efa:	87 b5       	in	r24, 0x27	; 39
    1efc:	8f 5f       	subi	r24, 0xFF	; 255
    1efe:	87 bd       	out	0x27, r24	; 39
    1f00:	ae ce       	rjmp	.-676    	; 0x1c5e <_Z9dischargeff+0x1d6>
			 }
			 else if ((batteryCurrent > maxCurrent) && (LOAD_PWM > 0x00))
    1f02:	2a 2d       	mov	r18, r10
    1f04:	3b 2d       	mov	r19, r11
    1f06:	40 2f       	mov	r20, r16
    1f08:	51 2f       	mov	r21, r17
    1f0a:	62 2d       	mov	r22, r2
    1f0c:	73 2d       	mov	r23, r3
    1f0e:	84 2d       	mov	r24, r4
    1f10:	95 2d       	mov	r25, r5
    1f12:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	0c f4       	brge	.+2      	; 0x1f1c <_Z9dischargeff+0x494>
    1f1a:	9e ce       	rjmp	.-708    	; 0x1c58 <_Z9dischargeff+0x1d0>
    1f1c:	a0 ce       	rjmp	.-704    	; 0x1c5e <_Z9dischargeff+0x1d6>
			 {
				 LOAD_PWM--;
    1f1e:	87 b5       	in	r24, 0x27	; 39
    1f20:	81 50       	subi	r24, 0x01	; 1
    1f22:	87 bd       	out	0x27, r24	; 39
    1f24:	9c ce       	rjmp	.-712    	; 0x1c5e <_Z9dischargeff+0x1d6>

	while (BTN_MIDDLE_PRESSED);
	while (!BTN_MIDDLE_PRESSED);		//Debouncing
	RED_LED_OFF;

 }
    1f26:	64 96       	adiw	r28, 0x14	; 20
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	df 90       	pop	r13
    1f40:	cf 90       	pop	r12
    1f42:	bf 90       	pop	r11
    1f44:	af 90       	pop	r10
    1f46:	9f 90       	pop	r9
    1f48:	8f 90       	pop	r8
    1f4a:	7f 90       	pop	r7
    1f4c:	6f 90       	pop	r6
    1f4e:	5f 90       	pop	r5
    1f50:	4f 90       	pop	r4
    1f52:	3f 90       	pop	r3
    1f54:	2f 90       	pop	r2
    1f56:	08 95       	ret

00001f58 <_Z15constantVoltagef>:

void constantVoltage(float voltage)
{
    1f58:	2f 92       	push	r2
    1f5a:	3f 92       	push	r3
    1f5c:	4f 92       	push	r4
    1f5e:	5f 92       	push	r5
    1f60:	6f 92       	push	r6
    1f62:	7f 92       	push	r7
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
	while (BTN_MIDDLE_PRESSED);		//debouncing from menu
    1f74:	4c 9b       	sbis	0x09, 4	; 9
    1f76:	fe cf       	rjmp	.-4      	; 0x1f74 <_Z15constantVoltagef+0x1c>

	float batteryVoltage, batteryCurrent;
	PWM_SUPPLY_MODE;
    1f78:	23 e2       	ldi	r18, 0x23	; 35
    1f7a:	24 bd       	out	0x24, r18	; 36
	PWM_START;
    1f7c:	25 b5       	in	r18, 0x25	; 37
    1f7e:	21 60       	ori	r18, 0x01	; 1
    1f80:	25 bd       	out	0x25, r18	; 37

	while (!BTN_MIDDLE_PRESSED)
    1f82:	4c 99       	sbic	0x09, 4	; 9
    1f84:	60 c0       	rjmp	.+192    	; 0x2046 <_Z15constantVoltagef+0xee>
    1f86:	6c c0       	rjmp	.+216    	; 0x2060 <_Z15constantVoltagef+0x108>
	{
		for (int i = 0; i < 256; i++)
		{
			batteryVoltage = measureBatteryVoltage();
    1f88:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
    1f8c:	16 2f       	mov	r17, r22
    1f8e:	07 2f       	mov	r16, r23
    1f90:	78 2e       	mov	r7, r24
    1f92:	69 2e       	mov	r6, r25
			if ((batteryVoltage < (voltage - 0.05)) && (SUPPLY_PWM < 0xFF))
    1f94:	2d ec       	ldi	r18, 0xCD	; 205
    1f96:	3c ec       	ldi	r19, 0xCC	; 204
    1f98:	4c e4       	ldi	r20, 0x4C	; 76
    1f9a:	5d e3       	ldi	r21, 0x3D	; 61
    1f9c:	c5 01       	movw	r24, r10
    1f9e:	b4 01       	movw	r22, r8
    1fa0:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
    1fa4:	9b 01       	movw	r18, r22
    1fa6:	ac 01       	movw	r20, r24
    1fa8:	61 2f       	mov	r22, r17
    1faa:	70 2f       	mov	r23, r16
    1fac:	87 2d       	mov	r24, r7
    1fae:	96 2d       	mov	r25, r6
    1fb0:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	0c f0       	brlt	.+2      	; 0x1fba <_Z15constantVoltagef+0x62>
    1fb8:	5f c0       	rjmp	.+190    	; 0x2078 <_Z15constantVoltagef+0x120>
    1fba:	88 b5       	in	r24, 0x28	; 40
    1fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <_Z15constantVoltagef+0x6a>
    1fc0:	57 c0       	rjmp	.+174    	; 0x2070 <_Z15constantVoltagef+0x118>
    1fc2:	5a c0       	rjmp	.+180    	; 0x2078 <_Z15constantVoltagef+0x120>
			{
				SUPPLY_PWM++;
			}
			else if ((batteryVoltage > (voltage + 0.05) && (SUPPLY_PWM > 0x00)))
    1fc4:	88 b5       	in	r24, 0x28	; 40
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	6b c0       	rjmp	.+214    	; 0x20a0 <_Z15constantVoltagef+0x148>
    1fca:	21 97       	sbiw	r28, 0x01	; 1
	PWM_SUPPLY_MODE;
	PWM_START;

	while (!BTN_MIDDLE_PRESSED)
	{
		for (int i = 0; i < 256; i++)
    1fcc:	e9 f6       	brne	.-70     	; 0x1f88 <_Z15constantVoltagef+0x30>
			{
				SUPPLY_PWM--;
			}
		}

		batteryCurrent = measureChargingCurrent();
    1fce:	0e 94 10 02 	call	0x420	; 0x420 <_Z22measureChargingCurrentv>
    1fd2:	46 2e       	mov	r4, r22
    1fd4:	57 2e       	mov	r5, r23
    1fd6:	c8 2f       	mov	r28, r24
    1fd8:	d9 2f       	mov	r29, r25
			lcd.lcd_clear();
    1fda:	8e e8       	ldi	r24, 0x8E	; 142
    1fdc:	96 e0       	ldi	r25, 0x06	; 6
    1fde:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>

		lcd.lcd_goto_xy(0, 0);
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	8e e8       	ldi	r24, 0x8E	; 142
    1fe8:	96 e0       	ldi	r25, 0x06	; 6
    1fea:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
		lcd.lcd_string_format("Vout: %5.2f \nIout: %5.2f \nP: %5.2f W\nPWM: %03d", batteryVoltage, batteryCurrent, (batteryVoltage * batteryCurrent), SUPPLY_PWM);
    1fee:	88 b5       	in	r24, 0x28	; 40
    1ff0:	1f 92       	push	r1
    1ff2:	8f 93       	push	r24
    1ff4:	24 2d       	mov	r18, r4
    1ff6:	35 2d       	mov	r19, r5
    1ff8:	4c 2f       	mov	r20, r28
    1ffa:	5d 2f       	mov	r21, r29
    1ffc:	61 2f       	mov	r22, r17
    1ffe:	70 2f       	mov	r23, r16
    2000:	87 2d       	mov	r24, r7
    2002:	96 2d       	mov	r25, r6
    2004:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
    200c:	7f 93       	push	r23
    200e:	6f 93       	push	r22
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	5f 92       	push	r5
    2016:	4f 92       	push	r4
    2018:	6f 92       	push	r6
    201a:	7f 92       	push	r7
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	3f 92       	push	r3
    2022:	2f 92       	push	r2
    2024:	8e e8       	ldi	r24, 0x8E	; 142
    2026:	96 e0       	ldi	r25, 0x06	; 6
    2028:	9f 93       	push	r25
    202a:	8f 93       	push	r24
    202c:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>

	float batteryVoltage, batteryCurrent;
	PWM_SUPPLY_MODE;
	PWM_START;

	while (!BTN_MIDDLE_PRESSED)
    2030:	8d b7       	in	r24, 0x3d	; 61
    2032:	9e b7       	in	r25, 0x3e	; 62
    2034:	42 96       	adiw	r24, 0x12	; 18
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	9e bf       	out	0x3e, r25	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	8d bf       	out	0x3d, r24	; 61
    2040:	4c 99       	sbic	0x09, 4	; 9
    2042:	09 c0       	rjmp	.+18     	; 0x2056 <_Z15constantVoltagef+0xfe>
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <_Z15constantVoltagef+0x108>
    2046:	4b 01       	movw	r8, r22
    2048:	5c 01       	movw	r10, r24

		batteryCurrent = measureChargingCurrent();
			lcd.lcd_clear();

		lcd.lcd_goto_xy(0, 0);
		lcd.lcd_string_format("Vout: %5.2f \nIout: %5.2f \nP: %5.2f W\nPWM: %03d", batteryVoltage, batteryCurrent, (batteryVoltage * batteryCurrent), SUPPLY_PWM);
    204a:	0f 2e       	mov	r0, r31
    204c:	f7 e1       	ldi	r31, 0x17	; 23
    204e:	2f 2e       	mov	r2, r31
    2050:	f5 e0       	ldi	r31, 0x05	; 5
    2052:	3f 2e       	mov	r3, r31
    2054:	f0 2d       	mov	r31, r0
	RED_LED_OFF;

 }

void constantVoltage(float voltage)
{
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	c9 2f       	mov	r28, r25
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	d8 2f       	mov	r29, r24
    205e:	94 cf       	rjmp	.-216    	; 0x1f88 <_Z15constantVoltagef+0x30>

		lcd.lcd_goto_xy(0, 0);
		lcd.lcd_string_format("Vout: %5.2f \nIout: %5.2f \nP: %5.2f W\nPWM: %03d", batteryVoltage, batteryCurrent, (batteryVoltage * batteryCurrent), SUPPLY_PWM);
	}

	PWM_STOP;
    2060:	85 b5       	in	r24, 0x25	; 37
    2062:	85 bd       	out	0x25, r24	; 37
	PWM_RESET;
    2064:	14 bc       	out	0x24, r1	; 36
	TIMER1_STOP;
    2066:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while (BTN_MIDDLE_PRESSED);
    206a:	4c 9b       	sbis	0x09, 4	; 9
    206c:	fe cf       	rjmp	.-4      	; 0x206a <_Z15constantVoltagef+0x112>
    206e:	1c c0       	rjmp	.+56     	; 0x20a8 <_Z15constantVoltagef+0x150>
		for (int i = 0; i < 256; i++)
		{
			batteryVoltage = measureBatteryVoltage();
			if ((batteryVoltage < (voltage - 0.05)) && (SUPPLY_PWM < 0xFF))
			{
				SUPPLY_PWM++;
    2070:	88 b5       	in	r24, 0x28	; 40
    2072:	8f 5f       	subi	r24, 0xFF	; 255
    2074:	88 bd       	out	0x28, r24	; 40
    2076:	a9 cf       	rjmp	.-174    	; 0x1fca <_Z15constantVoltagef+0x72>
			}
			else if ((batteryVoltage > (voltage + 0.05) && (SUPPLY_PWM > 0x00)))
    2078:	2d ec       	ldi	r18, 0xCD	; 205
    207a:	3c ec       	ldi	r19, 0xCC	; 204
    207c:	4c e4       	ldi	r20, 0x4C	; 76
    207e:	5d e3       	ldi	r21, 0x3D	; 61
    2080:	c5 01       	movw	r24, r10
    2082:	b4 01       	movw	r22, r8
    2084:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    2088:	9b 01       	movw	r18, r22
    208a:	ac 01       	movw	r20, r24
    208c:	61 2f       	mov	r22, r17
    208e:	70 2f       	mov	r23, r16
    2090:	87 2d       	mov	r24, r7
    2092:	96 2d       	mov	r25, r6
    2094:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    2098:	18 16       	cp	r1, r24
    209a:	0c f4       	brge	.+2      	; 0x209e <_Z15constantVoltagef+0x146>
    209c:	93 cf       	rjmp	.-218    	; 0x1fc4 <_Z15constantVoltagef+0x6c>
    209e:	95 cf       	rjmp	.-214    	; 0x1fca <_Z15constantVoltagef+0x72>
			{
				SUPPLY_PWM--;
    20a0:	88 b5       	in	r24, 0x28	; 40
    20a2:	81 50       	subi	r24, 0x01	; 1
    20a4:	88 bd       	out	0x28, r24	; 40
    20a6:	91 cf       	rjmp	.-222    	; 0x1fca <_Z15constantVoltagef+0x72>
	PWM_STOP;
	PWM_RESET;
	TIMER1_STOP;
	while (BTN_MIDDLE_PRESSED);
	
}
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	bf 90       	pop	r11
    20b2:	af 90       	pop	r10
    20b4:	9f 90       	pop	r9
    20b6:	8f 90       	pop	r8
    20b8:	7f 90       	pop	r7
    20ba:	6f 90       	pop	r6
    20bc:	5f 90       	pop	r5
    20be:	4f 90       	pop	r4
    20c0:	3f 90       	pop	r3
    20c2:	2f 90       	pop	r2
    20c4:	08 95       	ret

000020c6 <_Z15constantCurrentf>:

void constantCurrent(float current)
{
    20c6:	2f 92       	push	r2
    20c8:	3f 92       	push	r3
    20ca:	4f 92       	push	r4
    20cc:	5f 92       	push	r5
    20ce:	6f 92       	push	r6
    20d0:	7f 92       	push	r7
    20d2:	8f 92       	push	r8
    20d4:	9f 92       	push	r9
    20d6:	af 92       	push	r10
    20d8:	bf 92       	push	r11
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
	while (BTN_MIDDLE_PRESSED);		//debouncing from menu
    20e2:	4c 9b       	sbis	0x09, 4	; 9
    20e4:	fe cf       	rjmp	.-4      	; 0x20e2 <_Z15constantCurrentf+0x1c>
	
	float batteryVoltage, batteryCurrent;
	PWM_SUPPLY_MODE;
    20e6:	23 e2       	ldi	r18, 0x23	; 35
    20e8:	24 bd       	out	0x24, r18	; 36
	PWM_START;
    20ea:	25 b5       	in	r18, 0x25	; 37
    20ec:	21 60       	ori	r18, 0x01	; 1
    20ee:	25 bd       	out	0x25, r18	; 37

	while (!BTN_MIDDLE_PRESSED)
    20f0:	4c 99       	sbic	0x09, 4	; 9
    20f2:	60 c0       	rjmp	.+192    	; 0x21b4 <_Z15constantCurrentf+0xee>
    20f4:	6c c0       	rjmp	.+216    	; 0x21ce <_Z15constantCurrentf+0x108>
	{
		for (int i = 0; i < 256; i++)
		{
			batteryCurrent = measureChargingCurrent();
    20f6:	0e 94 10 02 	call	0x420	; 0x420 <_Z22measureChargingCurrentv>
    20fa:	16 2f       	mov	r17, r22
    20fc:	07 2f       	mov	r16, r23
    20fe:	78 2e       	mov	r7, r24
    2100:	69 2e       	mov	r6, r25
			if ((batteryCurrent < (current - 0.05)) && (SUPPLY_PWM < 0xFF))
    2102:	2d ec       	ldi	r18, 0xCD	; 205
    2104:	3c ec       	ldi	r19, 0xCC	; 204
    2106:	4c e4       	ldi	r20, 0x4C	; 76
    2108:	5d e3       	ldi	r21, 0x3D	; 61
    210a:	c5 01       	movw	r24, r10
    210c:	b4 01       	movw	r22, r8
    210e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
    2112:	9b 01       	movw	r18, r22
    2114:	ac 01       	movw	r20, r24
    2116:	61 2f       	mov	r22, r17
    2118:	70 2f       	mov	r23, r16
    211a:	87 2d       	mov	r24, r7
    211c:	96 2d       	mov	r25, r6
    211e:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
    2122:	88 23       	and	r24, r24
    2124:	0c f0       	brlt	.+2      	; 0x2128 <_Z15constantCurrentf+0x62>
    2126:	5f c0       	rjmp	.+190    	; 0x21e6 <_Z15constantCurrentf+0x120>
    2128:	88 b5       	in	r24, 0x28	; 40
    212a:	8f 3f       	cpi	r24, 0xFF	; 255
    212c:	09 f0       	breq	.+2      	; 0x2130 <_Z15constantCurrentf+0x6a>
    212e:	57 c0       	rjmp	.+174    	; 0x21de <_Z15constantCurrentf+0x118>
    2130:	5a c0       	rjmp	.+180    	; 0x21e6 <_Z15constantCurrentf+0x120>
			{
				SUPPLY_PWM++;
			}
			else if ((batteryCurrent > (current + 0.05) && (SUPPLY_PWM > 0x00)))
    2132:	88 b5       	in	r24, 0x28	; 40
    2134:	81 11       	cpse	r24, r1
    2136:	6b c0       	rjmp	.+214    	; 0x220e <_Z15constantCurrentf+0x148>
    2138:	21 97       	sbiw	r28, 0x01	; 1
	PWM_SUPPLY_MODE;
	PWM_START;

	while (!BTN_MIDDLE_PRESSED)
	{
		for (int i = 0; i < 256; i++)
    213a:	e9 f6       	brne	.-70     	; 0x20f6 <_Z15constantCurrentf+0x30>
			{
				SUPPLY_PWM--;
			}
		}

		batteryVoltage = measureBatteryVoltage();
    213c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
    2140:	46 2e       	mov	r4, r22
    2142:	57 2e       	mov	r5, r23
    2144:	c8 2f       	mov	r28, r24
    2146:	d9 2f       	mov	r29, r25
		lcd.lcd_clear();
    2148:	8e e8       	ldi	r24, 0x8E	; 142
    214a:	96 e0       	ldi	r25, 0x06	; 6
    214c:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>

		lcd.lcd_goto_xy(0, 0);
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	8e e8       	ldi	r24, 0x8E	; 142
    2156:	96 e0       	ldi	r25, 0x06	; 6
    2158:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
		lcd.lcd_string_format("Vout: %5.2f \nIout: %5.2f \nP: %5.2f W\nPWM: %03d", batteryVoltage, batteryCurrent, (batteryVoltage * batteryCurrent), SUPPLY_PWM);
    215c:	88 b5       	in	r24, 0x28	; 40
    215e:	1f 92       	push	r1
    2160:	8f 93       	push	r24
    2162:	24 2d       	mov	r18, r4
    2164:	35 2d       	mov	r19, r5
    2166:	4c 2f       	mov	r20, r28
    2168:	5d 2f       	mov	r21, r29
    216a:	61 2f       	mov	r22, r17
    216c:	70 2f       	mov	r23, r16
    216e:	87 2d       	mov	r24, r7
    2170:	96 2d       	mov	r25, r6
    2172:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
    2176:	9f 93       	push	r25
    2178:	8f 93       	push	r24
    217a:	7f 93       	push	r23
    217c:	6f 93       	push	r22
    217e:	6f 92       	push	r6
    2180:	7f 92       	push	r7
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	5f 92       	push	r5
    218c:	4f 92       	push	r4
    218e:	3f 92       	push	r3
    2190:	2f 92       	push	r2
    2192:	8e e8       	ldi	r24, 0x8E	; 142
    2194:	96 e0       	ldi	r25, 0x06	; 6
    2196:	9f 93       	push	r25
    2198:	8f 93       	push	r24
    219a:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>
	
	float batteryVoltage, batteryCurrent;
	PWM_SUPPLY_MODE;
	PWM_START;

	while (!BTN_MIDDLE_PRESSED)
    219e:	8d b7       	in	r24, 0x3d	; 61
    21a0:	9e b7       	in	r25, 0x3e	; 62
    21a2:	42 96       	adiw	r24, 0x12	; 18
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	9e bf       	out	0x3e, r25	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	8d bf       	out	0x3d, r24	; 61
    21ae:	4c 99       	sbic	0x09, 4	; 9
    21b0:	09 c0       	rjmp	.+18     	; 0x21c4 <_Z15constantCurrentf+0xfe>
    21b2:	0d c0       	rjmp	.+26     	; 0x21ce <_Z15constantCurrentf+0x108>
    21b4:	4b 01       	movw	r8, r22
    21b6:	5c 01       	movw	r10, r24

		batteryVoltage = measureBatteryVoltage();
		lcd.lcd_clear();

		lcd.lcd_goto_xy(0, 0);
		lcd.lcd_string_format("Vout: %5.2f \nIout: %5.2f \nP: %5.2f W\nPWM: %03d", batteryVoltage, batteryCurrent, (batteryVoltage * batteryCurrent), SUPPLY_PWM);
    21b8:	0f 2e       	mov	r0, r31
    21ba:	f7 e1       	ldi	r31, 0x17	; 23
    21bc:	2f 2e       	mov	r2, r31
    21be:	f5 e0       	ldi	r31, 0x05	; 5
    21c0:	3f 2e       	mov	r3, r31
    21c2:	f0 2d       	mov	r31, r0
	while (BTN_MIDDLE_PRESSED);
	
}

void constantCurrent(float current)
{
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	c9 2f       	mov	r28, r25
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	d8 2f       	mov	r29, r24
    21cc:	94 cf       	rjmp	.-216    	; 0x20f6 <_Z15constantCurrentf+0x30>

		lcd.lcd_goto_xy(0, 0);
		lcd.lcd_string_format("Vout: %5.2f \nIout: %5.2f \nP: %5.2f W\nPWM: %03d", batteryVoltage, batteryCurrent, (batteryVoltage * batteryCurrent), SUPPLY_PWM);
	}

	PWM_STOP;
    21ce:	85 b5       	in	r24, 0x25	; 37
    21d0:	85 bd       	out	0x25, r24	; 37
	PWM_RESET;
    21d2:	14 bc       	out	0x24, r1	; 36
	TIMER1_STOP;
    21d4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while (BTN_MIDDLE_PRESSED);
    21d8:	4c 9b       	sbis	0x09, 4	; 9
    21da:	fe cf       	rjmp	.-4      	; 0x21d8 <_Z15constantCurrentf+0x112>
    21dc:	1c c0       	rjmp	.+56     	; 0x2216 <_Z15constantCurrentf+0x150>
		for (int i = 0; i < 256; i++)
		{
			batteryCurrent = measureChargingCurrent();
			if ((batteryCurrent < (current - 0.05)) && (SUPPLY_PWM < 0xFF))
			{
				SUPPLY_PWM++;
    21de:	88 b5       	in	r24, 0x28	; 40
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	88 bd       	out	0x28, r24	; 40
    21e4:	a9 cf       	rjmp	.-174    	; 0x2138 <_Z15constantCurrentf+0x72>
			}
			else if ((batteryCurrent > (current + 0.05) && (SUPPLY_PWM > 0x00)))
    21e6:	2d ec       	ldi	r18, 0xCD	; 205
    21e8:	3c ec       	ldi	r19, 0xCC	; 204
    21ea:	4c e4       	ldi	r20, 0x4C	; 76
    21ec:	5d e3       	ldi	r21, 0x3D	; 61
    21ee:	c5 01       	movw	r24, r10
    21f0:	b4 01       	movw	r22, r8
    21f2:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    21f6:	9b 01       	movw	r18, r22
    21f8:	ac 01       	movw	r20, r24
    21fa:	61 2f       	mov	r22, r17
    21fc:	70 2f       	mov	r23, r16
    21fe:	87 2d       	mov	r24, r7
    2200:	96 2d       	mov	r25, r6
    2202:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    2206:	18 16       	cp	r1, r24
    2208:	0c f4       	brge	.+2      	; 0x220c <_Z15constantCurrentf+0x146>
    220a:	93 cf       	rjmp	.-218    	; 0x2132 <_Z15constantCurrentf+0x6c>
    220c:	95 cf       	rjmp	.-214    	; 0x2138 <_Z15constantCurrentf+0x72>
			{
				SUPPLY_PWM--;
    220e:	88 b5       	in	r24, 0x28	; 40
    2210:	81 50       	subi	r24, 0x01	; 1
    2212:	88 bd       	out	0x28, r24	; 40
    2214:	91 cf       	rjmp	.-222    	; 0x2138 <_Z15constantCurrentf+0x72>

	PWM_STOP;
	PWM_RESET;
	TIMER1_STOP;
	while (BTN_MIDDLE_PRESSED);
}
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	1f 91       	pop	r17
    221c:	0f 91       	pop	r16
    221e:	bf 90       	pop	r11
    2220:	af 90       	pop	r10
    2222:	9f 90       	pop	r9
    2224:	8f 90       	pop	r8
    2226:	7f 90       	pop	r7
    2228:	6f 90       	pop	r6
    222a:	5f 90       	pop	r5
    222c:	4f 90       	pop	r4
    222e:	3f 90       	pop	r3
    2230:	2f 90       	pop	r2
    2232:	08 95       	ret

00002234 <_Z10constantCVff>:

void constantCV(float voltage, float current)
{
    2234:	2f 92       	push	r2
    2236:	3f 92       	push	r3
    2238:	4f 92       	push	r4
    223a:	5f 92       	push	r5
    223c:	6f 92       	push	r6
    223e:	7f 92       	push	r7
    2240:	8f 92       	push	r8
    2242:	9f 92       	push	r9
    2244:	af 92       	push	r10
    2246:	bf 92       	push	r11
    2248:	cf 92       	push	r12
    224a:	df 92       	push	r13
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	2c 97       	sbiw	r28, 0x0c	; 12
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	69 83       	std	Y+1, r22	; 0x01
    226a:	7a 83       	std	Y+2, r23	; 0x02
    226c:	8b 83       	std	Y+3, r24	; 0x03
    226e:	9c 83       	std	Y+4, r25	; 0x04
    2270:	28 87       	std	Y+8, r18	; 0x08
    2272:	39 87       	std	Y+9, r19	; 0x09
    2274:	4a 87       	std	Y+10, r20	; 0x0a
    2276:	5b 87       	std	Y+11, r21	; 0x0b
	while (BTN_MIDDLE_PRESSED);		//debouncing from menu
    2278:	4c 9b       	sbis	0x09, 4	; 9
    227a:	fe cf       	rjmp	.-4      	; 0x2278 <_Z10constantCVff+0x44>
	
	float batteryVoltage, batteryCurrent;
	bool constV = true;
	PWM_SUPPLY_MODE;
    227c:	83 e2       	ldi	r24, 0x23	; 35
    227e:	84 bd       	out	0x24, r24	; 36
	PWM_START;
    2280:	85 b5       	in	r24, 0x25	; 37
    2282:	81 60       	ori	r24, 0x01	; 1
    2284:	85 bd       	out	0x25, r24	; 37
void constantCV(float voltage, float current)
{
	while (BTN_MIDDLE_PRESSED);		//debouncing from menu
	
	float batteryVoltage, batteryCurrent;
	bool constV = true;
    2286:	77 24       	eor	r7, r7
    2288:	73 94       	inc	r7
    228a:	41 2c       	mov	r4, r1
    228c:	66 24       	eor	r6, r6
    228e:	63 94       	inc	r6
		}

		
		lcd.lcd_clear();
		lcd.lcd_goto_xy(0, 0);
		lcd.lcd_string_format("Vout: %5.2f \nIout: %5.2f \nP: %5.2f W\nPWM: %03d\n", batteryVoltage, batteryCurrent, (batteryVoltage * batteryCurrent), SUPPLY_PWM);
    2290:	0f 2e       	mov	r0, r31
    2292:	f6 e4       	ldi	r31, 0x46	; 70
    2294:	2f 2e       	mov	r2, r31
    2296:	f5 e0       	ldi	r31, 0x05	; 5
    2298:	3f 2e       	mov	r3, r31
    229a:	f0 2d       	mov	r31, r0
    229c:	4d 82       	std	Y+5, r4	; 0x05
	float batteryVoltage, batteryCurrent;
	bool constV = true;
	PWM_SUPPLY_MODE;
	PWM_START;

	while (!BTN_MIDDLE_PRESSED)
    229e:	b4 c0       	rjmp	.+360    	; 0x2408 <_Z10constantCVff+0x1d4>
    22a0:	e1 2c       	mov	r14, r1
    22a2:	ff 24       	eor	r15, r15
    22a4:	f3 94       	inc	r15
    22a6:	88 84       	ldd	r8, Y+8	; 0x08
    22a8:	99 84       	ldd	r9, Y+9	; 0x09
    22aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ac:	bb 84       	ldd	r11, Y+11	; 0x0b
    22ae:	3f 82       	std	Y+7, r3	; 0x07
    22b0:	2e 82       	std	Y+6, r2	; 0x06
    22b2:	37 2c       	mov	r3, r7
	{
		for (int i = 0; i < 256; i++)
		{
			batteryCurrent = measureChargingCurrent();
    22b4:	0e 94 10 02 	call	0x420	; 0x420 <_Z22measureChargingCurrentv>
    22b8:	26 2e       	mov	r2, r22
    22ba:	7c 87       	std	Y+12, r23	; 0x0c
    22bc:	18 2f       	mov	r17, r24
    22be:	09 2f       	mov	r16, r25
			batteryVoltage = measureBatteryVoltage();
    22c0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z21measureBatteryVoltagev>
    22c4:	76 2e       	mov	r7, r22
    22c6:	57 2e       	mov	r5, r23
    22c8:	c8 2e       	mov	r12, r24
    22ca:	d9 2e       	mov	r13, r25

			if (batteryVoltage < voltage)
    22cc:	29 81       	ldd	r18, Y+1	; 0x01
    22ce:	3a 81       	ldd	r19, Y+2	; 0x02
    22d0:	4b 81       	ldd	r20, Y+3	; 0x03
    22d2:	5c 81       	ldd	r21, Y+4	; 0x04
    22d4:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
    22d8:	88 23       	and	r24, r24
    22da:	0c f4       	brge	.+2      	; 0x22de <_Z10constantCVff+0xaa>
    22dc:	9f c0       	rjmp	.+318    	; 0x241c <_Z10constantCVff+0x1e8>
			{
				constV = true;
			}
			if (batteryCurrent > current)
    22de:	a5 01       	movw	r20, r10
    22e0:	94 01       	movw	r18, r8
    22e2:	ac 85       	ldd	r26, Y+12	; 0x0c
    22e4:	62 2d       	mov	r22, r2
    22e6:	7a 2f       	mov	r23, r26
    22e8:	81 2f       	mov	r24, r17
    22ea:	90 2f       	mov	r25, r16
    22ec:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	0c f1       	brlt	.+66     	; 0x2336 <_Z10constantCVff+0x102>
			{
				constV = false;
			}

			if (constV)
    22f4:	33 20       	and	r3, r3
    22f6:	f9 f0       	breq	.+62     	; 0x2336 <_Z10constantCVff+0x102>
			{
				if ((batteryVoltage < (voltage - 0.05)) && (SUPPLY_PWM < 0xFF))
    22f8:	2d ec       	ldi	r18, 0xCD	; 205
    22fa:	3c ec       	ldi	r19, 0xCC	; 204
    22fc:	4c e4       	ldi	r20, 0x4C	; 76
    22fe:	5d e3       	ldi	r21, 0x3D	; 61
    2300:	69 81       	ldd	r22, Y+1	; 0x01
    2302:	7a 81       	ldd	r23, Y+2	; 0x02
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
    230c:	9b 01       	movw	r18, r22
    230e:	ac 01       	movw	r20, r24
    2310:	67 2d       	mov	r22, r7
    2312:	75 2d       	mov	r23, r5
    2314:	8c 2d       	mov	r24, r12
    2316:	9d 2d       	mov	r25, r13
    2318:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
    231c:	88 23       	and	r24, r24
    231e:	0c f0       	brlt	.+2      	; 0x2322 <_Z10constantCVff+0xee>
    2320:	8f c0       	rjmp	.+286    	; 0x2440 <_Z10constantCVff+0x20c>
    2322:	88 b5       	in	r24, 0x28	; 40
    2324:	8f 3f       	cpi	r24, 0xFF	; 255
    2326:	09 f0       	breq	.+2      	; 0x232a <_Z10constantCVff+0xf6>
    2328:	86 c0       	rjmp	.+268    	; 0x2436 <_Z10constantCVff+0x202>
    232a:	8a c0       	rjmp	.+276    	; 0x2440 <_Z10constantCVff+0x20c>
				{
					SUPPLY_PWM++;
				}
				else if ((batteryVoltage > (voltage + 0.05) && (SUPPLY_PWM > 0x00)))
    232c:	88 b5       	in	r24, 0x28	; 40
    232e:	81 11       	cpse	r24, r1
    2330:	9e c0       	rjmp	.+316    	; 0x246e <_Z10constantCVff+0x23a>
    2332:	36 2c       	mov	r3, r6
    2334:	1d c0       	rjmp	.+58     	; 0x2370 <_Z10constantCVff+0x13c>
					SUPPLY_PWM--;
				}
			}
			else
			{
				if ((batteryCurrent < (current - 0.05)) && (SUPPLY_PWM < 0xFF))
    2336:	2d ec       	ldi	r18, 0xCD	; 205
    2338:	3c ec       	ldi	r19, 0xCC	; 204
    233a:	4c e4       	ldi	r20, 0x4C	; 76
    233c:	5d e3       	ldi	r21, 0x3D	; 61
    233e:	c5 01       	movw	r24, r10
    2340:	b4 01       	movw	r22, r8
    2342:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__subsf3>
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	ac 85       	ldd	r26, Y+12	; 0x0c
    234c:	62 2d       	mov	r22, r2
    234e:	7a 2f       	mov	r23, r26
    2350:	81 2f       	mov	r24, r17
    2352:	90 2f       	mov	r25, r16
    2354:	0e 94 46 14 	call	0x288c	; 0x288c <__cmpsf2>
    2358:	88 23       	and	r24, r24
    235a:	0c f0       	brlt	.+2      	; 0x235e <_Z10constantCVff+0x12a>
    235c:	92 c0       	rjmp	.+292    	; 0x2482 <_Z10constantCVff+0x24e>
    235e:	88 b5       	in	r24, 0x28	; 40
    2360:	8f 3f       	cpi	r24, 0xFF	; 255
    2362:	09 f0       	breq	.+2      	; 0x2366 <_Z10constantCVff+0x132>
    2364:	89 c0       	rjmp	.+274    	; 0x2478 <_Z10constantCVff+0x244>
    2366:	8d c0       	rjmp	.+282    	; 0x2482 <_Z10constantCVff+0x24e>
				{
					SUPPLY_PWM++;
				}
				else if ((batteryCurrent > (current + 0.05) && (SUPPLY_PWM > 0x00)))
    2368:	88 b5       	in	r24, 0x28	; 40
    236a:	81 11       	cpse	r24, r1
    236c:	a0 c0       	rjmp	.+320    	; 0x24ae <_Z10constantCVff+0x27a>
    236e:	3d 80       	ldd	r3, Y+5	; 0x05
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	e8 1a       	sub	r14, r24
    2374:	f1 08       	sbc	r15, r1
	PWM_SUPPLY_MODE;
	PWM_START;

	while (!BTN_MIDDLE_PRESSED)
	{
		for (int i = 0; i < 256; i++)
    2376:	09 f0       	breq	.+2      	; 0x237a <_Z10constantCVff+0x146>
    2378:	9d cf       	rjmp	.-198    	; 0x22b4 <_Z10constantCVff+0x80>
    237a:	bc 2c       	mov	r11, r12
    237c:	ad 2c       	mov	r10, r13
    237e:	d7 2c       	mov	r13, r7
    2380:	73 2c       	mov	r7, r3
    2382:	f2 2c       	mov	r15, r2
    2384:	ec 84       	ldd	r14, Y+12	; 0x0c
    2386:	2e 80       	ldd	r2, Y+6	; 0x06
    2388:	3f 80       	ldd	r3, Y+7	; 0x07
			}
	
		}

		
		lcd.lcd_clear();
    238a:	8e e8       	ldi	r24, 0x8E	; 142
    238c:	96 e0       	ldi	r25, 0x06	; 6
    238e:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
		lcd.lcd_goto_xy(0, 0);
    2392:	44 2d       	mov	r20, r4
    2394:	64 2d       	mov	r22, r4
    2396:	8e e8       	ldi	r24, 0x8E	; 142
    2398:	96 e0       	ldi	r25, 0x06	; 6
    239a:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN8LCD_511011lcd_goto_xyEhh>
		lcd.lcd_string_format("Vout: %5.2f \nIout: %5.2f \nP: %5.2f W\nPWM: %03d\n", batteryVoltage, batteryCurrent, (batteryVoltage * batteryCurrent), SUPPLY_PWM);
    239e:	88 b5       	in	r24, 0x28	; 40
    23a0:	1f 92       	push	r1
    23a2:	8f 93       	push	r24
    23a4:	2f 2d       	mov	r18, r15
    23a6:	3e 2d       	mov	r19, r14
    23a8:	41 2f       	mov	r20, r17
    23aa:	50 2f       	mov	r21, r16
    23ac:	6d 2d       	mov	r22, r13
    23ae:	75 2d       	mov	r23, r5
    23b0:	8b 2d       	mov	r24, r11
    23b2:	9a 2d       	mov	r25, r10
    23b4:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__mulsf3>
    23b8:	9f 93       	push	r25
    23ba:	8f 93       	push	r24
    23bc:	7f 93       	push	r23
    23be:	6f 93       	push	r22
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	af 92       	push	r10
    23ca:	bf 92       	push	r11
    23cc:	5f 92       	push	r5
    23ce:	df 92       	push	r13
    23d0:	3f 92       	push	r3
    23d2:	2f 92       	push	r2
    23d4:	8e e8       	ldi	r24, 0x8E	; 142
    23d6:	96 e0       	ldi	r25, 0x06	; 6
    23d8:	9f 93       	push	r25
    23da:	8f 93       	push	r24
    23dc:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN8LCD_511017lcd_string_formatEPcz>

		if (constV)
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	77 20       	and	r7, r7
    23ec:	39 f0       	breq	.+14     	; 0x23fc <_Z10constantCVff+0x1c8>
		{
			lcd.lcd_str("CONST V");
    23ee:	6c e2       	ldi	r22, 0x2C	; 44
    23f0:	72 e0       	ldi	r23, 0x02	; 2
    23f2:	8e e8       	ldi	r24, 0x8E	; 142
    23f4:	96 e0       	ldi	r25, 0x06	; 6
    23f6:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
    23fa:	06 c0       	rjmp	.+12     	; 0x2408 <_Z10constantCVff+0x1d4>
		}
		else
		{
			lcd.lcd_str("CONST C");
    23fc:	64 e2       	ldi	r22, 0x24	; 36
    23fe:	72 e0       	ldi	r23, 0x02	; 2
    2400:	8e e8       	ldi	r24, 0x8E	; 142
    2402:	96 e0       	ldi	r25, 0x06	; 6
    2404:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
	float batteryVoltage, batteryCurrent;
	bool constV = true;
	PWM_SUPPLY_MODE;
	PWM_START;

	while (!BTN_MIDDLE_PRESSED)
    2408:	4c 99       	sbic	0x09, 4	; 9
    240a:	4a cf       	rjmp	.-364    	; 0x22a0 <_Z10constantCVff+0x6c>
		{
			lcd.lcd_str("CONST C");
		}
	}

	PWM_STOP;
    240c:	85 b5       	in	r24, 0x25	; 37
    240e:	85 bd       	out	0x25, r24	; 37
	PWM_RESET;
    2410:	14 bc       	out	0x24, r1	; 36
	TIMER1_STOP;
    2412:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	while (BTN_MIDDLE_PRESSED);
    2416:	4c 9b       	sbis	0x09, 4	; 9
    2418:	fe cf       	rjmp	.-4      	; 0x2416 <_Z10constantCVff+0x1e2>
    241a:	4e c0       	rjmp	.+156    	; 0x24b8 <_Z10constantCVff+0x284>

			if (batteryVoltage < voltage)
			{
				constV = true;
			}
			if (batteryCurrent > current)
    241c:	a5 01       	movw	r20, r10
    241e:	94 01       	movw	r18, r8
    2420:	ac 85       	ldd	r26, Y+12	; 0x0c
    2422:	62 2d       	mov	r22, r2
    2424:	7a 2f       	mov	r23, r26
    2426:	81 2f       	mov	r24, r17
    2428:	90 2f       	mov	r25, r16
    242a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    242e:	18 16       	cp	r1, r24
    2430:	0c f4       	brge	.+2      	; 0x2434 <_Z10constantCVff+0x200>
    2432:	81 cf       	rjmp	.-254    	; 0x2336 <_Z10constantCVff+0x102>
    2434:	61 cf       	rjmp	.-318    	; 0x22f8 <_Z10constantCVff+0xc4>

			if (constV)
			{
				if ((batteryVoltage < (voltage - 0.05)) && (SUPPLY_PWM < 0xFF))
				{
					SUPPLY_PWM++;
    2436:	88 b5       	in	r24, 0x28	; 40
    2438:	8f 5f       	subi	r24, 0xFF	; 255
    243a:	88 bd       	out	0x28, r24	; 40
    243c:	36 2c       	mov	r3, r6
    243e:	98 cf       	rjmp	.-208    	; 0x2370 <_Z10constantCVff+0x13c>
				}
				else if ((batteryVoltage > (voltage + 0.05) && (SUPPLY_PWM > 0x00)))
    2440:	2d ec       	ldi	r18, 0xCD	; 205
    2442:	3c ec       	ldi	r19, 0xCC	; 204
    2444:	4c e4       	ldi	r20, 0x4C	; 76
    2446:	5d e3       	ldi	r21, 0x3D	; 61
    2448:	69 81       	ldd	r22, Y+1	; 0x01
    244a:	7a 81       	ldd	r23, Y+2	; 0x02
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    2454:	9b 01       	movw	r18, r22
    2456:	ac 01       	movw	r20, r24
    2458:	67 2d       	mov	r22, r7
    245a:	75 2d       	mov	r23, r5
    245c:	8c 2d       	mov	r24, r12
    245e:	9d 2d       	mov	r25, r13
    2460:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    2464:	18 16       	cp	r1, r24
    2466:	0c f4       	brge	.+2      	; 0x246a <_Z10constantCVff+0x236>
    2468:	61 cf       	rjmp	.-318    	; 0x232c <_Z10constantCVff+0xf8>
    246a:	36 2c       	mov	r3, r6
    246c:	81 cf       	rjmp	.-254    	; 0x2370 <_Z10constantCVff+0x13c>
				{
					SUPPLY_PWM--;
    246e:	88 b5       	in	r24, 0x28	; 40
    2470:	81 50       	subi	r24, 0x01	; 1
    2472:	88 bd       	out	0x28, r24	; 40
    2474:	36 2c       	mov	r3, r6
    2476:	7c cf       	rjmp	.-264    	; 0x2370 <_Z10constantCVff+0x13c>
			}
			else
			{
				if ((batteryCurrent < (current - 0.05)) && (SUPPLY_PWM < 0xFF))
				{
					SUPPLY_PWM++;
    2478:	88 b5       	in	r24, 0x28	; 40
    247a:	8f 5f       	subi	r24, 0xFF	; 255
    247c:	88 bd       	out	0x28, r24	; 40
    247e:	3d 80       	ldd	r3, Y+5	; 0x05
    2480:	77 cf       	rjmp	.-274    	; 0x2370 <_Z10constantCVff+0x13c>
				}
				else if ((batteryCurrent > (current + 0.05) && (SUPPLY_PWM > 0x00)))
    2482:	2d ec       	ldi	r18, 0xCD	; 205
    2484:	3c ec       	ldi	r19, 0xCC	; 204
    2486:	4c e4       	ldi	r20, 0x4C	; 76
    2488:	5d e3       	ldi	r21, 0x3D	; 61
    248a:	c5 01       	movw	r24, r10
    248c:	b4 01       	movw	r22, r8
    248e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__addsf3>
    2492:	9b 01       	movw	r18, r22
    2494:	ac 01       	movw	r20, r24
    2496:	ac 85       	ldd	r26, Y+12	; 0x0c
    2498:	62 2d       	mov	r22, r2
    249a:	7a 2f       	mov	r23, r26
    249c:	81 2f       	mov	r24, r17
    249e:	90 2f       	mov	r25, r16
    24a0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__gesf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	0c f4       	brge	.+2      	; 0x24aa <_Z10constantCVff+0x276>
    24a8:	5f cf       	rjmp	.-322    	; 0x2368 <_Z10constantCVff+0x134>
    24aa:	3d 80       	ldd	r3, Y+5	; 0x05
    24ac:	61 cf       	rjmp	.-318    	; 0x2370 <_Z10constantCVff+0x13c>
				{
					SUPPLY_PWM--;
    24ae:	88 b5       	in	r24, 0x28	; 40
    24b0:	81 50       	subi	r24, 0x01	; 1
    24b2:	88 bd       	out	0x28, r24	; 40
    24b4:	3d 80       	ldd	r3, Y+5	; 0x05
    24b6:	5c cf       	rjmp	.-328    	; 0x2370 <_Z10constantCVff+0x13c>
	PWM_STOP;
	PWM_RESET;
	TIMER1_STOP;

	while (BTN_MIDDLE_PRESSED);
    24b8:	2c 96       	adiw	r28, 0x0c	; 12
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
    24d8:	9f 90       	pop	r9
    24da:	8f 90       	pop	r8
    24dc:	7f 90       	pop	r7
    24de:	6f 90       	pop	r6
    24e0:	5f 90       	pop	r5
    24e2:	4f 90       	pop	r4
    24e4:	3f 90       	pop	r3
    24e6:	2f 90       	pop	r2
    24e8:	08 95       	ret

000024ea <main>:
char* chemistryMenuName = "Battery type:";
char* chemistryMenuItems[5] = {"Li-Ion/SLA", "NiCd/NiMH", "CONST V", "CONST C", "BACK TO MENU"};

int main(void)
{
    PORTD |= (1<<PORTD2)|(1<<PORTD3)|(1<<PORTD4);	//button pull up resistors 
    24ea:	8b b1       	in	r24, 0x0b	; 11
    24ec:	8c 61       	ori	r24, 0x1C	; 28
    24ee:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<PORTB1)|(1<<PORTB2);
    24f0:	85 b1       	in	r24, 0x05	; 5
    24f2:	86 60       	ori	r24, 0x06	; 6
    24f4:	85 b9       	out	0x05, r24	; 5

	DDRD |= (1<<DDD7);				//LED pins as outputs
    24f6:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1<<DDB0);	
    24f8:	20 9a       	sbi	0x04, 0	; 4

	DDRD |= (1<<DDD5)|(1<<DDD6);	//pwm pins as outputs
    24fa:	8a b1       	in	r24, 0x0a	; 10
    24fc:	80 66       	ori	r24, 0x60	; 96
    24fe:	8a b9       	out	0x0a, r24	; 10

	DDRC |= (1<<DDC4)|(1<<DDC5);	//UART and fan pins as outputs
    2500:	87 b1       	in	r24, 0x07	; 7
    2502:	80 63       	ori	r24, 0x30	; 48
    2504:	87 b9       	out	0x07, r24	; 7
	UART_PIN_HIGH;
    2506:	44 9a       	sbi	0x08, 4	; 8

	//setting up timer 1
	TCNT1 = 0;
    2508:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    250c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 19531;				//set the overflow value (overflow each second)
    2510:	8b e4       	ldi	r24, 0x4B	; 75
    2512:	9c e4       	ldi	r25, 0x4C	; 76
    2514:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2518:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= (1<<OCIE1A);		//enable CTC interrupt
    251c:	ef e6       	ldi	r30, 0x6F	; 111
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	82 60       	ori	r24, 0x02	; 2
    2524:	80 83       	st	Z, r24
	sei();						//globally enable interrupts
    2526:	78 94       	sei

	ADC_setup();				
    2528:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_Z9ADC_setupv>
	lcdInit();					
    252c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_Z7lcdInitv>

	while (1) 
    {
		lcd.lcd_clear();
    2530:	8e e8       	ldi	r24, 0x8E	; 142
    2532:	96 e0       	ldi	r25, 0x06	; 6
    2534:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
		float maxC, maxV, disC, minV;

		switch (drawSelectionMenu(mainMenuName, mainMenuItems))
    2538:	6c e0       	ldi	r22, 0x0C	; 12
    253a:	71 e0       	ldi	r23, 0x01	; 1
    253c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mainMenuName>
    2540:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <mainMenuName+0x1>
    2544:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_Z17drawSelectionMenuPcPS_>
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	09 f4       	brne	.+2      	; 0x254e <main+0x64>
    254c:	92 c0       	rjmp	.+292    	; 0x2672 <main+0x188>
    254e:	30 f4       	brcc	.+12     	; 0x255c <main+0x72>
    2550:	88 23       	and	r24, r24
    2552:	59 f0       	breq	.+22     	; 0x256a <main+0x80>
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	09 f4       	brne	.+2      	; 0x255a <main+0x70>
    2558:	73 c0       	rjmp	.+230    	; 0x2640 <main+0x156>
    255a:	ea cf       	rjmp	.-44     	; 0x2530 <main+0x46>
    255c:	83 30       	cpi	r24, 0x03	; 3
    255e:	09 f4       	brne	.+2      	; 0x2562 <main+0x78>
    2560:	a1 c0       	rjmp	.+322    	; 0x26a4 <main+0x1ba>
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	09 f4       	brne	.+2      	; 0x2568 <main+0x7e>
    2566:	b3 c0       	rjmp	.+358    	; 0x26ce <main+0x1e4>
    2568:	e3 cf       	rjmp	.-58     	; 0x2530 <main+0x46>
		{
			case 0:		//charge
				uint8_t cells, hrs;
				switch(drawSelectionMenu(chemistryMenuName, chemistryMenuItems))
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	71 e0       	ldi	r23, 0x01	; 1
    256e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <chemistryMenuName>
    2572:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <chemistryMenuName+0x1>
    2576:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_Z17drawSelectionMenuPcPS_>
    257a:	81 30       	cpi	r24, 0x01	; 1
    257c:	09 f1       	breq	.+66     	; 0x25c0 <main+0xd6>
    257e:	38 f0       	brcs	.+14     	; 0x258e <main+0xa4>
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	09 f4       	brne	.+2      	; 0x2586 <main+0x9c>
    2584:	47 c0       	rjmp	.+142    	; 0x2614 <main+0x12a>
    2586:	83 30       	cpi	r24, 0x03	; 3
    2588:	09 f4       	brne	.+2      	; 0x258c <main+0xa2>
    258a:	4f c0       	rjmp	.+158    	; 0x262a <main+0x140>
    258c:	d1 cf       	rjmp	.-94     	; 0x2530 <main+0x46>
				{
					case 0:		//Li-Ion/SLA
						maxC = drawNumericalMenu("max charging\ncurrent [A]", 1.00);
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	60 e8       	ldi	r22, 0x80	; 128
    2594:	7f e3       	ldi	r23, 0x3F	; 63
    2596:	86 e7       	ldi	r24, 0x76	; 118
    2598:	95 e0       	ldi	r25, 0x05	; 5
    259a:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    259e:	6b 01       	movw	r12, r22
    25a0:	7c 01       	movw	r14, r24
						maxV = drawNumericalMenu("max battery\nvoltage [V]", 4.20);
    25a2:	46 e6       	ldi	r20, 0x66	; 102
    25a4:	56 e6       	ldi	r21, 0x66	; 102
    25a6:	66 e8       	ldi	r22, 0x86	; 134
    25a8:	70 e4       	ldi	r23, 0x40	; 64
    25aa:	8f e8       	ldi	r24, 0x8F	; 143
    25ac:	95 e0       	ldi	r25, 0x05	; 5
    25ae:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    25b2:	9b 01       	movw	r18, r22
    25b4:	ac 01       	movw	r20, r24
						constantCVCharge(maxC, maxV);
    25b6:	c7 01       	movw	r24, r14
    25b8:	b6 01       	movw	r22, r12
    25ba:	0e 94 a3 02 	call	0x546	; 0x546 <_Z16constantCVChargeff>
						break;
    25be:	b8 cf       	rjmp	.-144    	; 0x2530 <main+0x46>
					case 1:		//NiCd/NiMH
						maxC = drawNumericalMenu("charging\ncurrent [A]", 1.00);
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	60 e8       	ldi	r22, 0x80	; 128
    25c6:	7f e3       	ldi	r23, 0x3F	; 63
    25c8:	8a e7       	ldi	r24, 0x7A	; 122
    25ca:	95 e0       	ldi	r25, 0x05	; 5
    25cc:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    25d0:	6b 01       	movw	r12, r22
    25d2:	7c 01       	movw	r14, r24
						cells = drawNumericalMenu("# of\ncells", 1.00);
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	60 e8       	ldi	r22, 0x80	; 128
    25da:	7f e3       	ldi	r23, 0x3F	; 63
    25dc:	87 ea       	ldi	r24, 0xA7	; 167
    25de:	95 e0       	ldi	r25, 0x05	; 5
    25e0:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    25e4:	4b 01       	movw	r8, r22
    25e6:	5c 01       	movw	r10, r24
						hrs = drawNumericalMenu("charging\ntime [Hrs]", 7);
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	60 ee       	ldi	r22, 0xE0	; 224
    25ee:	70 e4       	ldi	r23, 0x40	; 64
    25f0:	82 eb       	ldi	r24, 0xB2	; 178
    25f2:	95 e0       	ldi	r25, 0x05	; 5
    25f4:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    25f8:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
    25fc:	c6 2f       	mov	r28, r22
						maxV = drawNumericalMenu("max battery\nvoltage [V]", 4.20);
						constantCVCharge(maxC, maxV);
						break;
					case 1:		//NiCd/NiMH
						maxC = drawNumericalMenu("charging\ncurrent [A]", 1.00);
						cells = drawNumericalMenu("# of\ncells", 1.00);
    25fe:	c5 01       	movw	r24, r10
    2600:	b4 01       	movw	r22, r8
    2602:	0e 94 bd 14 	call	0x297a	; 0x297a <__fixunssfsi>
    2606:	46 2f       	mov	r20, r22
						hrs = drawNumericalMenu("charging\ntime [Hrs]", 7);
						chargeNiMH(maxC, cells, hrs);
    2608:	2c 2f       	mov	r18, r28
    260a:	c7 01       	movw	r24, r14
    260c:	b6 01       	movw	r22, r12
    260e:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z10chargeNiMHfhh>
						break;
    2612:	8e cf       	rjmp	.-228    	; 0x2530 <main+0x46>
					case 2:		//constant voltage
						maxV = drawNumericalMenu("output\nvoltage [V]", 5.00);
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	60 ea       	ldi	r22, 0xA0	; 160
    261a:	70 e4       	ldi	r23, 0x40	; 64
    261c:	86 ec       	ldi	r24, 0xC6	; 198
    261e:	95 e0       	ldi	r25, 0x05	; 5
    2620:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
						constantVoltage(maxV);
    2624:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_Z15constantVoltagef>
						break;
    2628:	83 cf       	rjmp	.-250    	; 0x2530 <main+0x46>
					case 3:		//constant current
						maxC = drawNumericalMenu("output\ncurrent [A]", 1.00);
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	60 e8       	ldi	r22, 0x80	; 128
    2630:	7f e3       	ldi	r23, 0x3F	; 63
    2632:	89 ed       	ldi	r24, 0xD9	; 217
    2634:	95 e0       	ldi	r25, 0x05	; 5
    2636:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
						constantCurrent(maxC);
    263a:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_Z15constantCurrentf>
						break;
    263e:	78 cf       	rjmp	.-272    	; 0x2530 <main+0x46>
					case 4:		//return
						break;
				}
				break;
			case 1:		//discharge
				disC = drawNumericalMenu("discharging\ncurrent [A]", 1.00);
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	60 e8       	ldi	r22, 0x80	; 128
    2646:	7f e3       	ldi	r23, 0x3F	; 63
    2648:	8c ee       	ldi	r24, 0xEC	; 236
    264a:	95 e0       	ldi	r25, 0x05	; 5
    264c:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    2650:	6b 01       	movw	r12, r22
    2652:	7c 01       	movw	r14, r24
				minV = drawNumericalMenu("minimal\nvoltage [A]", 1.00);
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	60 e8       	ldi	r22, 0x80	; 128
    265a:	7f e3       	ldi	r23, 0x3F	; 63
    265c:	84 e0       	ldi	r24, 0x04	; 4
    265e:	96 e0       	ldi	r25, 0x06	; 6
    2660:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    2664:	9b 01       	movw	r18, r22
    2666:	ac 01       	movw	r20, r24
				discharge(disC, minV);
    2668:	c7 01       	movw	r24, r14
    266a:	b6 01       	movw	r22, r12
    266c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <_Z9dischargeff>
				break;
    2670:	5f cf       	rjmp	.-322    	; 0x2530 <main+0x46>
			case 2:		//power supply - constant current and voltage limited power supply (WARNING - long 
				maxV = drawNumericalMenu("output\nvoltage [V]", 5.00);
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	60 ea       	ldi	r22, 0xA0	; 160
    2678:	70 e4       	ldi	r23, 0x40	; 64
    267a:	86 ec       	ldi	r24, 0xC6	; 198
    267c:	95 e0       	ldi	r25, 0x05	; 5
    267e:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    2682:	6b 01       	movw	r12, r22
    2684:	7c 01       	movw	r14, r24
				maxC = drawNumericalMenu("current\nlimit [A]", 1.00);
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	60 e8       	ldi	r22, 0x80	; 128
    268c:	7f e3       	ldi	r23, 0x3F	; 63
    268e:	88 e1       	ldi	r24, 0x18	; 24
    2690:	96 e0       	ldi	r25, 0x06	; 6
    2692:	0e 94 80 0c 	call	0x1900	; 0x1900 <_Z17drawNumericalMenuPcf>
    2696:	9b 01       	movw	r18, r22
    2698:	ac 01       	movw	r20, r24
				constantCV(maxV, maxC);
    269a:	c7 01       	movw	r24, r14
    269c:	b6 01       	movw	r22, r12
    269e:	0e 94 1a 11 	call	0x2234	; 0x2234 <_Z10constantCVff>
				break;
    26a2:	46 cf       	rjmp	.-372    	; 0x2530 <main+0x46>
			case 3:		//about - just display a screen on the lcd
				lcd.lcd_clear();
    26a4:	8e e8       	ldi	r24, 0x8E	; 142
    26a6:	96 e0       	ldi	r25, 0x06	; 6
    26a8:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN8LCD_51109lcd_clearEv>
				lcd.lcd_goto_xy_exact(0, 0);
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	8e e8       	ldi	r24, 0x8E	; 142
    26b2:	96 e0       	ldi	r25, 0x06	; 6
    26b4:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN8LCD_511017lcd_goto_xy_exactEhh>
				lcd.lcd_str(" AVR Charger   by M. Danek  V1.10  (c)2016   madanek\n   post.cz");
    26b8:	6e e5       	ldi	r22, 0x5E	; 94
    26ba:	73 e0       	ldi	r23, 0x03	; 3
    26bc:	8e e8       	ldi	r24, 0x8E	; 142
    26be:	96 e0       	ldi	r25, 0x06	; 6
    26c0:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN8LCD_51107lcd_strEPc>
				while (!BTN_MIDDLE_PRESSED);
    26c4:	4c 99       	sbic	0x09, 4	; 9
    26c6:	fe cf       	rjmp	.-4      	; 0x26c4 <main+0x1da>
				while (BTN_MIDDLE_PRESSED);
    26c8:	4c 9b       	sbis	0x09, 4	; 9
    26ca:	fe cf       	rjmp	.-4      	; 0x26c8 <main+0x1de>
    26cc:	31 cf       	rjmp	.-414    	; 0x2530 <main+0x46>
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    26ce:	98 e0       	ldi	r25, 0x08	; 8
    26d0:	88 e1       	ldi	r24, 0x18	; 24
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	a8 95       	wdr
    26d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
				break;
			case 4:		//restart (set up a watchdog)
				wdt_enable(WDTO_15MS);
				while (1);
				break;
    26e2:	ff cf       	rjmp	.-2      	; 0x26e2 <main+0x1f8>

000026e4 <__vector_11>:
		}
    }
}

ISR(TIMER1_COMPA_vect)
{
    26e4:	1f 92       	push	r1
    26e6:	0f 92       	push	r0
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	0f 92       	push	r0
    26ec:	11 24       	eor	r1, r1
    26ee:	8f 93       	push	r24
	secondFlag = true;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <secondFlag>
}
    26f6:	8f 91       	pop	r24
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <_Z13uart_sendCharc>:
#include <util/delay.h>

//function for sending chars (the core of the whole library)
void uart_sendChar(char c)
{
	UART_PIN_LOW;
    2702:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2704:	4a e6       	ldi	r20, 0x6A	; 106
    2706:	4a 95       	dec	r20
    2708:	f1 f7       	brne	.-4      	; 0x2706 <_Z13uart_sendCharc+0x4>
    270a:	00 c0       	rjmp	.+0      	; 0x270c <_Z13uart_sendCharc+0xa>
	 _delay_us(UART_BAUDRATE_DELAY);		//sending at baud 57600
	 
	 for (int i = 0; i < 8; ++i)
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
	 {

		 if ((c >> i) & 1)
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	ac 01       	movw	r20, r24
    2714:	02 2e       	mov	r0, r18
    2716:	02 c0       	rjmp	.+4      	; 0x271c <_Z13uart_sendCharc+0x1a>
    2718:	55 95       	asr	r21
    271a:	47 95       	ror	r20
    271c:	0a 94       	dec	r0
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <_Z13uart_sendCharc+0x16>
    2720:	40 ff       	sbrs	r20, 0
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <_Z13uart_sendCharc+0x26>
		 {
			 UART_PIN_HIGH;
    2724:	44 9a       	sbi	0x08, 4	; 8
    2726:	01 c0       	rjmp	.+2      	; 0x272a <_Z13uart_sendCharc+0x28>
		 }
		 else
		 {
			 UART_PIN_LOW;
    2728:	44 98       	cbi	0x08, 4	; 8
    272a:	4a e6       	ldi	r20, 0x6A	; 106
    272c:	4a 95       	dec	r20
    272e:	f1 f7       	brne	.-4      	; 0x272c <_Z13uart_sendCharc+0x2a>
    2730:	00 c0       	rjmp	.+0      	; 0x2732 <_Z13uart_sendCharc+0x30>
void uart_sendChar(char c)
{
	UART_PIN_LOW;
	 _delay_us(UART_BAUDRATE_DELAY);		//sending at baud 57600
	 
	 for (int i = 0; i < 8; ++i)
    2732:	2f 5f       	subi	r18, 0xFF	; 255
    2734:	3f 4f       	sbci	r19, 0xFF	; 255
    2736:	28 30       	cpi	r18, 0x08	; 8
    2738:	31 05       	cpc	r19, r1
    273a:	59 f7       	brne	.-42     	; 0x2712 <_Z13uart_sendCharc+0x10>
			 UART_PIN_LOW;
		 }
		 _delay_us(UART_BAUDRATE_DELAY);
	 }

	 UART_PIN_HIGH;
    273c:	44 9a       	sbi	0x08, 4	; 8
    273e:	8a e6       	ldi	r24, 0x6A	; 106
    2740:	8a 95       	dec	r24
    2742:	f1 f7       	brne	.-4      	; 0x2740 <_Z13uart_sendCharc+0x3e>
    2744:	00 c0       	rjmp	.+0      	; 0x2746 <_Z13uart_sendCharc+0x44>
    2746:	08 95       	ret

00002748 <_Z12uart_sendStrPc>:
	 _delay_us(UART_BAUDRATE_DELAY);
 }

//function for sending strings
void uart_sendStr(char *str)
{
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	ec 01       	movw	r28, r24
	while(*str)  uart_sendChar(*str++);
    274e:	88 81       	ld	r24, Y
    2750:	88 23       	and	r24, r24
    2752:	31 f0       	breq	.+12     	; 0x2760 <_Z12uart_sendStrPc+0x18>
    2754:	21 96       	adiw	r28, 0x01	; 1
    2756:	0e 94 81 13 	call	0x2702	; 0x2702 <_Z13uart_sendCharc>
    275a:	89 91       	ld	r24, Y+
    275c:	81 11       	cpse	r24, r1
    275e:	fb cf       	rjmp	.-10     	; 0x2756 <_Z12uart_sendStrPc+0xe>
}
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <_Z21uart_sendStrFormattedPcz>:

//function for sending string formatted using printf syntax (if you want to send floats, you must enable vprintf library!)
//How to enable vprintf in Atmel Studio 7: In project properties, toolchain, under AVR/GNU Linker, general, check "Use vprintf library(-WI,-u,vfprintf)" AND under AVR/GNU Linker, Miscelllaneous, in other linker flags enter: -Wl,-lprintf_flt
 void uart_sendStrFormatted(char *szFormat, ...)
 {
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	c0 54       	subi	r28, 0x40	; 64
    2770:	d1 09       	sbc	r29, r1
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	9e 01       	movw	r18, r28
    277e:	2b 5b       	subi	r18, 0xBB	; 187
    2780:	3f 4f       	sbci	r19, 0xFF	; 255
    2782:	f9 01       	movw	r30, r18
    2784:	41 91       	ld	r20, Z+
    2786:	51 91       	ld	r21, Z+
    2788:	9f 01       	movw	r18, r30
	char szBuffer[64]; 
	int NUMCHARS = sizeof(szBuffer) / sizeof(szBuffer[0]);
	va_list pArgs;
	va_start(pArgs, szFormat);
	vsnprintf(szBuffer, NUMCHARS - 1, szFormat, pArgs);
    278a:	6f e3       	ldi	r22, 0x3F	; 63
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	ce 01       	movw	r24, r28
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	0e 94 42 1b 	call	0x3684	; 0x3684 <vsnprintf>
	va_end(pArgs);
	
	uart_sendStr(szBuffer);
    2796:	ce 01       	movw	r24, r28
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	0e 94 a4 13 	call	0x2748	; 0x2748 <_Z12uart_sendStrPc>
    279e:	c0 5c       	subi	r28, 0xC0	; 192
    27a0:	df 4f       	sbci	r29, 0xFF	; 255
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	08 95       	ret

000027b2 <__subsf3>:
    27b2:	50 58       	subi	r21, 0x80	; 128

000027b4 <__addsf3>:
    27b4:	bb 27       	eor	r27, r27
    27b6:	aa 27       	eor	r26, r26
    27b8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__addsf3x>
    27bc:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__fp_round>
    27c0:	0e 94 56 15 	call	0x2aac	; 0x2aac <__fp_pscA>
    27c4:	38 f0       	brcs	.+14     	; 0x27d4 <__addsf3+0x20>
    27c6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fp_pscB>
    27ca:	20 f0       	brcs	.+8      	; 0x27d4 <__addsf3+0x20>
    27cc:	39 f4       	brne	.+14     	; 0x27dc <__addsf3+0x28>
    27ce:	9f 3f       	cpi	r25, 0xFF	; 255
    27d0:	19 f4       	brne	.+6      	; 0x27d8 <__addsf3+0x24>
    27d2:	26 f4       	brtc	.+8      	; 0x27dc <__addsf3+0x28>
    27d4:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__fp_nan>
    27d8:	0e f4       	brtc	.+2      	; 0x27dc <__addsf3+0x28>
    27da:	e0 95       	com	r30
    27dc:	e7 fb       	bst	r30, 7
    27de:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__fp_inf>

000027e2 <__addsf3x>:
    27e2:	e9 2f       	mov	r30, r25
    27e4:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fp_split3>
    27e8:	58 f3       	brcs	.-42     	; 0x27c0 <__addsf3+0xc>
    27ea:	ba 17       	cp	r27, r26
    27ec:	62 07       	cpc	r22, r18
    27ee:	73 07       	cpc	r23, r19
    27f0:	84 07       	cpc	r24, r20
    27f2:	95 07       	cpc	r25, r21
    27f4:	20 f0       	brcs	.+8      	; 0x27fe <__addsf3x+0x1c>
    27f6:	79 f4       	brne	.+30     	; 0x2816 <__addsf3x+0x34>
    27f8:	a6 f5       	brtc	.+104    	; 0x2862 <__addsf3x+0x80>
    27fa:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__fp_zero>
    27fe:	0e f4       	brtc	.+2      	; 0x2802 <__addsf3x+0x20>
    2800:	e0 95       	com	r30
    2802:	0b 2e       	mov	r0, r27
    2804:	ba 2f       	mov	r27, r26
    2806:	a0 2d       	mov	r26, r0
    2808:	0b 01       	movw	r0, r22
    280a:	b9 01       	movw	r22, r18
    280c:	90 01       	movw	r18, r0
    280e:	0c 01       	movw	r0, r24
    2810:	ca 01       	movw	r24, r20
    2812:	a0 01       	movw	r20, r0
    2814:	11 24       	eor	r1, r1
    2816:	ff 27       	eor	r31, r31
    2818:	59 1b       	sub	r21, r25
    281a:	99 f0       	breq	.+38     	; 0x2842 <__addsf3x+0x60>
    281c:	59 3f       	cpi	r21, 0xF9	; 249
    281e:	50 f4       	brcc	.+20     	; 0x2834 <__addsf3x+0x52>
    2820:	50 3e       	cpi	r21, 0xE0	; 224
    2822:	68 f1       	brcs	.+90     	; 0x287e <__addsf3x+0x9c>
    2824:	1a 16       	cp	r1, r26
    2826:	f0 40       	sbci	r31, 0x00	; 0
    2828:	a2 2f       	mov	r26, r18
    282a:	23 2f       	mov	r18, r19
    282c:	34 2f       	mov	r19, r20
    282e:	44 27       	eor	r20, r20
    2830:	58 5f       	subi	r21, 0xF8	; 248
    2832:	f3 cf       	rjmp	.-26     	; 0x281a <__addsf3x+0x38>
    2834:	46 95       	lsr	r20
    2836:	37 95       	ror	r19
    2838:	27 95       	ror	r18
    283a:	a7 95       	ror	r26
    283c:	f0 40       	sbci	r31, 0x00	; 0
    283e:	53 95       	inc	r21
    2840:	c9 f7       	brne	.-14     	; 0x2834 <__addsf3x+0x52>
    2842:	7e f4       	brtc	.+30     	; 0x2862 <__addsf3x+0x80>
    2844:	1f 16       	cp	r1, r31
    2846:	ba 0b       	sbc	r27, r26
    2848:	62 0b       	sbc	r22, r18
    284a:	73 0b       	sbc	r23, r19
    284c:	84 0b       	sbc	r24, r20
    284e:	ba f0       	brmi	.+46     	; 0x287e <__addsf3x+0x9c>
    2850:	91 50       	subi	r25, 0x01	; 1
    2852:	a1 f0       	breq	.+40     	; 0x287c <__addsf3x+0x9a>
    2854:	ff 0f       	add	r31, r31
    2856:	bb 1f       	adc	r27, r27
    2858:	66 1f       	adc	r22, r22
    285a:	77 1f       	adc	r23, r23
    285c:	88 1f       	adc	r24, r24
    285e:	c2 f7       	brpl	.-16     	; 0x2850 <__addsf3x+0x6e>
    2860:	0e c0       	rjmp	.+28     	; 0x287e <__addsf3x+0x9c>
    2862:	ba 0f       	add	r27, r26
    2864:	62 1f       	adc	r22, r18
    2866:	73 1f       	adc	r23, r19
    2868:	84 1f       	adc	r24, r20
    286a:	48 f4       	brcc	.+18     	; 0x287e <__addsf3x+0x9c>
    286c:	87 95       	ror	r24
    286e:	77 95       	ror	r23
    2870:	67 95       	ror	r22
    2872:	b7 95       	ror	r27
    2874:	f7 95       	ror	r31
    2876:	9e 3f       	cpi	r25, 0xFE	; 254
    2878:	08 f0       	brcs	.+2      	; 0x287c <__addsf3x+0x9a>
    287a:	b0 cf       	rjmp	.-160    	; 0x27dc <__addsf3+0x28>
    287c:	93 95       	inc	r25
    287e:	88 0f       	add	r24, r24
    2880:	08 f0       	brcs	.+2      	; 0x2884 <__addsf3x+0xa2>
    2882:	99 27       	eor	r25, r25
    2884:	ee 0f       	add	r30, r30
    2886:	97 95       	ror	r25
    2888:	87 95       	ror	r24
    288a:	08 95       	ret

0000288c <__cmpsf2>:
    288c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__fp_cmp>
    2890:	08 f4       	brcc	.+2      	; 0x2894 <__cmpsf2+0x8>
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	08 95       	ret

00002896 <__divsf3>:
    2896:	0e 94 5f 14 	call	0x28be	; 0x28be <__divsf3x>
    289a:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__fp_round>
    289e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fp_pscB>
    28a2:	58 f0       	brcs	.+22     	; 0x28ba <__divsf3+0x24>
    28a4:	0e 94 56 15 	call	0x2aac	; 0x2aac <__fp_pscA>
    28a8:	40 f0       	brcs	.+16     	; 0x28ba <__divsf3+0x24>
    28aa:	29 f4       	brne	.+10     	; 0x28b6 <__divsf3+0x20>
    28ac:	5f 3f       	cpi	r21, 0xFF	; 255
    28ae:	29 f0       	breq	.+10     	; 0x28ba <__divsf3+0x24>
    28b0:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__fp_inf>
    28b4:	51 11       	cpse	r21, r1
    28b6:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__fp_szero>
    28ba:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__fp_nan>

000028be <__divsf3x>:
    28be:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fp_split3>
    28c2:	68 f3       	brcs	.-38     	; 0x289e <__divsf3+0x8>

000028c4 <__divsf3_pse>:
    28c4:	99 23       	and	r25, r25
    28c6:	b1 f3       	breq	.-20     	; 0x28b4 <__divsf3+0x1e>
    28c8:	55 23       	and	r21, r21
    28ca:	91 f3       	breq	.-28     	; 0x28b0 <__divsf3+0x1a>
    28cc:	95 1b       	sub	r25, r21
    28ce:	55 0b       	sbc	r21, r21
    28d0:	bb 27       	eor	r27, r27
    28d2:	aa 27       	eor	r26, r26
    28d4:	62 17       	cp	r22, r18
    28d6:	73 07       	cpc	r23, r19
    28d8:	84 07       	cpc	r24, r20
    28da:	38 f0       	brcs	.+14     	; 0x28ea <__divsf3_pse+0x26>
    28dc:	9f 5f       	subi	r25, 0xFF	; 255
    28de:	5f 4f       	sbci	r21, 0xFF	; 255
    28e0:	22 0f       	add	r18, r18
    28e2:	33 1f       	adc	r19, r19
    28e4:	44 1f       	adc	r20, r20
    28e6:	aa 1f       	adc	r26, r26
    28e8:	a9 f3       	breq	.-22     	; 0x28d4 <__divsf3_pse+0x10>
    28ea:	35 d0       	rcall	.+106    	; 0x2956 <__divsf3_pse+0x92>
    28ec:	0e 2e       	mov	r0, r30
    28ee:	3a f0       	brmi	.+14     	; 0x28fe <__divsf3_pse+0x3a>
    28f0:	e0 e8       	ldi	r30, 0x80	; 128
    28f2:	32 d0       	rcall	.+100    	; 0x2958 <__divsf3_pse+0x94>
    28f4:	91 50       	subi	r25, 0x01	; 1
    28f6:	50 40       	sbci	r21, 0x00	; 0
    28f8:	e6 95       	lsr	r30
    28fa:	00 1c       	adc	r0, r0
    28fc:	ca f7       	brpl	.-14     	; 0x28f0 <__divsf3_pse+0x2c>
    28fe:	2b d0       	rcall	.+86     	; 0x2956 <__divsf3_pse+0x92>
    2900:	fe 2f       	mov	r31, r30
    2902:	29 d0       	rcall	.+82     	; 0x2956 <__divsf3_pse+0x92>
    2904:	66 0f       	add	r22, r22
    2906:	77 1f       	adc	r23, r23
    2908:	88 1f       	adc	r24, r24
    290a:	bb 1f       	adc	r27, r27
    290c:	26 17       	cp	r18, r22
    290e:	37 07       	cpc	r19, r23
    2910:	48 07       	cpc	r20, r24
    2912:	ab 07       	cpc	r26, r27
    2914:	b0 e8       	ldi	r27, 0x80	; 128
    2916:	09 f0       	breq	.+2      	; 0x291a <__divsf3_pse+0x56>
    2918:	bb 0b       	sbc	r27, r27
    291a:	80 2d       	mov	r24, r0
    291c:	bf 01       	movw	r22, r30
    291e:	ff 27       	eor	r31, r31
    2920:	93 58       	subi	r25, 0x83	; 131
    2922:	5f 4f       	sbci	r21, 0xFF	; 255
    2924:	3a f0       	brmi	.+14     	; 0x2934 <__divsf3_pse+0x70>
    2926:	9e 3f       	cpi	r25, 0xFE	; 254
    2928:	51 05       	cpc	r21, r1
    292a:	78 f0       	brcs	.+30     	; 0x294a <__divsf3_pse+0x86>
    292c:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__fp_inf>
    2930:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__fp_szero>
    2934:	5f 3f       	cpi	r21, 0xFF	; 255
    2936:	e4 f3       	brlt	.-8      	; 0x2930 <__divsf3_pse+0x6c>
    2938:	98 3e       	cpi	r25, 0xE8	; 232
    293a:	d4 f3       	brlt	.-12     	; 0x2930 <__divsf3_pse+0x6c>
    293c:	86 95       	lsr	r24
    293e:	77 95       	ror	r23
    2940:	67 95       	ror	r22
    2942:	b7 95       	ror	r27
    2944:	f7 95       	ror	r31
    2946:	9f 5f       	subi	r25, 0xFF	; 255
    2948:	c9 f7       	brne	.-14     	; 0x293c <__divsf3_pse+0x78>
    294a:	88 0f       	add	r24, r24
    294c:	91 1d       	adc	r25, r1
    294e:	96 95       	lsr	r25
    2950:	87 95       	ror	r24
    2952:	97 f9       	bld	r25, 7
    2954:	08 95       	ret
    2956:	e1 e0       	ldi	r30, 0x01	; 1
    2958:	66 0f       	add	r22, r22
    295a:	77 1f       	adc	r23, r23
    295c:	88 1f       	adc	r24, r24
    295e:	bb 1f       	adc	r27, r27
    2960:	62 17       	cp	r22, r18
    2962:	73 07       	cpc	r23, r19
    2964:	84 07       	cpc	r24, r20
    2966:	ba 07       	cpc	r27, r26
    2968:	20 f0       	brcs	.+8      	; 0x2972 <__divsf3_pse+0xae>
    296a:	62 1b       	sub	r22, r18
    296c:	73 0b       	sbc	r23, r19
    296e:	84 0b       	sbc	r24, r20
    2970:	ba 0b       	sbc	r27, r26
    2972:	ee 1f       	adc	r30, r30
    2974:	88 f7       	brcc	.-30     	; 0x2958 <__divsf3_pse+0x94>
    2976:	e0 95       	com	r30
    2978:	08 95       	ret

0000297a <__fixunssfsi>:
    297a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__fp_splitA>
    297e:	88 f0       	brcs	.+34     	; 0x29a2 <__fixunssfsi+0x28>
    2980:	9f 57       	subi	r25, 0x7F	; 127
    2982:	98 f0       	brcs	.+38     	; 0x29aa <__fixunssfsi+0x30>
    2984:	b9 2f       	mov	r27, r25
    2986:	99 27       	eor	r25, r25
    2988:	b7 51       	subi	r27, 0x17	; 23
    298a:	b0 f0       	brcs	.+44     	; 0x29b8 <__fixunssfsi+0x3e>
    298c:	e1 f0       	breq	.+56     	; 0x29c6 <__fixunssfsi+0x4c>
    298e:	66 0f       	add	r22, r22
    2990:	77 1f       	adc	r23, r23
    2992:	88 1f       	adc	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	1a f0       	brmi	.+6      	; 0x299e <__fixunssfsi+0x24>
    2998:	ba 95       	dec	r27
    299a:	c9 f7       	brne	.-14     	; 0x298e <__fixunssfsi+0x14>
    299c:	14 c0       	rjmp	.+40     	; 0x29c6 <__fixunssfsi+0x4c>
    299e:	b1 30       	cpi	r27, 0x01	; 1
    29a0:	91 f0       	breq	.+36     	; 0x29c6 <__fixunssfsi+0x4c>
    29a2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__fp_zero>
    29a6:	b1 e0       	ldi	r27, 0x01	; 1
    29a8:	08 95       	ret
    29aa:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__fp_zero>
    29ae:	67 2f       	mov	r22, r23
    29b0:	78 2f       	mov	r23, r24
    29b2:	88 27       	eor	r24, r24
    29b4:	b8 5f       	subi	r27, 0xF8	; 248
    29b6:	39 f0       	breq	.+14     	; 0x29c6 <__fixunssfsi+0x4c>
    29b8:	b9 3f       	cpi	r27, 0xF9	; 249
    29ba:	cc f3       	brlt	.-14     	; 0x29ae <__fixunssfsi+0x34>
    29bc:	86 95       	lsr	r24
    29be:	77 95       	ror	r23
    29c0:	67 95       	ror	r22
    29c2:	b3 95       	inc	r27
    29c4:	d9 f7       	brne	.-10     	; 0x29bc <__fixunssfsi+0x42>
    29c6:	3e f4       	brtc	.+14     	; 0x29d6 <__fixunssfsi+0x5c>
    29c8:	90 95       	com	r25
    29ca:	80 95       	com	r24
    29cc:	70 95       	com	r23
    29ce:	61 95       	neg	r22
    29d0:	7f 4f       	sbci	r23, 0xFF	; 255
    29d2:	8f 4f       	sbci	r24, 0xFF	; 255
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	08 95       	ret

000029d8 <__floatunsisf>:
    29d8:	e8 94       	clt
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <__floatsisf+0x12>

000029dc <__floatsisf>:
    29dc:	97 fb       	bst	r25, 7
    29de:	3e f4       	brtc	.+14     	; 0x29ee <__floatsisf+0x12>
    29e0:	90 95       	com	r25
    29e2:	80 95       	com	r24
    29e4:	70 95       	com	r23
    29e6:	61 95       	neg	r22
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	8f 4f       	sbci	r24, 0xFF	; 255
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	99 23       	and	r25, r25
    29f0:	a9 f0       	breq	.+42     	; 0x2a1c <__floatsisf+0x40>
    29f2:	f9 2f       	mov	r31, r25
    29f4:	96 e9       	ldi	r25, 0x96	; 150
    29f6:	bb 27       	eor	r27, r27
    29f8:	93 95       	inc	r25
    29fa:	f6 95       	lsr	r31
    29fc:	87 95       	ror	r24
    29fe:	77 95       	ror	r23
    2a00:	67 95       	ror	r22
    2a02:	b7 95       	ror	r27
    2a04:	f1 11       	cpse	r31, r1
    2a06:	f8 cf       	rjmp	.-16     	; 0x29f8 <__floatsisf+0x1c>
    2a08:	fa f4       	brpl	.+62     	; 0x2a48 <__floatsisf+0x6c>
    2a0a:	bb 0f       	add	r27, r27
    2a0c:	11 f4       	brne	.+4      	; 0x2a12 <__floatsisf+0x36>
    2a0e:	60 ff       	sbrs	r22, 0
    2a10:	1b c0       	rjmp	.+54     	; 0x2a48 <__floatsisf+0x6c>
    2a12:	6f 5f       	subi	r22, 0xFF	; 255
    2a14:	7f 4f       	sbci	r23, 0xFF	; 255
    2a16:	8f 4f       	sbci	r24, 0xFF	; 255
    2a18:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1a:	16 c0       	rjmp	.+44     	; 0x2a48 <__floatsisf+0x6c>
    2a1c:	88 23       	and	r24, r24
    2a1e:	11 f0       	breq	.+4      	; 0x2a24 <__floatsisf+0x48>
    2a20:	96 e9       	ldi	r25, 0x96	; 150
    2a22:	11 c0       	rjmp	.+34     	; 0x2a46 <__floatsisf+0x6a>
    2a24:	77 23       	and	r23, r23
    2a26:	21 f0       	breq	.+8      	; 0x2a30 <__floatsisf+0x54>
    2a28:	9e e8       	ldi	r25, 0x8E	; 142
    2a2a:	87 2f       	mov	r24, r23
    2a2c:	76 2f       	mov	r23, r22
    2a2e:	05 c0       	rjmp	.+10     	; 0x2a3a <__floatsisf+0x5e>
    2a30:	66 23       	and	r22, r22
    2a32:	71 f0       	breq	.+28     	; 0x2a50 <__floatsisf+0x74>
    2a34:	96 e8       	ldi	r25, 0x86	; 134
    2a36:	86 2f       	mov	r24, r22
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	2a f0       	brmi	.+10     	; 0x2a48 <__floatsisf+0x6c>
    2a3e:	9a 95       	dec	r25
    2a40:	66 0f       	add	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	88 1f       	adc	r24, r24
    2a46:	da f7       	brpl	.-10     	; 0x2a3e <__floatsisf+0x62>
    2a48:	88 0f       	add	r24, r24
    2a4a:	96 95       	lsr	r25
    2a4c:	87 95       	ror	r24
    2a4e:	97 f9       	bld	r25, 7
    2a50:	08 95       	ret

00002a52 <__fp_cmp>:
    2a52:	99 0f       	add	r25, r25
    2a54:	00 08       	sbc	r0, r0
    2a56:	55 0f       	add	r21, r21
    2a58:	aa 0b       	sbc	r26, r26
    2a5a:	e0 e8       	ldi	r30, 0x80	; 128
    2a5c:	fe ef       	ldi	r31, 0xFE	; 254
    2a5e:	16 16       	cp	r1, r22
    2a60:	17 06       	cpc	r1, r23
    2a62:	e8 07       	cpc	r30, r24
    2a64:	f9 07       	cpc	r31, r25
    2a66:	c0 f0       	brcs	.+48     	; 0x2a98 <__fp_cmp+0x46>
    2a68:	12 16       	cp	r1, r18
    2a6a:	13 06       	cpc	r1, r19
    2a6c:	e4 07       	cpc	r30, r20
    2a6e:	f5 07       	cpc	r31, r21
    2a70:	98 f0       	brcs	.+38     	; 0x2a98 <__fp_cmp+0x46>
    2a72:	62 1b       	sub	r22, r18
    2a74:	73 0b       	sbc	r23, r19
    2a76:	84 0b       	sbc	r24, r20
    2a78:	95 0b       	sbc	r25, r21
    2a7a:	39 f4       	brne	.+14     	; 0x2a8a <__fp_cmp+0x38>
    2a7c:	0a 26       	eor	r0, r26
    2a7e:	61 f0       	breq	.+24     	; 0x2a98 <__fp_cmp+0x46>
    2a80:	23 2b       	or	r18, r19
    2a82:	24 2b       	or	r18, r20
    2a84:	25 2b       	or	r18, r21
    2a86:	21 f4       	brne	.+8      	; 0x2a90 <__fp_cmp+0x3e>
    2a88:	08 95       	ret
    2a8a:	0a 26       	eor	r0, r26
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <__fp_cmp+0x3e>
    2a8e:	a1 40       	sbci	r26, 0x01	; 1
    2a90:	a6 95       	lsr	r26
    2a92:	8f ef       	ldi	r24, 0xFF	; 255
    2a94:	81 1d       	adc	r24, r1
    2a96:	81 1d       	adc	r24, r1
    2a98:	08 95       	ret

00002a9a <__fp_inf>:
    2a9a:	97 f9       	bld	r25, 7
    2a9c:	9f 67       	ori	r25, 0x7F	; 127
    2a9e:	80 e8       	ldi	r24, 0x80	; 128
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	08 95       	ret

00002aa6 <__fp_nan>:
    2aa6:	9f ef       	ldi	r25, 0xFF	; 255
    2aa8:	80 ec       	ldi	r24, 0xC0	; 192
    2aaa:	08 95       	ret

00002aac <__fp_pscA>:
    2aac:	00 24       	eor	r0, r0
    2aae:	0a 94       	dec	r0
    2ab0:	16 16       	cp	r1, r22
    2ab2:	17 06       	cpc	r1, r23
    2ab4:	18 06       	cpc	r1, r24
    2ab6:	09 06       	cpc	r0, r25
    2ab8:	08 95       	ret

00002aba <__fp_pscB>:
    2aba:	00 24       	eor	r0, r0
    2abc:	0a 94       	dec	r0
    2abe:	12 16       	cp	r1, r18
    2ac0:	13 06       	cpc	r1, r19
    2ac2:	14 06       	cpc	r1, r20
    2ac4:	05 06       	cpc	r0, r21
    2ac6:	08 95       	ret

00002ac8 <__fp_round>:
    2ac8:	09 2e       	mov	r0, r25
    2aca:	03 94       	inc	r0
    2acc:	00 0c       	add	r0, r0
    2ace:	11 f4       	brne	.+4      	; 0x2ad4 <__fp_round+0xc>
    2ad0:	88 23       	and	r24, r24
    2ad2:	52 f0       	brmi	.+20     	; 0x2ae8 <__fp_round+0x20>
    2ad4:	bb 0f       	add	r27, r27
    2ad6:	40 f4       	brcc	.+16     	; 0x2ae8 <__fp_round+0x20>
    2ad8:	bf 2b       	or	r27, r31
    2ada:	11 f4       	brne	.+4      	; 0x2ae0 <__fp_round+0x18>
    2adc:	60 ff       	sbrs	r22, 0
    2ade:	04 c0       	rjmp	.+8      	; 0x2ae8 <__fp_round+0x20>
    2ae0:	6f 5f       	subi	r22, 0xFF	; 255
    2ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae8:	08 95       	ret

00002aea <__fp_split3>:
    2aea:	57 fd       	sbrc	r21, 7
    2aec:	90 58       	subi	r25, 0x80	; 128
    2aee:	44 0f       	add	r20, r20
    2af0:	55 1f       	adc	r21, r21
    2af2:	59 f0       	breq	.+22     	; 0x2b0a <__fp_splitA+0x10>
    2af4:	5f 3f       	cpi	r21, 0xFF	; 255
    2af6:	71 f0       	breq	.+28     	; 0x2b14 <__fp_splitA+0x1a>
    2af8:	47 95       	ror	r20

00002afa <__fp_splitA>:
    2afa:	88 0f       	add	r24, r24
    2afc:	97 fb       	bst	r25, 7
    2afe:	99 1f       	adc	r25, r25
    2b00:	61 f0       	breq	.+24     	; 0x2b1a <__fp_splitA+0x20>
    2b02:	9f 3f       	cpi	r25, 0xFF	; 255
    2b04:	79 f0       	breq	.+30     	; 0x2b24 <__fp_splitA+0x2a>
    2b06:	87 95       	ror	r24
    2b08:	08 95       	ret
    2b0a:	12 16       	cp	r1, r18
    2b0c:	13 06       	cpc	r1, r19
    2b0e:	14 06       	cpc	r1, r20
    2b10:	55 1f       	adc	r21, r21
    2b12:	f2 cf       	rjmp	.-28     	; 0x2af8 <__fp_split3+0xe>
    2b14:	46 95       	lsr	r20
    2b16:	f1 df       	rcall	.-30     	; 0x2afa <__fp_splitA>
    2b18:	08 c0       	rjmp	.+16     	; 0x2b2a <__fp_splitA+0x30>
    2b1a:	16 16       	cp	r1, r22
    2b1c:	17 06       	cpc	r1, r23
    2b1e:	18 06       	cpc	r1, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	f1 cf       	rjmp	.-30     	; 0x2b06 <__fp_splitA+0xc>
    2b24:	86 95       	lsr	r24
    2b26:	71 05       	cpc	r23, r1
    2b28:	61 05       	cpc	r22, r1
    2b2a:	08 94       	sec
    2b2c:	08 95       	ret

00002b2e <__fp_zero>:
    2b2e:	e8 94       	clt

00002b30 <__fp_szero>:
    2b30:	bb 27       	eor	r27, r27
    2b32:	66 27       	eor	r22, r22
    2b34:	77 27       	eor	r23, r23
    2b36:	cb 01       	movw	r24, r22
    2b38:	97 f9       	bld	r25, 7
    2b3a:	08 95       	ret

00002b3c <__gesf2>:
    2b3c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__fp_cmp>
    2b40:	08 f4       	brcc	.+2      	; 0x2b44 <__gesf2+0x8>
    2b42:	8f ef       	ldi	r24, 0xFF	; 255
    2b44:	08 95       	ret

00002b46 <__mulsf3>:
    2b46:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3x>
    2b4a:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__fp_round>
    2b4e:	0e 94 56 15 	call	0x2aac	; 0x2aac <__fp_pscA>
    2b52:	38 f0       	brcs	.+14     	; 0x2b62 <__mulsf3+0x1c>
    2b54:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fp_pscB>
    2b58:	20 f0       	brcs	.+8      	; 0x2b62 <__mulsf3+0x1c>
    2b5a:	95 23       	and	r25, r21
    2b5c:	11 f0       	breq	.+4      	; 0x2b62 <__mulsf3+0x1c>
    2b5e:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__fp_inf>
    2b62:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__fp_nan>
    2b66:	11 24       	eor	r1, r1
    2b68:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__fp_szero>

00002b6c <__mulsf3x>:
    2b6c:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fp_split3>
    2b70:	70 f3       	brcs	.-36     	; 0x2b4e <__mulsf3+0x8>

00002b72 <__mulsf3_pse>:
    2b72:	95 9f       	mul	r25, r21
    2b74:	c1 f3       	breq	.-16     	; 0x2b66 <__mulsf3+0x20>
    2b76:	95 0f       	add	r25, r21
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	55 1f       	adc	r21, r21
    2b7c:	62 9f       	mul	r22, r18
    2b7e:	f0 01       	movw	r30, r0
    2b80:	72 9f       	mul	r23, r18
    2b82:	bb 27       	eor	r27, r27
    2b84:	f0 0d       	add	r31, r0
    2b86:	b1 1d       	adc	r27, r1
    2b88:	63 9f       	mul	r22, r19
    2b8a:	aa 27       	eor	r26, r26
    2b8c:	f0 0d       	add	r31, r0
    2b8e:	b1 1d       	adc	r27, r1
    2b90:	aa 1f       	adc	r26, r26
    2b92:	64 9f       	mul	r22, r20
    2b94:	66 27       	eor	r22, r22
    2b96:	b0 0d       	add	r27, r0
    2b98:	a1 1d       	adc	r26, r1
    2b9a:	66 1f       	adc	r22, r22
    2b9c:	82 9f       	mul	r24, r18
    2b9e:	22 27       	eor	r18, r18
    2ba0:	b0 0d       	add	r27, r0
    2ba2:	a1 1d       	adc	r26, r1
    2ba4:	62 1f       	adc	r22, r18
    2ba6:	73 9f       	mul	r23, r19
    2ba8:	b0 0d       	add	r27, r0
    2baa:	a1 1d       	adc	r26, r1
    2bac:	62 1f       	adc	r22, r18
    2bae:	83 9f       	mul	r24, r19
    2bb0:	a0 0d       	add	r26, r0
    2bb2:	61 1d       	adc	r22, r1
    2bb4:	22 1f       	adc	r18, r18
    2bb6:	74 9f       	mul	r23, r20
    2bb8:	33 27       	eor	r19, r19
    2bba:	a0 0d       	add	r26, r0
    2bbc:	61 1d       	adc	r22, r1
    2bbe:	23 1f       	adc	r18, r19
    2bc0:	84 9f       	mul	r24, r20
    2bc2:	60 0d       	add	r22, r0
    2bc4:	21 1d       	adc	r18, r1
    2bc6:	82 2f       	mov	r24, r18
    2bc8:	76 2f       	mov	r23, r22
    2bca:	6a 2f       	mov	r22, r26
    2bcc:	11 24       	eor	r1, r1
    2bce:	9f 57       	subi	r25, 0x7F	; 127
    2bd0:	50 40       	sbci	r21, 0x00	; 0
    2bd2:	9a f0       	brmi	.+38     	; 0x2bfa <__mulsf3_pse+0x88>
    2bd4:	f1 f0       	breq	.+60     	; 0x2c12 <__mulsf3_pse+0xa0>
    2bd6:	88 23       	and	r24, r24
    2bd8:	4a f0       	brmi	.+18     	; 0x2bec <__mulsf3_pse+0x7a>
    2bda:	ee 0f       	add	r30, r30
    2bdc:	ff 1f       	adc	r31, r31
    2bde:	bb 1f       	adc	r27, r27
    2be0:	66 1f       	adc	r22, r22
    2be2:	77 1f       	adc	r23, r23
    2be4:	88 1f       	adc	r24, r24
    2be6:	91 50       	subi	r25, 0x01	; 1
    2be8:	50 40       	sbci	r21, 0x00	; 0
    2bea:	a9 f7       	brne	.-22     	; 0x2bd6 <__mulsf3_pse+0x64>
    2bec:	9e 3f       	cpi	r25, 0xFE	; 254
    2bee:	51 05       	cpc	r21, r1
    2bf0:	80 f0       	brcs	.+32     	; 0x2c12 <__mulsf3_pse+0xa0>
    2bf2:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__fp_inf>
    2bf6:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__fp_szero>
    2bfa:	5f 3f       	cpi	r21, 0xFF	; 255
    2bfc:	e4 f3       	brlt	.-8      	; 0x2bf6 <__mulsf3_pse+0x84>
    2bfe:	98 3e       	cpi	r25, 0xE8	; 232
    2c00:	d4 f3       	brlt	.-12     	; 0x2bf6 <__mulsf3_pse+0x84>
    2c02:	86 95       	lsr	r24
    2c04:	77 95       	ror	r23
    2c06:	67 95       	ror	r22
    2c08:	b7 95       	ror	r27
    2c0a:	f7 95       	ror	r31
    2c0c:	e7 95       	ror	r30
    2c0e:	9f 5f       	subi	r25, 0xFF	; 255
    2c10:	c1 f7       	brne	.-16     	; 0x2c02 <__mulsf3_pse+0x90>
    2c12:	fe 2b       	or	r31, r30
    2c14:	88 0f       	add	r24, r24
    2c16:	91 1d       	adc	r25, r1
    2c18:	96 95       	lsr	r25
    2c1a:	87 95       	ror	r24
    2c1c:	97 f9       	bld	r25, 7
    2c1e:	08 95       	ret

00002c20 <vfprintf>:
    2c20:	a3 e1       	ldi	r26, 0x13	; 19
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e6 e1       	ldi	r30, 0x16	; 22
    2c26:	f6 e1       	ldi	r31, 0x16	; 22
    2c28:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__prologue_saves__>
    2c2c:	6c 01       	movw	r12, r24
    2c2e:	4b 01       	movw	r8, r22
    2c30:	2a 01       	movw	r4, r20
    2c32:	fc 01       	movw	r30, r24
    2c34:	17 82       	std	Z+7, r1	; 0x07
    2c36:	16 82       	std	Z+6, r1	; 0x06
    2c38:	83 81       	ldd	r24, Z+3	; 0x03
    2c3a:	81 ff       	sbrs	r24, 1
    2c3c:	43 c3       	rjmp	.+1670   	; 0x32c4 <vfprintf+0x6a4>
    2c3e:	ae 01       	movw	r20, r28
    2c40:	4f 5f       	subi	r20, 0xFF	; 255
    2c42:	5f 4f       	sbci	r21, 0xFF	; 255
    2c44:	3a 01       	movw	r6, r20
    2c46:	f6 01       	movw	r30, r12
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	f4 01       	movw	r30, r8
    2c4c:	93 fd       	sbrc	r25, 3
    2c4e:	85 91       	lpm	r24, Z+
    2c50:	93 ff       	sbrs	r25, 3
    2c52:	81 91       	ld	r24, Z+
    2c54:	4f 01       	movw	r8, r30
    2c56:	88 23       	and	r24, r24
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <vfprintf+0x3c>
    2c5a:	30 c3       	rjmp	.+1632   	; 0x32bc <vfprintf+0x69c>
    2c5c:	85 32       	cpi	r24, 0x25	; 37
    2c5e:	39 f4       	brne	.+14     	; 0x2c6e <vfprintf+0x4e>
    2c60:	93 fd       	sbrc	r25, 3
    2c62:	85 91       	lpm	r24, Z+
    2c64:	93 ff       	sbrs	r25, 3
    2c66:	81 91       	ld	r24, Z+
    2c68:	4f 01       	movw	r8, r30
    2c6a:	85 32       	cpi	r24, 0x25	; 37
    2c6c:	39 f4       	brne	.+14     	; 0x2c7c <vfprintf+0x5c>
    2c6e:	b6 01       	movw	r22, r12
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2c76:	52 01       	movw	r10, r4
    2c78:	25 01       	movw	r4, r10
    2c7a:	e5 cf       	rjmp	.-54     	; 0x2c46 <vfprintf+0x26>
    2c7c:	10 e0       	ldi	r17, 0x00	; 0
    2c7e:	f1 2c       	mov	r15, r1
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	20 32       	cpi	r18, 0x20	; 32
    2c84:	a0 f4       	brcc	.+40     	; 0x2cae <vfprintf+0x8e>
    2c86:	8b 32       	cpi	r24, 0x2B	; 43
    2c88:	69 f0       	breq	.+26     	; 0x2ca4 <vfprintf+0x84>
    2c8a:	30 f4       	brcc	.+12     	; 0x2c98 <vfprintf+0x78>
    2c8c:	80 32       	cpi	r24, 0x20	; 32
    2c8e:	59 f0       	breq	.+22     	; 0x2ca6 <vfprintf+0x86>
    2c90:	83 32       	cpi	r24, 0x23	; 35
    2c92:	69 f4       	brne	.+26     	; 0x2cae <vfprintf+0x8e>
    2c94:	20 61       	ori	r18, 0x10	; 16
    2c96:	2c c0       	rjmp	.+88     	; 0x2cf0 <vfprintf+0xd0>
    2c98:	8d 32       	cpi	r24, 0x2D	; 45
    2c9a:	39 f0       	breq	.+14     	; 0x2caa <vfprintf+0x8a>
    2c9c:	80 33       	cpi	r24, 0x30	; 48
    2c9e:	39 f4       	brne	.+14     	; 0x2cae <vfprintf+0x8e>
    2ca0:	21 60       	ori	r18, 0x01	; 1
    2ca2:	26 c0       	rjmp	.+76     	; 0x2cf0 <vfprintf+0xd0>
    2ca4:	22 60       	ori	r18, 0x02	; 2
    2ca6:	24 60       	ori	r18, 0x04	; 4
    2ca8:	23 c0       	rjmp	.+70     	; 0x2cf0 <vfprintf+0xd0>
    2caa:	28 60       	ori	r18, 0x08	; 8
    2cac:	21 c0       	rjmp	.+66     	; 0x2cf0 <vfprintf+0xd0>
    2cae:	27 fd       	sbrc	r18, 7
    2cb0:	27 c0       	rjmp	.+78     	; 0x2d00 <vfprintf+0xe0>
    2cb2:	30 ed       	ldi	r19, 0xD0	; 208
    2cb4:	38 0f       	add	r19, r24
    2cb6:	3a 30       	cpi	r19, 0x0A	; 10
    2cb8:	78 f4       	brcc	.+30     	; 0x2cd8 <vfprintf+0xb8>
    2cba:	26 ff       	sbrs	r18, 6
    2cbc:	06 c0       	rjmp	.+12     	; 0x2cca <vfprintf+0xaa>
    2cbe:	fa e0       	ldi	r31, 0x0A	; 10
    2cc0:	1f 9f       	mul	r17, r31
    2cc2:	30 0d       	add	r19, r0
    2cc4:	11 24       	eor	r1, r1
    2cc6:	13 2f       	mov	r17, r19
    2cc8:	13 c0       	rjmp	.+38     	; 0x2cf0 <vfprintf+0xd0>
    2cca:	4a e0       	ldi	r20, 0x0A	; 10
    2ccc:	f4 9e       	mul	r15, r20
    2cce:	30 0d       	add	r19, r0
    2cd0:	11 24       	eor	r1, r1
    2cd2:	f3 2e       	mov	r15, r19
    2cd4:	20 62       	ori	r18, 0x20	; 32
    2cd6:	0c c0       	rjmp	.+24     	; 0x2cf0 <vfprintf+0xd0>
    2cd8:	8e 32       	cpi	r24, 0x2E	; 46
    2cda:	21 f4       	brne	.+8      	; 0x2ce4 <vfprintf+0xc4>
    2cdc:	26 fd       	sbrc	r18, 6
    2cde:	ee c2       	rjmp	.+1500   	; 0x32bc <vfprintf+0x69c>
    2ce0:	20 64       	ori	r18, 0x40	; 64
    2ce2:	06 c0       	rjmp	.+12     	; 0x2cf0 <vfprintf+0xd0>
    2ce4:	8c 36       	cpi	r24, 0x6C	; 108
    2ce6:	11 f4       	brne	.+4      	; 0x2cec <vfprintf+0xcc>
    2ce8:	20 68       	ori	r18, 0x80	; 128
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <vfprintf+0xd0>
    2cec:	88 36       	cpi	r24, 0x68	; 104
    2cee:	41 f4       	brne	.+16     	; 0x2d00 <vfprintf+0xe0>
    2cf0:	f4 01       	movw	r30, r8
    2cf2:	93 fd       	sbrc	r25, 3
    2cf4:	85 91       	lpm	r24, Z+
    2cf6:	93 ff       	sbrs	r25, 3
    2cf8:	81 91       	ld	r24, Z+
    2cfa:	4f 01       	movw	r8, r30
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	c1 cf       	rjmp	.-126    	; 0x2c82 <vfprintf+0x62>
    2d00:	9b eb       	ldi	r25, 0xBB	; 187
    2d02:	98 0f       	add	r25, r24
    2d04:	93 30       	cpi	r25, 0x03	; 3
    2d06:	18 f4       	brcc	.+6      	; 0x2d0e <vfprintf+0xee>
    2d08:	20 61       	ori	r18, 0x10	; 16
    2d0a:	80 5e       	subi	r24, 0xE0	; 224
    2d0c:	06 c0       	rjmp	.+12     	; 0x2d1a <vfprintf+0xfa>
    2d0e:	9b e9       	ldi	r25, 0x9B	; 155
    2d10:	98 0f       	add	r25, r24
    2d12:	93 30       	cpi	r25, 0x03	; 3
    2d14:	08 f0       	brcs	.+2      	; 0x2d18 <vfprintf+0xf8>
    2d16:	71 c1       	rjmp	.+738    	; 0x2ffa <vfprintf+0x3da>
    2d18:	2f 7e       	andi	r18, 0xEF	; 239
    2d1a:	26 ff       	sbrs	r18, 6
    2d1c:	16 e0       	ldi	r17, 0x06	; 6
    2d1e:	2f 73       	andi	r18, 0x3F	; 63
    2d20:	32 2e       	mov	r3, r18
    2d22:	85 36       	cpi	r24, 0x65	; 101
    2d24:	19 f4       	brne	.+6      	; 0x2d2c <vfprintf+0x10c>
    2d26:	20 64       	ori	r18, 0x40	; 64
    2d28:	32 2e       	mov	r3, r18
    2d2a:	08 c0       	rjmp	.+16     	; 0x2d3c <vfprintf+0x11c>
    2d2c:	86 36       	cpi	r24, 0x66	; 102
    2d2e:	21 f4       	brne	.+8      	; 0x2d38 <vfprintf+0x118>
    2d30:	f2 2f       	mov	r31, r18
    2d32:	f0 68       	ori	r31, 0x80	; 128
    2d34:	3f 2e       	mov	r3, r31
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <vfprintf+0x11c>
    2d38:	11 11       	cpse	r17, r1
    2d3a:	11 50       	subi	r17, 0x01	; 1
    2d3c:	37 fe       	sbrs	r3, 7
    2d3e:	07 c0       	rjmp	.+14     	; 0x2d4e <vfprintf+0x12e>
    2d40:	1c 33       	cpi	r17, 0x3C	; 60
    2d42:	50 f4       	brcc	.+20     	; 0x2d58 <vfprintf+0x138>
    2d44:	ee 24       	eor	r14, r14
    2d46:	e3 94       	inc	r14
    2d48:	e1 0e       	add	r14, r17
    2d4a:	27 e0       	ldi	r18, 0x07	; 7
    2d4c:	0b c0       	rjmp	.+22     	; 0x2d64 <vfprintf+0x144>
    2d4e:	18 30       	cpi	r17, 0x08	; 8
    2d50:	38 f0       	brcs	.+14     	; 0x2d60 <vfprintf+0x140>
    2d52:	27 e0       	ldi	r18, 0x07	; 7
    2d54:	17 e0       	ldi	r17, 0x07	; 7
    2d56:	05 c0       	rjmp	.+10     	; 0x2d62 <vfprintf+0x142>
    2d58:	27 e0       	ldi	r18, 0x07	; 7
    2d5a:	4c e3       	ldi	r20, 0x3C	; 60
    2d5c:	e4 2e       	mov	r14, r20
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <vfprintf+0x144>
    2d60:	21 2f       	mov	r18, r17
    2d62:	e1 2c       	mov	r14, r1
    2d64:	52 01       	movw	r10, r4
    2d66:	44 e0       	ldi	r20, 0x04	; 4
    2d68:	a4 0e       	add	r10, r20
    2d6a:	b1 1c       	adc	r11, r1
    2d6c:	f2 01       	movw	r30, r4
    2d6e:	60 81       	ld	r22, Z
    2d70:	71 81       	ldd	r23, Z+1	; 0x01
    2d72:	82 81       	ldd	r24, Z+2	; 0x02
    2d74:	93 81       	ldd	r25, Z+3	; 0x03
    2d76:	0e 2d       	mov	r16, r14
    2d78:	a3 01       	movw	r20, r6
    2d7a:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__ftoa_engine>
    2d7e:	2c 01       	movw	r4, r24
    2d80:	09 81       	ldd	r16, Y+1	; 0x01
    2d82:	00 ff       	sbrs	r16, 0
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <vfprintf+0x16a>
    2d86:	03 ff       	sbrs	r16, 3
    2d88:	07 c0       	rjmp	.+14     	; 0x2d98 <vfprintf+0x178>
    2d8a:	31 fc       	sbrc	r3, 1
    2d8c:	08 c0       	rjmp	.+16     	; 0x2d9e <vfprintf+0x17e>
    2d8e:	32 fe       	sbrs	r3, 2
    2d90:	09 c0       	rjmp	.+18     	; 0x2da4 <vfprintf+0x184>
    2d92:	30 e2       	ldi	r19, 0x20	; 32
    2d94:	23 2e       	mov	r2, r19
    2d96:	07 c0       	rjmp	.+14     	; 0x2da6 <vfprintf+0x186>
    2d98:	2d e2       	ldi	r18, 0x2D	; 45
    2d9a:	22 2e       	mov	r2, r18
    2d9c:	04 c0       	rjmp	.+8      	; 0x2da6 <vfprintf+0x186>
    2d9e:	9b e2       	ldi	r25, 0x2B	; 43
    2da0:	29 2e       	mov	r2, r25
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <vfprintf+0x186>
    2da4:	21 2c       	mov	r2, r1
    2da6:	80 2f       	mov	r24, r16
    2da8:	8c 70       	andi	r24, 0x0C	; 12
    2daa:	19 f0       	breq	.+6      	; 0x2db2 <vfprintf+0x192>
    2dac:	21 10       	cpse	r2, r1
    2dae:	68 c2       	rjmp	.+1232   	; 0x3280 <vfprintf+0x660>
    2db0:	a8 c2       	rjmp	.+1360   	; 0x3302 <vfprintf+0x6e2>
    2db2:	37 fe       	sbrs	r3, 7
    2db4:	0f c0       	rjmp	.+30     	; 0x2dd4 <vfprintf+0x1b4>
    2db6:	e4 0c       	add	r14, r4
    2db8:	04 ff       	sbrs	r16, 4
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <vfprintf+0x1a4>
    2dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbe:	81 33       	cpi	r24, 0x31	; 49
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <vfprintf+0x1a4>
    2dc2:	ea 94       	dec	r14
    2dc4:	1e 14       	cp	r1, r14
    2dc6:	74 f5       	brge	.+92     	; 0x2e24 <vfprintf+0x204>
    2dc8:	f8 e0       	ldi	r31, 0x08	; 8
    2dca:	fe 15       	cp	r31, r14
    2dcc:	78 f5       	brcc	.+94     	; 0x2e2c <vfprintf+0x20c>
    2dce:	88 e0       	ldi	r24, 0x08	; 8
    2dd0:	e8 2e       	mov	r14, r24
    2dd2:	2c c0       	rjmp	.+88     	; 0x2e2c <vfprintf+0x20c>
    2dd4:	36 fc       	sbrc	r3, 6
    2dd6:	2a c0       	rjmp	.+84     	; 0x2e2c <vfprintf+0x20c>
    2dd8:	81 2f       	mov	r24, r17
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	84 15       	cp	r24, r4
    2dde:	95 05       	cpc	r25, r5
    2de0:	9c f0       	brlt	.+38     	; 0x2e08 <vfprintf+0x1e8>
    2de2:	2c ef       	ldi	r18, 0xFC	; 252
    2de4:	42 16       	cp	r4, r18
    2de6:	2f ef       	ldi	r18, 0xFF	; 255
    2de8:	52 06       	cpc	r5, r18
    2dea:	74 f0       	brlt	.+28     	; 0x2e08 <vfprintf+0x1e8>
    2dec:	43 2d       	mov	r20, r3
    2dee:	40 68       	ori	r20, 0x80	; 128
    2df0:	34 2e       	mov	r3, r20
    2df2:	0a c0       	rjmp	.+20     	; 0x2e08 <vfprintf+0x1e8>
    2df4:	e2 e0       	ldi	r30, 0x02	; 2
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	ec 0f       	add	r30, r28
    2dfa:	fd 1f       	adc	r31, r29
    2dfc:	e1 0f       	add	r30, r17
    2dfe:	f1 1d       	adc	r31, r1
    2e00:	80 81       	ld	r24, Z
    2e02:	80 33       	cpi	r24, 0x30	; 48
    2e04:	19 f4       	brne	.+6      	; 0x2e0c <vfprintf+0x1ec>
    2e06:	11 50       	subi	r17, 0x01	; 1
    2e08:	11 11       	cpse	r17, r1
    2e0a:	f4 cf       	rjmp	.-24     	; 0x2df4 <vfprintf+0x1d4>
    2e0c:	37 fe       	sbrs	r3, 7
    2e0e:	0e c0       	rjmp	.+28     	; 0x2e2c <vfprintf+0x20c>
    2e10:	ee 24       	eor	r14, r14
    2e12:	e3 94       	inc	r14
    2e14:	e1 0e       	add	r14, r17
    2e16:	81 2f       	mov	r24, r17
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	48 16       	cp	r4, r24
    2e1c:	59 06       	cpc	r5, r25
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <vfprintf+0x20a>
    2e20:	14 19       	sub	r17, r4
    2e22:	04 c0       	rjmp	.+8      	; 0x2e2c <vfprintf+0x20c>
    2e24:	ee 24       	eor	r14, r14
    2e26:	e3 94       	inc	r14
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <vfprintf+0x20c>
    2e2a:	10 e0       	ldi	r17, 0x00	; 0
    2e2c:	37 fe       	sbrs	r3, 7
    2e2e:	06 c0       	rjmp	.+12     	; 0x2e3c <vfprintf+0x21c>
    2e30:	14 14       	cp	r1, r4
    2e32:	15 04       	cpc	r1, r5
    2e34:	34 f4       	brge	.+12     	; 0x2e42 <vfprintf+0x222>
    2e36:	c2 01       	movw	r24, r4
    2e38:	01 96       	adiw	r24, 0x01	; 1
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <vfprintf+0x226>
    2e3c:	85 e0       	ldi	r24, 0x05	; 5
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <vfprintf+0x226>
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	21 10       	cpse	r2, r1
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	11 23       	and	r17, r17
    2e4c:	31 f0       	breq	.+12     	; 0x2e5a <vfprintf+0x23a>
    2e4e:	21 2f       	mov	r18, r17
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	2f 5f       	subi	r18, 0xFF	; 255
    2e54:	3f 4f       	sbci	r19, 0xFF	; 255
    2e56:	82 0f       	add	r24, r18
    2e58:	93 1f       	adc	r25, r19
    2e5a:	2f 2d       	mov	r18, r15
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	82 17       	cp	r24, r18
    2e60:	93 07       	cpc	r25, r19
    2e62:	14 f4       	brge	.+4      	; 0x2e68 <vfprintf+0x248>
    2e64:	f8 1a       	sub	r15, r24
    2e66:	01 c0       	rjmp	.+2      	; 0x2e6a <vfprintf+0x24a>
    2e68:	f1 2c       	mov	r15, r1
    2e6a:	83 2d       	mov	r24, r3
    2e6c:	89 70       	andi	r24, 0x09	; 9
    2e6e:	49 f4       	brne	.+18     	; 0x2e82 <vfprintf+0x262>
    2e70:	ff 20       	and	r15, r15
    2e72:	39 f0       	breq	.+14     	; 0x2e82 <vfprintf+0x262>
    2e74:	b6 01       	movw	r22, r12
    2e76:	80 e2       	ldi	r24, 0x20	; 32
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2e7e:	fa 94       	dec	r15
    2e80:	f7 cf       	rjmp	.-18     	; 0x2e70 <vfprintf+0x250>
    2e82:	22 20       	and	r2, r2
    2e84:	29 f0       	breq	.+10     	; 0x2e90 <vfprintf+0x270>
    2e86:	b6 01       	movw	r22, r12
    2e88:	82 2d       	mov	r24, r2
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2e90:	33 fc       	sbrc	r3, 3
    2e92:	09 c0       	rjmp	.+18     	; 0x2ea6 <vfprintf+0x286>
    2e94:	ff 20       	and	r15, r15
    2e96:	39 f0       	breq	.+14     	; 0x2ea6 <vfprintf+0x286>
    2e98:	b6 01       	movw	r22, r12
    2e9a:	80 e3       	ldi	r24, 0x30	; 48
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2ea2:	fa 94       	dec	r15
    2ea4:	f7 cf       	rjmp	.-18     	; 0x2e94 <vfprintf+0x274>
    2ea6:	37 fe       	sbrs	r3, 7
    2ea8:	5a c0       	rjmp	.+180    	; 0x2f5e <vfprintf+0x33e>
    2eaa:	94 2d       	mov	r25, r4
    2eac:	85 2d       	mov	r24, r5
    2eae:	57 fe       	sbrs	r5, 7
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <vfprintf+0x296>
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	29 2e       	mov	r2, r25
    2eb8:	38 2e       	mov	r3, r24
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	a2 01       	movw	r20, r4
    2ec0:	4e 19       	sub	r20, r14
    2ec2:	51 09       	sbc	r21, r1
    2ec4:	5d 87       	std	Y+13, r21	; 0x0d
    2ec6:	4c 87       	std	Y+12, r20	; 0x0c
    2ec8:	a2 01       	movw	r20, r4
    2eca:	42 19       	sub	r20, r2
    2ecc:	53 09       	sbc	r21, r3
    2ece:	5f 87       	std	Y+15, r21	; 0x0f
    2ed0:	4e 87       	std	Y+14, r20	; 0x0e
    2ed2:	61 2f       	mov	r22, r17
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	44 27       	eor	r20, r20
    2ed8:	55 27       	eor	r21, r21
    2eda:	46 1b       	sub	r20, r22
    2edc:	57 0b       	sbc	r21, r23
    2ede:	59 8b       	std	Y+17, r21	; 0x11
    2ee0:	48 8b       	std	Y+16, r20	; 0x10
    2ee2:	5f ef       	ldi	r21, 0xFF	; 255
    2ee4:	25 16       	cp	r2, r21
    2ee6:	35 06       	cpc	r3, r21
    2ee8:	49 f4       	brne	.+18     	; 0x2efc <vfprintf+0x2dc>
    2eea:	b6 01       	movw	r22, r12
    2eec:	8e e2       	ldi	r24, 0x2E	; 46
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	2a 8b       	std	Y+18, r18	; 0x12
    2ef2:	3b 8b       	std	Y+19, r19	; 0x13
    2ef4:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2ef8:	3b 89       	ldd	r19, Y+19	; 0x13
    2efa:	2a 89       	ldd	r18, Y+18	; 0x12
    2efc:	42 14       	cp	r4, r2
    2efe:	53 04       	cpc	r5, r3
    2f00:	6c f0       	brlt	.+26     	; 0x2f1c <vfprintf+0x2fc>
    2f02:	4c 85       	ldd	r20, Y+12	; 0x0c
    2f04:	5d 85       	ldd	r21, Y+13	; 0x0d
    2f06:	42 15       	cp	r20, r2
    2f08:	53 05       	cpc	r21, r3
    2f0a:	44 f4       	brge	.+16     	; 0x2f1c <vfprintf+0x2fc>
    2f0c:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f0e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f10:	e2 0f       	add	r30, r18
    2f12:	f3 1f       	adc	r31, r19
    2f14:	e6 0d       	add	r30, r6
    2f16:	f7 1d       	adc	r31, r7
    2f18:	81 81       	ldd	r24, Z+1	; 0x01
    2f1a:	01 c0       	rjmp	.+2      	; 0x2f1e <vfprintf+0x2fe>
    2f1c:	80 e3       	ldi	r24, 0x30	; 48
    2f1e:	51 e0       	ldi	r21, 0x01	; 1
    2f20:	25 1a       	sub	r2, r21
    2f22:	31 08       	sbc	r3, r1
    2f24:	2f 5f       	subi	r18, 0xFF	; 255
    2f26:	3f 4f       	sbci	r19, 0xFF	; 255
    2f28:	48 89       	ldd	r20, Y+16	; 0x10
    2f2a:	59 89       	ldd	r21, Y+17	; 0x11
    2f2c:	24 16       	cp	r2, r20
    2f2e:	35 06       	cpc	r3, r21
    2f30:	4c f0       	brlt	.+18     	; 0x2f44 <vfprintf+0x324>
    2f32:	b6 01       	movw	r22, r12
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	2a 8b       	std	Y+18, r18	; 0x12
    2f38:	3b 8b       	std	Y+19, r19	; 0x13
    2f3a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2f3e:	2a 89       	ldd	r18, Y+18	; 0x12
    2f40:	3b 89       	ldd	r19, Y+19	; 0x13
    2f42:	cf cf       	rjmp	.-98     	; 0x2ee2 <vfprintf+0x2c2>
    2f44:	24 14       	cp	r2, r4
    2f46:	35 04       	cpc	r3, r5
    2f48:	39 f4       	brne	.+14     	; 0x2f58 <vfprintf+0x338>
    2f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4c:	96 33       	cpi	r25, 0x36	; 54
    2f4e:	18 f4       	brcc	.+6      	; 0x2f56 <vfprintf+0x336>
    2f50:	95 33       	cpi	r25, 0x35	; 53
    2f52:	11 f4       	brne	.+4      	; 0x2f58 <vfprintf+0x338>
    2f54:	04 ff       	sbrs	r16, 4
    2f56:	81 e3       	ldi	r24, 0x31	; 49
    2f58:	b6 01       	movw	r22, r12
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	4b c0       	rjmp	.+150    	; 0x2ff4 <vfprintf+0x3d4>
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	81 33       	cpi	r24, 0x31	; 49
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <vfprintf+0x346>
    2f64:	0f 7e       	andi	r16, 0xEF	; 239
    2f66:	b6 01       	movw	r22, r12
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2f6e:	11 11       	cpse	r17, r1
    2f70:	05 c0       	rjmp	.+10     	; 0x2f7c <vfprintf+0x35c>
    2f72:	34 fc       	sbrc	r3, 4
    2f74:	18 c0       	rjmp	.+48     	; 0x2fa6 <vfprintf+0x386>
    2f76:	85 e6       	ldi	r24, 0x65	; 101
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	17 c0       	rjmp	.+46     	; 0x2faa <vfprintf+0x38a>
    2f7c:	b6 01       	movw	r22, r12
    2f7e:	8e e2       	ldi	r24, 0x2E	; 46
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	ee 24       	eor	r14, r14
    2f8a:	e3 94       	inc	r14
    2f8c:	e8 0e       	add	r14, r24
    2f8e:	f3 01       	movw	r30, r6
    2f90:	e8 0f       	add	r30, r24
    2f92:	f1 1d       	adc	r31, r1
    2f94:	80 81       	ld	r24, Z
    2f96:	b6 01       	movw	r22, r12
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2f9e:	11 50       	subi	r17, 0x01	; 1
    2fa0:	8e 2d       	mov	r24, r14
    2fa2:	91 f7       	brne	.-28     	; 0x2f88 <vfprintf+0x368>
    2fa4:	e6 cf       	rjmp	.-52     	; 0x2f72 <vfprintf+0x352>
    2fa6:	85 e4       	ldi	r24, 0x45	; 69
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	b6 01       	movw	r22, r12
    2fac:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2fb0:	57 fc       	sbrc	r5, 7
    2fb2:	05 c0       	rjmp	.+10     	; 0x2fbe <vfprintf+0x39e>
    2fb4:	41 14       	cp	r4, r1
    2fb6:	51 04       	cpc	r5, r1
    2fb8:	39 f4       	brne	.+14     	; 0x2fc8 <vfprintf+0x3a8>
    2fba:	04 ff       	sbrs	r16, 4
    2fbc:	05 c0       	rjmp	.+10     	; 0x2fc8 <vfprintf+0x3a8>
    2fbe:	51 94       	neg	r5
    2fc0:	41 94       	neg	r4
    2fc2:	51 08       	sbc	r5, r1
    2fc4:	8d e2       	ldi	r24, 0x2D	; 45
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <vfprintf+0x3aa>
    2fc8:	8b e2       	ldi	r24, 0x2B	; 43
    2fca:	b6 01       	movw	r22, r12
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2fd2:	80 e3       	ldi	r24, 0x30	; 48
    2fd4:	9a e0       	ldi	r25, 0x0A	; 10
    2fd6:	49 16       	cp	r4, r25
    2fd8:	51 04       	cpc	r5, r1
    2fda:	2c f0       	brlt	.+10     	; 0x2fe6 <vfprintf+0x3c6>
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	5a e0       	ldi	r21, 0x0A	; 10
    2fe0:	45 1a       	sub	r4, r21
    2fe2:	51 08       	sbc	r5, r1
    2fe4:	f7 cf       	rjmp	.-18     	; 0x2fd4 <vfprintf+0x3b4>
    2fe6:	b6 01       	movw	r22, r12
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2fee:	b6 01       	movw	r22, r12
    2ff0:	c2 01       	movw	r24, r4
    2ff2:	c0 96       	adiw	r24, 0x30	; 48
    2ff4:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    2ff8:	57 c1       	rjmp	.+686    	; 0x32a8 <vfprintf+0x688>
    2ffa:	83 36       	cpi	r24, 0x63	; 99
    2ffc:	31 f0       	breq	.+12     	; 0x300a <vfprintf+0x3ea>
    2ffe:	83 37       	cpi	r24, 0x73	; 115
    3000:	79 f0       	breq	.+30     	; 0x3020 <vfprintf+0x400>
    3002:	83 35       	cpi	r24, 0x53	; 83
    3004:	09 f0       	breq	.+2      	; 0x3008 <vfprintf+0x3e8>
    3006:	58 c0       	rjmp	.+176    	; 0x30b8 <vfprintf+0x498>
    3008:	21 c0       	rjmp	.+66     	; 0x304c <vfprintf+0x42c>
    300a:	52 01       	movw	r10, r4
    300c:	e2 e0       	ldi	r30, 0x02	; 2
    300e:	ae 0e       	add	r10, r30
    3010:	b1 1c       	adc	r11, r1
    3012:	f2 01       	movw	r30, r4
    3014:	80 81       	ld	r24, Z
    3016:	89 83       	std	Y+1, r24	; 0x01
    3018:	01 e0       	ldi	r16, 0x01	; 1
    301a:	10 e0       	ldi	r17, 0x00	; 0
    301c:	23 01       	movw	r4, r6
    301e:	14 c0       	rjmp	.+40     	; 0x3048 <vfprintf+0x428>
    3020:	52 01       	movw	r10, r4
    3022:	f2 e0       	ldi	r31, 0x02	; 2
    3024:	af 0e       	add	r10, r31
    3026:	b1 1c       	adc	r11, r1
    3028:	f2 01       	movw	r30, r4
    302a:	40 80       	ld	r4, Z
    302c:	51 80       	ldd	r5, Z+1	; 0x01
    302e:	26 ff       	sbrs	r18, 6
    3030:	03 c0       	rjmp	.+6      	; 0x3038 <vfprintf+0x418>
    3032:	61 2f       	mov	r22, r17
    3034:	70 e0       	ldi	r23, 0x00	; 0
    3036:	02 c0       	rjmp	.+4      	; 0x303c <vfprintf+0x41c>
    3038:	6f ef       	ldi	r22, 0xFF	; 255
    303a:	7f ef       	ldi	r23, 0xFF	; 255
    303c:	c2 01       	movw	r24, r4
    303e:	2a 8b       	std	Y+18, r18	; 0x12
    3040:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <strnlen>
    3044:	8c 01       	movw	r16, r24
    3046:	2a 89       	ldd	r18, Y+18	; 0x12
    3048:	2f 77       	andi	r18, 0x7F	; 127
    304a:	15 c0       	rjmp	.+42     	; 0x3076 <vfprintf+0x456>
    304c:	52 01       	movw	r10, r4
    304e:	f2 e0       	ldi	r31, 0x02	; 2
    3050:	af 0e       	add	r10, r31
    3052:	b1 1c       	adc	r11, r1
    3054:	f2 01       	movw	r30, r4
    3056:	40 80       	ld	r4, Z
    3058:	51 80       	ldd	r5, Z+1	; 0x01
    305a:	26 ff       	sbrs	r18, 6
    305c:	03 c0       	rjmp	.+6      	; 0x3064 <vfprintf+0x444>
    305e:	61 2f       	mov	r22, r17
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <vfprintf+0x448>
    3064:	6f ef       	ldi	r22, 0xFF	; 255
    3066:	7f ef       	ldi	r23, 0xFF	; 255
    3068:	c2 01       	movw	r24, r4
    306a:	2a 8b       	std	Y+18, r18	; 0x12
    306c:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <strnlen_P>
    3070:	8c 01       	movw	r16, r24
    3072:	2a 89       	ldd	r18, Y+18	; 0x12
    3074:	20 68       	ori	r18, 0x80	; 128
    3076:	32 2e       	mov	r3, r18
    3078:	23 fd       	sbrc	r18, 3
    307a:	1a c0       	rjmp	.+52     	; 0x30b0 <vfprintf+0x490>
    307c:	8f 2d       	mov	r24, r15
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	08 17       	cp	r16, r24
    3082:	19 07       	cpc	r17, r25
    3084:	a8 f4       	brcc	.+42     	; 0x30b0 <vfprintf+0x490>
    3086:	b6 01       	movw	r22, r12
    3088:	80 e2       	ldi	r24, 0x20	; 32
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3090:	fa 94       	dec	r15
    3092:	f4 cf       	rjmp	.-24     	; 0x307c <vfprintf+0x45c>
    3094:	f2 01       	movw	r30, r4
    3096:	37 fc       	sbrc	r3, 7
    3098:	85 91       	lpm	r24, Z+
    309a:	37 fe       	sbrs	r3, 7
    309c:	81 91       	ld	r24, Z+
    309e:	2f 01       	movw	r4, r30
    30a0:	b6 01       	movw	r22, r12
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    30a8:	f1 10       	cpse	r15, r1
    30aa:	fa 94       	dec	r15
    30ac:	01 50       	subi	r16, 0x01	; 1
    30ae:	11 09       	sbc	r17, r1
    30b0:	01 15       	cp	r16, r1
    30b2:	11 05       	cpc	r17, r1
    30b4:	79 f7       	brne	.-34     	; 0x3094 <vfprintf+0x474>
    30b6:	f8 c0       	rjmp	.+496    	; 0x32a8 <vfprintf+0x688>
    30b8:	84 36       	cpi	r24, 0x64	; 100
    30ba:	11 f0       	breq	.+4      	; 0x30c0 <vfprintf+0x4a0>
    30bc:	89 36       	cpi	r24, 0x69	; 105
    30be:	59 f5       	brne	.+86     	; 0x3116 <vfprintf+0x4f6>
    30c0:	52 01       	movw	r10, r4
    30c2:	27 ff       	sbrs	r18, 7
    30c4:	09 c0       	rjmp	.+18     	; 0x30d8 <vfprintf+0x4b8>
    30c6:	f4 e0       	ldi	r31, 0x04	; 4
    30c8:	af 0e       	add	r10, r31
    30ca:	b1 1c       	adc	r11, r1
    30cc:	f2 01       	movw	r30, r4
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	0a c0       	rjmp	.+20     	; 0x30ec <vfprintf+0x4cc>
    30d8:	f2 e0       	ldi	r31, 0x02	; 2
    30da:	af 0e       	add	r10, r31
    30dc:	b1 1c       	adc	r11, r1
    30de:	f2 01       	movw	r30, r4
    30e0:	60 81       	ld	r22, Z
    30e2:	71 81       	ldd	r23, Z+1	; 0x01
    30e4:	07 2e       	mov	r0, r23
    30e6:	00 0c       	add	r0, r0
    30e8:	88 0b       	sbc	r24, r24
    30ea:	99 0b       	sbc	r25, r25
    30ec:	2f 76       	andi	r18, 0x6F	; 111
    30ee:	32 2e       	mov	r3, r18
    30f0:	97 ff       	sbrs	r25, 7
    30f2:	09 c0       	rjmp	.+18     	; 0x3106 <vfprintf+0x4e6>
    30f4:	90 95       	com	r25
    30f6:	80 95       	com	r24
    30f8:	70 95       	com	r23
    30fa:	61 95       	neg	r22
    30fc:	7f 4f       	sbci	r23, 0xFF	; 255
    30fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3100:	9f 4f       	sbci	r25, 0xFF	; 255
    3102:	20 68       	ori	r18, 0x80	; 128
    3104:	32 2e       	mov	r3, r18
    3106:	2a e0       	ldi	r18, 0x0A	; 10
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	a3 01       	movw	r20, r6
    310c:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__ultoa_invert>
    3110:	e8 2e       	mov	r14, r24
    3112:	e6 18       	sub	r14, r6
    3114:	3f c0       	rjmp	.+126    	; 0x3194 <vfprintf+0x574>
    3116:	02 2f       	mov	r16, r18
    3118:	85 37       	cpi	r24, 0x75	; 117
    311a:	21 f4       	brne	.+8      	; 0x3124 <vfprintf+0x504>
    311c:	0f 7e       	andi	r16, 0xEF	; 239
    311e:	2a e0       	ldi	r18, 0x0A	; 10
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	1d c0       	rjmp	.+58     	; 0x315e <vfprintf+0x53e>
    3124:	09 7f       	andi	r16, 0xF9	; 249
    3126:	8f 36       	cpi	r24, 0x6F	; 111
    3128:	91 f0       	breq	.+36     	; 0x314e <vfprintf+0x52e>
    312a:	18 f4       	brcc	.+6      	; 0x3132 <vfprintf+0x512>
    312c:	88 35       	cpi	r24, 0x58	; 88
    312e:	59 f0       	breq	.+22     	; 0x3146 <vfprintf+0x526>
    3130:	c5 c0       	rjmp	.+394    	; 0x32bc <vfprintf+0x69c>
    3132:	80 37       	cpi	r24, 0x70	; 112
    3134:	19 f0       	breq	.+6      	; 0x313c <vfprintf+0x51c>
    3136:	88 37       	cpi	r24, 0x78	; 120
    3138:	11 f0       	breq	.+4      	; 0x313e <vfprintf+0x51e>
    313a:	c0 c0       	rjmp	.+384    	; 0x32bc <vfprintf+0x69c>
    313c:	00 61       	ori	r16, 0x10	; 16
    313e:	04 ff       	sbrs	r16, 4
    3140:	09 c0       	rjmp	.+18     	; 0x3154 <vfprintf+0x534>
    3142:	04 60       	ori	r16, 0x04	; 4
    3144:	07 c0       	rjmp	.+14     	; 0x3154 <vfprintf+0x534>
    3146:	24 ff       	sbrs	r18, 4
    3148:	08 c0       	rjmp	.+16     	; 0x315a <vfprintf+0x53a>
    314a:	06 60       	ori	r16, 0x06	; 6
    314c:	06 c0       	rjmp	.+12     	; 0x315a <vfprintf+0x53a>
    314e:	28 e0       	ldi	r18, 0x08	; 8
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	05 c0       	rjmp	.+10     	; 0x315e <vfprintf+0x53e>
    3154:	20 e1       	ldi	r18, 0x10	; 16
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	02 c0       	rjmp	.+4      	; 0x315e <vfprintf+0x53e>
    315a:	20 e1       	ldi	r18, 0x10	; 16
    315c:	32 e0       	ldi	r19, 0x02	; 2
    315e:	52 01       	movw	r10, r4
    3160:	07 ff       	sbrs	r16, 7
    3162:	09 c0       	rjmp	.+18     	; 0x3176 <vfprintf+0x556>
    3164:	f4 e0       	ldi	r31, 0x04	; 4
    3166:	af 0e       	add	r10, r31
    3168:	b1 1c       	adc	r11, r1
    316a:	f2 01       	movw	r30, r4
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	08 c0       	rjmp	.+16     	; 0x3186 <vfprintf+0x566>
    3176:	f2 e0       	ldi	r31, 0x02	; 2
    3178:	af 0e       	add	r10, r31
    317a:	b1 1c       	adc	r11, r1
    317c:	f2 01       	movw	r30, r4
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	a3 01       	movw	r20, r6
    3188:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__ultoa_invert>
    318c:	e8 2e       	mov	r14, r24
    318e:	e6 18       	sub	r14, r6
    3190:	0f 77       	andi	r16, 0x7F	; 127
    3192:	30 2e       	mov	r3, r16
    3194:	36 fe       	sbrs	r3, 6
    3196:	0b c0       	rjmp	.+22     	; 0x31ae <vfprintf+0x58e>
    3198:	33 2d       	mov	r19, r3
    319a:	3e 7f       	andi	r19, 0xFE	; 254
    319c:	e1 16       	cp	r14, r17
    319e:	50 f4       	brcc	.+20     	; 0x31b4 <vfprintf+0x594>
    31a0:	34 fe       	sbrs	r3, 4
    31a2:	0a c0       	rjmp	.+20     	; 0x31b8 <vfprintf+0x598>
    31a4:	32 fc       	sbrc	r3, 2
    31a6:	08 c0       	rjmp	.+16     	; 0x31b8 <vfprintf+0x598>
    31a8:	33 2d       	mov	r19, r3
    31aa:	3e 7e       	andi	r19, 0xEE	; 238
    31ac:	05 c0       	rjmp	.+10     	; 0x31b8 <vfprintf+0x598>
    31ae:	0e 2d       	mov	r16, r14
    31b0:	33 2d       	mov	r19, r3
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <vfprintf+0x59a>
    31b4:	0e 2d       	mov	r16, r14
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <vfprintf+0x59a>
    31b8:	01 2f       	mov	r16, r17
    31ba:	34 ff       	sbrs	r19, 4
    31bc:	0c c0       	rjmp	.+24     	; 0x31d6 <vfprintf+0x5b6>
    31be:	fe 01       	movw	r30, r28
    31c0:	ee 0d       	add	r30, r14
    31c2:	f1 1d       	adc	r31, r1
    31c4:	80 81       	ld	r24, Z
    31c6:	80 33       	cpi	r24, 0x30	; 48
    31c8:	11 f4       	brne	.+4      	; 0x31ce <vfprintf+0x5ae>
    31ca:	39 7e       	andi	r19, 0xE9	; 233
    31cc:	08 c0       	rjmp	.+16     	; 0x31de <vfprintf+0x5be>
    31ce:	32 ff       	sbrs	r19, 2
    31d0:	05 c0       	rjmp	.+10     	; 0x31dc <vfprintf+0x5bc>
    31d2:	0e 5f       	subi	r16, 0xFE	; 254
    31d4:	04 c0       	rjmp	.+8      	; 0x31de <vfprintf+0x5be>
    31d6:	83 2f       	mov	r24, r19
    31d8:	86 78       	andi	r24, 0x86	; 134
    31da:	09 f0       	breq	.+2      	; 0x31de <vfprintf+0x5be>
    31dc:	0f 5f       	subi	r16, 0xFF	; 255
    31de:	33 fd       	sbrc	r19, 3
    31e0:	13 c0       	rjmp	.+38     	; 0x3208 <vfprintf+0x5e8>
    31e2:	30 ff       	sbrs	r19, 0
    31e4:	06 c0       	rjmp	.+12     	; 0x31f2 <vfprintf+0x5d2>
    31e6:	1e 2d       	mov	r17, r14
    31e8:	0f 15       	cp	r16, r15
    31ea:	18 f4       	brcc	.+6      	; 0x31f2 <vfprintf+0x5d2>
    31ec:	1f 0d       	add	r17, r15
    31ee:	10 1b       	sub	r17, r16
    31f0:	0f 2d       	mov	r16, r15
    31f2:	0f 15       	cp	r16, r15
    31f4:	68 f4       	brcc	.+26     	; 0x3210 <vfprintf+0x5f0>
    31f6:	b6 01       	movw	r22, r12
    31f8:	80 e2       	ldi	r24, 0x20	; 32
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	3b 8b       	std	Y+19, r19	; 0x13
    31fe:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3202:	0f 5f       	subi	r16, 0xFF	; 255
    3204:	3b 89       	ldd	r19, Y+19	; 0x13
    3206:	f5 cf       	rjmp	.-22     	; 0x31f2 <vfprintf+0x5d2>
    3208:	0f 15       	cp	r16, r15
    320a:	10 f4       	brcc	.+4      	; 0x3210 <vfprintf+0x5f0>
    320c:	f0 1a       	sub	r15, r16
    320e:	01 c0       	rjmp	.+2      	; 0x3212 <vfprintf+0x5f2>
    3210:	f1 2c       	mov	r15, r1
    3212:	34 ff       	sbrs	r19, 4
    3214:	12 c0       	rjmp	.+36     	; 0x323a <vfprintf+0x61a>
    3216:	b6 01       	movw	r22, r12
    3218:	80 e3       	ldi	r24, 0x30	; 48
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	3b 8b       	std	Y+19, r19	; 0x13
    321e:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3222:	3b 89       	ldd	r19, Y+19	; 0x13
    3224:	32 ff       	sbrs	r19, 2
    3226:	17 c0       	rjmp	.+46     	; 0x3256 <vfprintf+0x636>
    3228:	31 fd       	sbrc	r19, 1
    322a:	03 c0       	rjmp	.+6      	; 0x3232 <vfprintf+0x612>
    322c:	88 e7       	ldi	r24, 0x78	; 120
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <vfprintf+0x616>
    3232:	88 e5       	ldi	r24, 0x58	; 88
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	b6 01       	movw	r22, r12
    3238:	0c c0       	rjmp	.+24     	; 0x3252 <vfprintf+0x632>
    323a:	83 2f       	mov	r24, r19
    323c:	86 78       	andi	r24, 0x86	; 134
    323e:	59 f0       	breq	.+22     	; 0x3256 <vfprintf+0x636>
    3240:	31 ff       	sbrs	r19, 1
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <vfprintf+0x628>
    3244:	8b e2       	ldi	r24, 0x2B	; 43
    3246:	01 c0       	rjmp	.+2      	; 0x324a <vfprintf+0x62a>
    3248:	80 e2       	ldi	r24, 0x20	; 32
    324a:	37 fd       	sbrc	r19, 7
    324c:	8d e2       	ldi	r24, 0x2D	; 45
    324e:	b6 01       	movw	r22, r12
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3256:	e1 16       	cp	r14, r17
    3258:	38 f4       	brcc	.+14     	; 0x3268 <vfprintf+0x648>
    325a:	b6 01       	movw	r22, r12
    325c:	80 e3       	ldi	r24, 0x30	; 48
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    3264:	11 50       	subi	r17, 0x01	; 1
    3266:	f7 cf       	rjmp	.-18     	; 0x3256 <vfprintf+0x636>
    3268:	ea 94       	dec	r14
    326a:	f3 01       	movw	r30, r6
    326c:	ee 0d       	add	r30, r14
    326e:	f1 1d       	adc	r31, r1
    3270:	80 81       	ld	r24, Z
    3272:	b6 01       	movw	r22, r12
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    327a:	e1 10       	cpse	r14, r1
    327c:	f5 cf       	rjmp	.-22     	; 0x3268 <vfprintf+0x648>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <vfprintf+0x688>
    3280:	f4 e0       	ldi	r31, 0x04	; 4
    3282:	ff 15       	cp	r31, r15
    3284:	58 f5       	brcc	.+86     	; 0x32dc <vfprintf+0x6bc>
    3286:	84 e0       	ldi	r24, 0x04	; 4
    3288:	f8 1a       	sub	r15, r24
    328a:	33 fe       	sbrs	r3, 3
    328c:	1e c0       	rjmp	.+60     	; 0x32ca <vfprintf+0x6aa>
    328e:	21 10       	cpse	r2, r1
    3290:	26 c0       	rjmp	.+76     	; 0x32de <vfprintf+0x6be>
    3292:	03 ff       	sbrs	r16, 3
    3294:	2a c0       	rjmp	.+84     	; 0x32ea <vfprintf+0x6ca>
    3296:	08 e6       	ldi	r16, 0x68	; 104
    3298:	10 e0       	ldi	r17, 0x00	; 0
    329a:	f3 2d       	mov	r31, r3
    329c:	f0 71       	andi	r31, 0x10	; 16
    329e:	3f 2e       	mov	r3, r31
    32a0:	f8 01       	movw	r30, r16
    32a2:	84 91       	lpm	r24, Z
    32a4:	81 11       	cpse	r24, r1
    32a6:	24 c0       	rjmp	.+72     	; 0x32f0 <vfprintf+0x6d0>
    32a8:	ff 20       	and	r15, r15
    32aa:	09 f4       	brne	.+2      	; 0x32ae <vfprintf+0x68e>
    32ac:	e5 cc       	rjmp	.-1590   	; 0x2c78 <vfprintf+0x58>
    32ae:	b6 01       	movw	r22, r12
    32b0:	80 e2       	ldi	r24, 0x20	; 32
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    32b8:	fa 94       	dec	r15
    32ba:	f6 cf       	rjmp	.-20     	; 0x32a8 <vfprintf+0x688>
    32bc:	f6 01       	movw	r30, r12
    32be:	86 81       	ldd	r24, Z+6	; 0x06
    32c0:	97 81       	ldd	r25, Z+7	; 0x07
    32c2:	26 c0       	rjmp	.+76     	; 0x3310 <vfprintf+0x6f0>
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    32c6:	9f ef       	ldi	r25, 0xFF	; 255
    32c8:	23 c0       	rjmp	.+70     	; 0x3310 <vfprintf+0x6f0>
    32ca:	b6 01       	movw	r22, r12
    32cc:	80 e2       	ldi	r24, 0x20	; 32
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    32d4:	fa 94       	dec	r15
    32d6:	f1 10       	cpse	r15, r1
    32d8:	f8 cf       	rjmp	.-16     	; 0x32ca <vfprintf+0x6aa>
    32da:	d9 cf       	rjmp	.-78     	; 0x328e <vfprintf+0x66e>
    32dc:	f1 2c       	mov	r15, r1
    32de:	b6 01       	movw	r22, r12
    32e0:	82 2d       	mov	r24, r2
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    32e8:	d4 cf       	rjmp	.-88     	; 0x3292 <vfprintf+0x672>
    32ea:	0c e6       	ldi	r16, 0x6C	; 108
    32ec:	10 e0       	ldi	r17, 0x00	; 0
    32ee:	d5 cf       	rjmp	.-86     	; 0x329a <vfprintf+0x67a>
    32f0:	31 10       	cpse	r3, r1
    32f2:	80 52       	subi	r24, 0x20	; 32
    32f4:	b6 01       	movw	r22, r12
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 94 0a 1b 	call	0x3614	; 0x3614 <fputc>
    32fc:	0f 5f       	subi	r16, 0xFF	; 255
    32fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3300:	cf cf       	rjmp	.-98     	; 0x32a0 <vfprintf+0x680>
    3302:	23 e0       	ldi	r18, 0x03	; 3
    3304:	2f 15       	cp	r18, r15
    3306:	10 f4       	brcc	.+4      	; 0x330c <vfprintf+0x6ec>
    3308:	83 e0       	ldi	r24, 0x03	; 3
    330a:	be cf       	rjmp	.-132    	; 0x3288 <vfprintf+0x668>
    330c:	f1 2c       	mov	r15, r1
    330e:	c1 cf       	rjmp	.-126    	; 0x3292 <vfprintf+0x672>
    3310:	63 96       	adiw	r28, 0x13	; 19
    3312:	e2 e1       	ldi	r30, 0x12	; 18
    3314:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__epilogue_restores__>

00003318 <__divmodhi4>:
    3318:	97 fb       	bst	r25, 7
    331a:	07 2e       	mov	r0, r23
    331c:	16 f4       	brtc	.+4      	; 0x3322 <__divmodhi4+0xa>
    331e:	00 94       	com	r0
    3320:	07 d0       	rcall	.+14     	; 0x3330 <__divmodhi4_neg1>
    3322:	77 fd       	sbrc	r23, 7
    3324:	09 d0       	rcall	.+18     	; 0x3338 <__divmodhi4_neg2>
    3326:	0e 94 08 1a 	call	0x3410	; 0x3410 <__udivmodhi4>
    332a:	07 fc       	sbrc	r0, 7
    332c:	05 d0       	rcall	.+10     	; 0x3338 <__divmodhi4_neg2>
    332e:	3e f4       	brtc	.+14     	; 0x333e <__divmodhi4_exit>

00003330 <__divmodhi4_neg1>:
    3330:	90 95       	com	r25
    3332:	81 95       	neg	r24
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	08 95       	ret

00003338 <__divmodhi4_neg2>:
    3338:	70 95       	com	r23
    333a:	61 95       	neg	r22
    333c:	7f 4f       	sbci	r23, 0xFF	; 255

0000333e <__divmodhi4_exit>:
    333e:	08 95       	ret

00003340 <__udivmodsi4>:
    3340:	a1 e2       	ldi	r26, 0x21	; 33
    3342:	1a 2e       	mov	r1, r26
    3344:	aa 1b       	sub	r26, r26
    3346:	bb 1b       	sub	r27, r27
    3348:	fd 01       	movw	r30, r26
    334a:	0d c0       	rjmp	.+26     	; 0x3366 <__udivmodsi4_ep>

0000334c <__udivmodsi4_loop>:
    334c:	aa 1f       	adc	r26, r26
    334e:	bb 1f       	adc	r27, r27
    3350:	ee 1f       	adc	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	a2 17       	cp	r26, r18
    3356:	b3 07       	cpc	r27, r19
    3358:	e4 07       	cpc	r30, r20
    335a:	f5 07       	cpc	r31, r21
    335c:	20 f0       	brcs	.+8      	; 0x3366 <__udivmodsi4_ep>
    335e:	a2 1b       	sub	r26, r18
    3360:	b3 0b       	sbc	r27, r19
    3362:	e4 0b       	sbc	r30, r20
    3364:	f5 0b       	sbc	r31, r21

00003366 <__udivmodsi4_ep>:
    3366:	66 1f       	adc	r22, r22
    3368:	77 1f       	adc	r23, r23
    336a:	88 1f       	adc	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	1a 94       	dec	r1
    3370:	69 f7       	brne	.-38     	; 0x334c <__udivmodsi4_loop>
    3372:	60 95       	com	r22
    3374:	70 95       	com	r23
    3376:	80 95       	com	r24
    3378:	90 95       	com	r25
    337a:	9b 01       	movw	r18, r22
    337c:	ac 01       	movw	r20, r24
    337e:	bd 01       	movw	r22, r26
    3380:	cf 01       	movw	r24, r30
    3382:	08 95       	ret

00003384 <__umulhisi3>:
    3384:	a2 9f       	mul	r26, r18
    3386:	b0 01       	movw	r22, r0
    3388:	b3 9f       	mul	r27, r19
    338a:	c0 01       	movw	r24, r0
    338c:	a3 9f       	mul	r26, r19
    338e:	70 0d       	add	r23, r0
    3390:	81 1d       	adc	r24, r1
    3392:	11 24       	eor	r1, r1
    3394:	91 1d       	adc	r25, r1
    3396:	b2 9f       	mul	r27, r18
    3398:	70 0d       	add	r23, r0
    339a:	81 1d       	adc	r24, r1
    339c:	11 24       	eor	r1, r1
    339e:	91 1d       	adc	r25, r1
    33a0:	08 95       	ret

000033a2 <__prologue_saves__>:
    33a2:	2f 92       	push	r2
    33a4:	3f 92       	push	r3
    33a6:	4f 92       	push	r4
    33a8:	5f 92       	push	r5
    33aa:	6f 92       	push	r6
    33ac:	7f 92       	push	r7
    33ae:	8f 92       	push	r8
    33b0:	9f 92       	push	r9
    33b2:	af 92       	push	r10
    33b4:	bf 92       	push	r11
    33b6:	cf 92       	push	r12
    33b8:	df 92       	push	r13
    33ba:	ef 92       	push	r14
    33bc:	ff 92       	push	r15
    33be:	0f 93       	push	r16
    33c0:	1f 93       	push	r17
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	ca 1b       	sub	r28, r26
    33cc:	db 0b       	sbc	r29, r27
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	09 94       	ijmp

000033da <__epilogue_restores__>:
    33da:	2a 88       	ldd	r2, Y+18	; 0x12
    33dc:	39 88       	ldd	r3, Y+17	; 0x11
    33de:	48 88       	ldd	r4, Y+16	; 0x10
    33e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    33e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    33e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    33e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    33e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    33ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    33ec:	b9 84       	ldd	r11, Y+9	; 0x09
    33ee:	c8 84       	ldd	r12, Y+8	; 0x08
    33f0:	df 80       	ldd	r13, Y+7	; 0x07
    33f2:	ee 80       	ldd	r14, Y+6	; 0x06
    33f4:	fd 80       	ldd	r15, Y+5	; 0x05
    33f6:	0c 81       	ldd	r16, Y+4	; 0x04
    33f8:	1b 81       	ldd	r17, Y+3	; 0x03
    33fa:	aa 81       	ldd	r26, Y+2	; 0x02
    33fc:	b9 81       	ldd	r27, Y+1	; 0x01
    33fe:	ce 0f       	add	r28, r30
    3400:	d1 1d       	adc	r29, r1
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	ed 01       	movw	r28, r26
    340e:	08 95       	ret

00003410 <__udivmodhi4>:
    3410:	aa 1b       	sub	r26, r26
    3412:	bb 1b       	sub	r27, r27
    3414:	51 e1       	ldi	r21, 0x11	; 17
    3416:	07 c0       	rjmp	.+14     	; 0x3426 <__udivmodhi4_ep>

00003418 <__udivmodhi4_loop>:
    3418:	aa 1f       	adc	r26, r26
    341a:	bb 1f       	adc	r27, r27
    341c:	a6 17       	cp	r26, r22
    341e:	b7 07       	cpc	r27, r23
    3420:	10 f0       	brcs	.+4      	; 0x3426 <__udivmodhi4_ep>
    3422:	a6 1b       	sub	r26, r22
    3424:	b7 0b       	sbc	r27, r23

00003426 <__udivmodhi4_ep>:
    3426:	88 1f       	adc	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	5a 95       	dec	r21
    342c:	a9 f7       	brne	.-22     	; 0x3418 <__udivmodhi4_loop>
    342e:	80 95       	com	r24
    3430:	90 95       	com	r25
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	08 95       	ret

00003438 <__ftoa_engine>:
    3438:	28 30       	cpi	r18, 0x08	; 8
    343a:	08 f0       	brcs	.+2      	; 0x343e <__ftoa_engine+0x6>
    343c:	27 e0       	ldi	r18, 0x07	; 7
    343e:	33 27       	eor	r19, r19
    3440:	da 01       	movw	r26, r20
    3442:	99 0f       	add	r25, r25
    3444:	31 1d       	adc	r19, r1
    3446:	87 fd       	sbrc	r24, 7
    3448:	91 60       	ori	r25, 0x01	; 1
    344a:	00 96       	adiw	r24, 0x00	; 0
    344c:	61 05       	cpc	r22, r1
    344e:	71 05       	cpc	r23, r1
    3450:	39 f4       	brne	.+14     	; 0x3460 <__ftoa_engine+0x28>
    3452:	32 60       	ori	r19, 0x02	; 2
    3454:	2e 5f       	subi	r18, 0xFE	; 254
    3456:	3d 93       	st	X+, r19
    3458:	30 e3       	ldi	r19, 0x30	; 48
    345a:	2a 95       	dec	r18
    345c:	e1 f7       	brne	.-8      	; 0x3456 <__ftoa_engine+0x1e>
    345e:	08 95       	ret
    3460:	9f 3f       	cpi	r25, 0xFF	; 255
    3462:	30 f0       	brcs	.+12     	; 0x3470 <__ftoa_engine+0x38>
    3464:	80 38       	cpi	r24, 0x80	; 128
    3466:	71 05       	cpc	r23, r1
    3468:	61 05       	cpc	r22, r1
    346a:	09 f0       	breq	.+2      	; 0x346e <__ftoa_engine+0x36>
    346c:	3c 5f       	subi	r19, 0xFC	; 252
    346e:	3c 5f       	subi	r19, 0xFC	; 252
    3470:	3d 93       	st	X+, r19
    3472:	91 30       	cpi	r25, 0x01	; 1
    3474:	08 f0       	brcs	.+2      	; 0x3478 <__ftoa_engine+0x40>
    3476:	80 68       	ori	r24, 0x80	; 128
    3478:	91 1d       	adc	r25, r1
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	1f 93       	push	r17
    3480:	0f 93       	push	r16
    3482:	ff 92       	push	r15
    3484:	ef 92       	push	r14
    3486:	19 2f       	mov	r17, r25
    3488:	98 7f       	andi	r25, 0xF8	; 248
    348a:	96 95       	lsr	r25
    348c:	e9 2f       	mov	r30, r25
    348e:	96 95       	lsr	r25
    3490:	96 95       	lsr	r25
    3492:	e9 0f       	add	r30, r25
    3494:	ff 27       	eor	r31, r31
    3496:	e6 53       	subi	r30, 0x36	; 54
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	99 27       	eor	r25, r25
    349c:	33 27       	eor	r19, r19
    349e:	ee 24       	eor	r14, r14
    34a0:	ff 24       	eor	r15, r15
    34a2:	a7 01       	movw	r20, r14
    34a4:	e7 01       	movw	r28, r14
    34a6:	05 90       	lpm	r0, Z+
    34a8:	08 94       	sec
    34aa:	07 94       	ror	r0
    34ac:	28 f4       	brcc	.+10     	; 0x34b8 <__ftoa_engine+0x80>
    34ae:	36 0f       	add	r19, r22
    34b0:	e7 1e       	adc	r14, r23
    34b2:	f8 1e       	adc	r15, r24
    34b4:	49 1f       	adc	r20, r25
    34b6:	51 1d       	adc	r21, r1
    34b8:	66 0f       	add	r22, r22
    34ba:	77 1f       	adc	r23, r23
    34bc:	88 1f       	adc	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	06 94       	lsr	r0
    34c2:	a1 f7       	brne	.-24     	; 0x34ac <__ftoa_engine+0x74>
    34c4:	05 90       	lpm	r0, Z+
    34c6:	07 94       	ror	r0
    34c8:	28 f4       	brcc	.+10     	; 0x34d4 <__ftoa_engine+0x9c>
    34ca:	e7 0e       	add	r14, r23
    34cc:	f8 1e       	adc	r15, r24
    34ce:	49 1f       	adc	r20, r25
    34d0:	56 1f       	adc	r21, r22
    34d2:	c1 1d       	adc	r28, r1
    34d4:	77 0f       	add	r23, r23
    34d6:	88 1f       	adc	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	66 1f       	adc	r22, r22
    34dc:	06 94       	lsr	r0
    34de:	a1 f7       	brne	.-24     	; 0x34c8 <__ftoa_engine+0x90>
    34e0:	05 90       	lpm	r0, Z+
    34e2:	07 94       	ror	r0
    34e4:	28 f4       	brcc	.+10     	; 0x34f0 <__ftoa_engine+0xb8>
    34e6:	f8 0e       	add	r15, r24
    34e8:	49 1f       	adc	r20, r25
    34ea:	56 1f       	adc	r21, r22
    34ec:	c7 1f       	adc	r28, r23
    34ee:	d1 1d       	adc	r29, r1
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	66 1f       	adc	r22, r22
    34f6:	77 1f       	adc	r23, r23
    34f8:	06 94       	lsr	r0
    34fa:	a1 f7       	brne	.-24     	; 0x34e4 <__ftoa_engine+0xac>
    34fc:	05 90       	lpm	r0, Z+
    34fe:	07 94       	ror	r0
    3500:	20 f4       	brcc	.+8      	; 0x350a <__ftoa_engine+0xd2>
    3502:	49 0f       	add	r20, r25
    3504:	56 1f       	adc	r21, r22
    3506:	c7 1f       	adc	r28, r23
    3508:	d8 1f       	adc	r29, r24
    350a:	99 0f       	add	r25, r25
    350c:	66 1f       	adc	r22, r22
    350e:	77 1f       	adc	r23, r23
    3510:	88 1f       	adc	r24, r24
    3512:	06 94       	lsr	r0
    3514:	a9 f7       	brne	.-22     	; 0x3500 <__ftoa_engine+0xc8>
    3516:	84 91       	lpm	r24, Z
    3518:	10 95       	com	r17
    351a:	17 70       	andi	r17, 0x07	; 7
    351c:	41 f0       	breq	.+16     	; 0x352e <__ftoa_engine+0xf6>
    351e:	d6 95       	lsr	r29
    3520:	c7 95       	ror	r28
    3522:	57 95       	ror	r21
    3524:	47 95       	ror	r20
    3526:	f7 94       	ror	r15
    3528:	e7 94       	ror	r14
    352a:	1a 95       	dec	r17
    352c:	c1 f7       	brne	.-16     	; 0x351e <__ftoa_engine+0xe6>
    352e:	e0 e7       	ldi	r30, 0x70	; 112
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	68 94       	set
    3534:	15 90       	lpm	r1, Z+
    3536:	15 91       	lpm	r17, Z+
    3538:	35 91       	lpm	r19, Z+
    353a:	65 91       	lpm	r22, Z+
    353c:	95 91       	lpm	r25, Z+
    353e:	05 90       	lpm	r0, Z+
    3540:	7f e2       	ldi	r23, 0x2F	; 47
    3542:	73 95       	inc	r23
    3544:	e1 18       	sub	r14, r1
    3546:	f1 0a       	sbc	r15, r17
    3548:	43 0b       	sbc	r20, r19
    354a:	56 0b       	sbc	r21, r22
    354c:	c9 0b       	sbc	r28, r25
    354e:	d0 09       	sbc	r29, r0
    3550:	c0 f7       	brcc	.-16     	; 0x3542 <__ftoa_engine+0x10a>
    3552:	e1 0c       	add	r14, r1
    3554:	f1 1e       	adc	r15, r17
    3556:	43 1f       	adc	r20, r19
    3558:	56 1f       	adc	r21, r22
    355a:	c9 1f       	adc	r28, r25
    355c:	d0 1d       	adc	r29, r0
    355e:	7e f4       	brtc	.+30     	; 0x357e <__ftoa_engine+0x146>
    3560:	70 33       	cpi	r23, 0x30	; 48
    3562:	11 f4       	brne	.+4      	; 0x3568 <__ftoa_engine+0x130>
    3564:	8a 95       	dec	r24
    3566:	e6 cf       	rjmp	.-52     	; 0x3534 <__ftoa_engine+0xfc>
    3568:	e8 94       	clt
    356a:	01 50       	subi	r16, 0x01	; 1
    356c:	30 f0       	brcs	.+12     	; 0x357a <__ftoa_engine+0x142>
    356e:	08 0f       	add	r16, r24
    3570:	0a f4       	brpl	.+2      	; 0x3574 <__ftoa_engine+0x13c>
    3572:	00 27       	eor	r16, r16
    3574:	02 17       	cp	r16, r18
    3576:	08 f4       	brcc	.+2      	; 0x357a <__ftoa_engine+0x142>
    3578:	20 2f       	mov	r18, r16
    357a:	23 95       	inc	r18
    357c:	02 2f       	mov	r16, r18
    357e:	7a 33       	cpi	r23, 0x3A	; 58
    3580:	28 f0       	brcs	.+10     	; 0x358c <__ftoa_engine+0x154>
    3582:	79 e3       	ldi	r23, 0x39	; 57
    3584:	7d 93       	st	X+, r23
    3586:	2a 95       	dec	r18
    3588:	e9 f7       	brne	.-6      	; 0x3584 <__ftoa_engine+0x14c>
    358a:	10 c0       	rjmp	.+32     	; 0x35ac <__ftoa_engine+0x174>
    358c:	7d 93       	st	X+, r23
    358e:	2a 95       	dec	r18
    3590:	89 f6       	brne	.-94     	; 0x3534 <__ftoa_engine+0xfc>
    3592:	06 94       	lsr	r0
    3594:	97 95       	ror	r25
    3596:	67 95       	ror	r22
    3598:	37 95       	ror	r19
    359a:	17 95       	ror	r17
    359c:	17 94       	ror	r1
    359e:	e1 18       	sub	r14, r1
    35a0:	f1 0a       	sbc	r15, r17
    35a2:	43 0b       	sbc	r20, r19
    35a4:	56 0b       	sbc	r21, r22
    35a6:	c9 0b       	sbc	r28, r25
    35a8:	d0 09       	sbc	r29, r0
    35aa:	98 f0       	brcs	.+38     	; 0x35d2 <__ftoa_engine+0x19a>
    35ac:	23 95       	inc	r18
    35ae:	7e 91       	ld	r23, -X
    35b0:	73 95       	inc	r23
    35b2:	7a 33       	cpi	r23, 0x3A	; 58
    35b4:	08 f0       	brcs	.+2      	; 0x35b8 <__ftoa_engine+0x180>
    35b6:	70 e3       	ldi	r23, 0x30	; 48
    35b8:	7c 93       	st	X, r23
    35ba:	20 13       	cpse	r18, r16
    35bc:	b8 f7       	brcc	.-18     	; 0x35ac <__ftoa_engine+0x174>
    35be:	7e 91       	ld	r23, -X
    35c0:	70 61       	ori	r23, 0x10	; 16
    35c2:	7d 93       	st	X+, r23
    35c4:	30 f0       	brcs	.+12     	; 0x35d2 <__ftoa_engine+0x19a>
    35c6:	83 95       	inc	r24
    35c8:	71 e3       	ldi	r23, 0x31	; 49
    35ca:	7d 93       	st	X+, r23
    35cc:	70 e3       	ldi	r23, 0x30	; 48
    35ce:	2a 95       	dec	r18
    35d0:	e1 f7       	brne	.-8      	; 0x35ca <__ftoa_engine+0x192>
    35d2:	11 24       	eor	r1, r1
    35d4:	ef 90       	pop	r14
    35d6:	ff 90       	pop	r15
    35d8:	0f 91       	pop	r16
    35da:	1f 91       	pop	r17
    35dc:	cf 91       	pop	r28
    35de:	df 91       	pop	r29
    35e0:	99 27       	eor	r25, r25
    35e2:	87 fd       	sbrc	r24, 7
    35e4:	90 95       	com	r25
    35e6:	08 95       	ret

000035e8 <strnlen_P>:
    35e8:	fc 01       	movw	r30, r24
    35ea:	05 90       	lpm	r0, Z+
    35ec:	61 50       	subi	r22, 0x01	; 1
    35ee:	70 40       	sbci	r23, 0x00	; 0
    35f0:	01 10       	cpse	r0, r1
    35f2:	d8 f7       	brcc	.-10     	; 0x35ea <strnlen_P+0x2>
    35f4:	80 95       	com	r24
    35f6:	90 95       	com	r25
    35f8:	8e 0f       	add	r24, r30
    35fa:	9f 1f       	adc	r25, r31
    35fc:	08 95       	ret

000035fe <strnlen>:
    35fe:	fc 01       	movw	r30, r24
    3600:	61 50       	subi	r22, 0x01	; 1
    3602:	70 40       	sbci	r23, 0x00	; 0
    3604:	01 90       	ld	r0, Z+
    3606:	01 10       	cpse	r0, r1
    3608:	d8 f7       	brcc	.-10     	; 0x3600 <strnlen+0x2>
    360a:	80 95       	com	r24
    360c:	90 95       	com	r25
    360e:	8e 0f       	add	r24, r30
    3610:	9f 1f       	adc	r25, r31
    3612:	08 95       	ret

00003614 <fputc>:
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	fb 01       	movw	r30, r22
    361e:	23 81       	ldd	r18, Z+3	; 0x03
    3620:	21 fd       	sbrc	r18, 1
    3622:	03 c0       	rjmp	.+6      	; 0x362a <fputc+0x16>
    3624:	8f ef       	ldi	r24, 0xFF	; 255
    3626:	9f ef       	ldi	r25, 0xFF	; 255
    3628:	28 c0       	rjmp	.+80     	; 0x367a <fputc+0x66>
    362a:	22 ff       	sbrs	r18, 2
    362c:	16 c0       	rjmp	.+44     	; 0x365a <fputc+0x46>
    362e:	46 81       	ldd	r20, Z+6	; 0x06
    3630:	57 81       	ldd	r21, Z+7	; 0x07
    3632:	24 81       	ldd	r18, Z+4	; 0x04
    3634:	35 81       	ldd	r19, Z+5	; 0x05
    3636:	42 17       	cp	r20, r18
    3638:	53 07       	cpc	r21, r19
    363a:	44 f4       	brge	.+16     	; 0x364c <fputc+0x38>
    363c:	a0 81       	ld	r26, Z
    363e:	b1 81       	ldd	r27, Z+1	; 0x01
    3640:	9d 01       	movw	r18, r26
    3642:	2f 5f       	subi	r18, 0xFF	; 255
    3644:	3f 4f       	sbci	r19, 0xFF	; 255
    3646:	31 83       	std	Z+1, r19	; 0x01
    3648:	20 83       	st	Z, r18
    364a:	8c 93       	st	X, r24
    364c:	26 81       	ldd	r18, Z+6	; 0x06
    364e:	37 81       	ldd	r19, Z+7	; 0x07
    3650:	2f 5f       	subi	r18, 0xFF	; 255
    3652:	3f 4f       	sbci	r19, 0xFF	; 255
    3654:	37 83       	std	Z+7, r19	; 0x07
    3656:	26 83       	std	Z+6, r18	; 0x06
    3658:	10 c0       	rjmp	.+32     	; 0x367a <fputc+0x66>
    365a:	eb 01       	movw	r28, r22
    365c:	09 2f       	mov	r16, r25
    365e:	18 2f       	mov	r17, r24
    3660:	00 84       	ldd	r0, Z+8	; 0x08
    3662:	f1 85       	ldd	r31, Z+9	; 0x09
    3664:	e0 2d       	mov	r30, r0
    3666:	09 95       	icall
    3668:	89 2b       	or	r24, r25
    366a:	e1 f6       	brne	.-72     	; 0x3624 <fputc+0x10>
    366c:	8e 81       	ldd	r24, Y+6	; 0x06
    366e:	9f 81       	ldd	r25, Y+7	; 0x07
    3670:	01 96       	adiw	r24, 0x01	; 1
    3672:	9f 83       	std	Y+7, r25	; 0x07
    3674:	8e 83       	std	Y+6, r24	; 0x06
    3676:	81 2f       	mov	r24, r17
    3678:	90 2f       	mov	r25, r16
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	1f 91       	pop	r17
    3680:	0f 91       	pop	r16
    3682:	08 95       	ret

00003684 <vsnprintf>:
    3684:	ae e0       	ldi	r26, 0x0E	; 14
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	e8 e4       	ldi	r30, 0x48	; 72
    368a:	fb e1       	ldi	r31, 0x1B	; 27
    368c:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x1c>
    3690:	8c 01       	movw	r16, r24
    3692:	ca 01       	movw	r24, r20
    3694:	46 e0       	ldi	r20, 0x06	; 6
    3696:	4c 83       	std	Y+4, r20	; 0x04
    3698:	1a 83       	std	Y+2, r17	; 0x02
    369a:	09 83       	std	Y+1, r16	; 0x01
    369c:	77 ff       	sbrs	r23, 7
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <vsnprintf+0x20>
    36a0:	60 e0       	ldi	r22, 0x00	; 0
    36a2:	70 e8       	ldi	r23, 0x80	; 128
    36a4:	fb 01       	movw	r30, r22
    36a6:	31 97       	sbiw	r30, 0x01	; 1
    36a8:	fe 83       	std	Y+6, r31	; 0x06
    36aa:	ed 83       	std	Y+5, r30	; 0x05
    36ac:	a9 01       	movw	r20, r18
    36ae:	bc 01       	movw	r22, r24
    36b0:	ce 01       	movw	r24, r28
    36b2:	01 96       	adiw	r24, 0x01	; 1
    36b4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <vfprintf>
    36b8:	4d 81       	ldd	r20, Y+5	; 0x05
    36ba:	5e 81       	ldd	r21, Y+6	; 0x06
    36bc:	57 fd       	sbrc	r21, 7
    36be:	0a c0       	rjmp	.+20     	; 0x36d4 <vsnprintf+0x50>
    36c0:	2f 81       	ldd	r18, Y+7	; 0x07
    36c2:	38 85       	ldd	r19, Y+8	; 0x08
    36c4:	42 17       	cp	r20, r18
    36c6:	53 07       	cpc	r21, r19
    36c8:	0c f4       	brge	.+2      	; 0x36cc <vsnprintf+0x48>
    36ca:	9a 01       	movw	r18, r20
    36cc:	f8 01       	movw	r30, r16
    36ce:	e2 0f       	add	r30, r18
    36d0:	f3 1f       	adc	r31, r19
    36d2:	10 82       	st	Z, r1
    36d4:	2e 96       	adiw	r28, 0x0e	; 14
    36d6:	e4 e0       	ldi	r30, 0x04	; 4
    36d8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x1c>

000036dc <__ultoa_invert>:
    36dc:	fa 01       	movw	r30, r20
    36de:	aa 27       	eor	r26, r26
    36e0:	28 30       	cpi	r18, 0x08	; 8
    36e2:	51 f1       	breq	.+84     	; 0x3738 <__ultoa_invert+0x5c>
    36e4:	20 31       	cpi	r18, 0x10	; 16
    36e6:	81 f1       	breq	.+96     	; 0x3748 <__ultoa_invert+0x6c>
    36e8:	e8 94       	clt
    36ea:	6f 93       	push	r22
    36ec:	6e 7f       	andi	r22, 0xFE	; 254
    36ee:	6e 5f       	subi	r22, 0xFE	; 254
    36f0:	7f 4f       	sbci	r23, 0xFF	; 255
    36f2:	8f 4f       	sbci	r24, 0xFF	; 255
    36f4:	9f 4f       	sbci	r25, 0xFF	; 255
    36f6:	af 4f       	sbci	r26, 0xFF	; 255
    36f8:	b1 e0       	ldi	r27, 0x01	; 1
    36fa:	3e d0       	rcall	.+124    	; 0x3778 <__ultoa_invert+0x9c>
    36fc:	b4 e0       	ldi	r27, 0x04	; 4
    36fe:	3c d0       	rcall	.+120    	; 0x3778 <__ultoa_invert+0x9c>
    3700:	67 0f       	add	r22, r23
    3702:	78 1f       	adc	r23, r24
    3704:	89 1f       	adc	r24, r25
    3706:	9a 1f       	adc	r25, r26
    3708:	a1 1d       	adc	r26, r1
    370a:	68 0f       	add	r22, r24
    370c:	79 1f       	adc	r23, r25
    370e:	8a 1f       	adc	r24, r26
    3710:	91 1d       	adc	r25, r1
    3712:	a1 1d       	adc	r26, r1
    3714:	6a 0f       	add	r22, r26
    3716:	71 1d       	adc	r23, r1
    3718:	81 1d       	adc	r24, r1
    371a:	91 1d       	adc	r25, r1
    371c:	a1 1d       	adc	r26, r1
    371e:	20 d0       	rcall	.+64     	; 0x3760 <__ultoa_invert+0x84>
    3720:	09 f4       	brne	.+2      	; 0x3724 <__ultoa_invert+0x48>
    3722:	68 94       	set
    3724:	3f 91       	pop	r19
    3726:	2a e0       	ldi	r18, 0x0A	; 10
    3728:	26 9f       	mul	r18, r22
    372a:	11 24       	eor	r1, r1
    372c:	30 19       	sub	r19, r0
    372e:	30 5d       	subi	r19, 0xD0	; 208
    3730:	31 93       	st	Z+, r19
    3732:	de f6       	brtc	.-74     	; 0x36ea <__ultoa_invert+0xe>
    3734:	cf 01       	movw	r24, r30
    3736:	08 95       	ret
    3738:	46 2f       	mov	r20, r22
    373a:	47 70       	andi	r20, 0x07	; 7
    373c:	40 5d       	subi	r20, 0xD0	; 208
    373e:	41 93       	st	Z+, r20
    3740:	b3 e0       	ldi	r27, 0x03	; 3
    3742:	0f d0       	rcall	.+30     	; 0x3762 <__ultoa_invert+0x86>
    3744:	c9 f7       	brne	.-14     	; 0x3738 <__ultoa_invert+0x5c>
    3746:	f6 cf       	rjmp	.-20     	; 0x3734 <__ultoa_invert+0x58>
    3748:	46 2f       	mov	r20, r22
    374a:	4f 70       	andi	r20, 0x0F	; 15
    374c:	40 5d       	subi	r20, 0xD0	; 208
    374e:	4a 33       	cpi	r20, 0x3A	; 58
    3750:	18 f0       	brcs	.+6      	; 0x3758 <__ultoa_invert+0x7c>
    3752:	49 5d       	subi	r20, 0xD9	; 217
    3754:	31 fd       	sbrc	r19, 1
    3756:	40 52       	subi	r20, 0x20	; 32
    3758:	41 93       	st	Z+, r20
    375a:	02 d0       	rcall	.+4      	; 0x3760 <__ultoa_invert+0x84>
    375c:	a9 f7       	brne	.-22     	; 0x3748 <__ultoa_invert+0x6c>
    375e:	ea cf       	rjmp	.-44     	; 0x3734 <__ultoa_invert+0x58>
    3760:	b4 e0       	ldi	r27, 0x04	; 4
    3762:	a6 95       	lsr	r26
    3764:	97 95       	ror	r25
    3766:	87 95       	ror	r24
    3768:	77 95       	ror	r23
    376a:	67 95       	ror	r22
    376c:	ba 95       	dec	r27
    376e:	c9 f7       	brne	.-14     	; 0x3762 <__ultoa_invert+0x86>
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	61 05       	cpc	r22, r1
    3774:	71 05       	cpc	r23, r1
    3776:	08 95       	ret
    3778:	9b 01       	movw	r18, r22
    377a:	ac 01       	movw	r20, r24
    377c:	0a 2e       	mov	r0, r26
    377e:	06 94       	lsr	r0
    3780:	57 95       	ror	r21
    3782:	47 95       	ror	r20
    3784:	37 95       	ror	r19
    3786:	27 95       	ror	r18
    3788:	ba 95       	dec	r27
    378a:	c9 f7       	brne	.-14     	; 0x377e <__ultoa_invert+0xa2>
    378c:	62 0f       	add	r22, r18
    378e:	73 1f       	adc	r23, r19
    3790:	84 1f       	adc	r24, r20
    3792:	95 1f       	adc	r25, r21
    3794:	a0 1d       	adc	r26, r0
    3796:	08 95       	ret

00003798 <_exit>:
    3798:	f8 94       	cli

0000379a <__stop_program>:
    379a:	ff cf       	rjmp	.-2      	; 0x379a <__stop_program>
